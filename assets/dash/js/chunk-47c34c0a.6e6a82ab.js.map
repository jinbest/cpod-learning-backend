{"version":3,"sources":["webpack:///./node_modules/datamaps/node_modules/d3/d3.js","webpack:///./node_modules/datamaps/dist/datamaps.all.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","d3","version","d3_arraySlice","slice","d3_array","list","call","d3_document","this","document","d3_documentElement","node","ownerDocument","documentElement","d3_window","defaultView","childNodes","nodeType","e","i","length","array","Array","Date","now","createElement","style","setProperty","error","d3_element_prototype","Element","prototype","d3_element_setAttribute","setAttribute","d3_element_setAttributeNS","setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","name","value","space","local","priority","d3_ascending","a","b","NaN","d3_number","x","d3_numeric","isNaN","d3_bisector","compare","left","lo","hi","arguments","mid","right","ascending","descending","min","f","n","max","extent","c","sum","s","mean","j","quantile","values","p","H","h","Math","floor","v","median","numbers","push","sort","variance","d","m","deviation","apply","sqrt","d3_bisect","d3_transposeLength","bisectLeft","bisect","bisectRight","bisector","shuffle","i0","i1","t","random","permute","indexes","permutes","pairs","p1","transpose","matrix","row","zip","keys","map","key","entries","merge","arrays","merged","abs","d3_range_integerScale","k","d3_class","ctor","properties","Object","defineProperty","enumerable","d3_Map","_","create","range","start","stop","step","Infinity","Error","object","forEach","set","isArray","o","d3_map_proto","d3_map_zero","d3_map_escape","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","d3_map_size","size","d3_map_empty","d3_Set","d3_identity","d3_rebind","target","source","method","d3_vendorSymbol","charAt","toUpperCase","d3_vendorPrefixes","prefixName","has","get","remove","empty","nest","sortValues","rollup","sortKeys","mapType","depth","keyValue","setter","valuesByKey","sortKey","keyMap","order","add","behavior","rebind","d3_noop","d3_dispatch","d3_dispatch_event","dispatch","listeners","listenerByName","event","l","z","on","listener","indexOf","concat","d3_eventPreventDefault","preventDefault","d3_eventSource","sourceEvent","d3_eventDispatch","of","thiz","argumentz","e1","e0","type","hasOwnProperty","requote","replace","d3_requote_re","d3_subclass","__proto__","property","d3_selection","groups","d3_selectionPrototype","d3_select","querySelector","d3_selectAll","querySelectorAll","d3_selectMatches","d3_selectMatcher","matches","Sizzle","matchesSelector","selection","select","d3_selection_selector","selector","d3_selection_selectorAll","subgroup","subnode","group","subgroups","parentNode","__data__","selectAll","d3_nsXhtml","d3_nsPrefix","svg","xhtml","xlink","xml","xmlns","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","attrConstant","attrConstantNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","RegExp","d3_selection_classes","split","d3_selection_classed","d3_selection_classedName","classedConstant","classedFunction","re","classList","getAttribute","lastIndex","test","d3_selection_style","styleNull","removeProperty","styleConstant","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","namespace","namespaceURI","createElementNS","createNS","d3_selectionRemove","parent","removeChild","d3_selection_dataNode","data","d3_selection_filter","d3_selection_sortComparator","comparator","d3_selection_each","callback","d3_selection_enter","d3_selection_enterPrototype","prefix","attr","getAttributeNS","each","classed","contains","getComputedStyle","getPropertyValue","text","textContent","html","innerHTML","append","appendChild","insert","before","insertBefore","bind","groupData","nodeData","n0","updateNodes","enterNodes","exitNodes","nodeByKeyValue","keyValues","update","enter","exit","datum","filter","next","nextSibling","args","d3_selection_enterInsertBefore","j0","d3_selection_on","capture","wrap","d3_selection_onListener","d3_selection_onFilters","onRemove","removeEventListener","$","onAdd","addEventListener","removeAll","match","d3_selection_onFilter","upgroup","nodes","mouseenter","mouseleave","related","relatedTarget","compareDocumentPosition","d3_event_dragSelect","d3_event_dragId","d3_event_dragSuppress","click","w","suppressClick","off","setTimeout","mouse","container","d3_mousePoint","d3_mouse_bug44083","navigator","userAgent","changedTouches","ownerSVGElement","createSVGPoint","point","window","scrollX","scrollY","position","top","margin","padding","border","ctm","getScreenCTM","pageX","y","pageY","clientX","clientY","matrixTransform","inverse","rect","getBoundingClientRect","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","touch","touches","drag","origin","mousedown","dragstart","touchstart","id","subject","move","end","dragOffset","that","correspondingElement","dragged","dragId","dragName","dragSubject","moved","ended","dragRestore","position0","dx","dy","position1","ε","ε2","π","PI","τ","τε","halfπ","d3_radians","d3_degrees","d3_sgn","d3_cross2d","d3_acos","acos","d3_asin","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","sin","ρ","SQRT2","ρ2","ρ4","interpolateZoom","p0","S","ux0","uy0","w0","ux1","uy1","w1","d2","log","d1","b0","b1","r0","r1","coshr0","u","duration","zoom","translate0","center0","center","mousewheelTimer","touchtime","x0","x1","y0","y1","view","scaleExtent","d3_behavior_zoomInfinity","zooming","mousemove","mouseup","g","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","location","scaleTo","translateTo","zoomTo","__chart__","pow","transition","rescale","domain","invert","zoomstarted","zoomed","scale","translate","zoomended","location0","d3_selection_interrupt","scale0","locations0","distance0","zoomName","touchmove","touchend","targets","relocate","started","changed","LN2","q","l0","l1","distance1","scale1","clearTimeout","d3_behavior_zoomDelta","shiftKey","ceil","deltaY","deltaMode","wheelDelta","detail","view1","d3_transitionInheritId","tween","cx","cy","copy","d3_color","d3_hsl","d3_rgb_parse","d3_rgb_hsl","color","toString","rgb","hsl","d3_hslPrototype","d3_hsl_rgb","m1","m2","vv","round","d3_rgb","d3_hcl","d3_lab_hcl","d3_lab","d3_rgb_lab","r","brighter","darker","hcl","d3_hclPrototype","d3_hcl_lab","cos","d3_lab_K","lab","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_labPrototype","d3_lab_rgb","d3_lab_xyz","d3_xyz_rgb","atan2","d3_xyz_lab","d3_rgbNumber","d3_rgbString","d3_rgbPrototype","d3_rgb_hex","format","exec","toLowerCase","parseFloat","d3_rgb_parseNumber","d3_rgb_names","parseInt","d3_rgb_xyz","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","d3_functor","d3_xhrType","response","url","mimeType","d3_xhr","xhr","headers","request","XMLHttpRequest","responseType","respond","result","status","d3_xhrHasResponse","load","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","send","open","setRequestHeader","overrideMimeType","beforesend","abort","d3_xhr_fixCallback","responseText","functor","dsv","delimiter","reFormat","delimiterCode","charCodeAt","typedResponse","parse","formatRow","formatValue","join","parseRows","Function","JSON","stringify","eol","EOL","EOF","rows","N","I","token","formatRows","fieldSet","fields","field","csv","tsv","d3_timer_queueHead","d3_timer_queueTail","d3_timer_interval","d3_timer_timeout","d3_timer_frame","d3_timer","delay","then","time","timer","d3_timer_step","d3_timer_mark","d3_timer_sweep","isFinite","t0","t1","d3_format_precision","LN10","flush","d3_formatPrefixes","d3_formatPrefix","symbol","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","width","substring","reverse","specifier","d3_format_re","fill","align","sign","zfill","comma","precision","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","unit","formatPrefix","after","lastIndexOf","String","fromCharCode","X","toPrecision","toExponential","toFixed","d3_time","d3_date","d3_date_utc","UTC","getDate","getUTCDate","getDay","getUTCDay","getFullYear","getUTCFullYear","getHours","getUTCHours","getMilliseconds","getUTCMilliseconds","getMinutes","getUTCMinutes","getMonth","getUTCMonth","getSeconds","getUTCSeconds","getTime","getTimezoneOffset","valueOf","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setFullYear","setUTCFullYear","setHours","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","d3_time_interval","number","date","d0","offset","dt","times","range_utc","utc","d3_time_interval_utc","d3_locale_timeFormat","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","d3_time_format","template","string","d3_time_formatPads","d3_time_formats","M","L","Z","d3_time_parse","localZ","W","U","d3_time_parsers","multi","d3_time_formatMulti","d3_time_periodLookup","d3_time_dayRe","d3_time_formatRe","d3_time_dayLookup","d3_time_formatLookup","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_monthRe","d3_time_monthLookup","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","A","B","d3_time_formatPad","dayOfYear","sundayOfYear","mondayOfYear","Y","d3_time_zone","%","d3_time_parseWeekdayAbbrev","d3_time_parseWeekday","d3_time_parseMonthAbbrev","d3_time_parseMonth","d3_time_parseLocaleFull","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseAmPm","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseLocaleDate","d3_time_parseLocaleTime","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","year","day","years","interval","week","sunday","weeks","weekOfYear","-","0","d3_time_numberRe","d3_time_percentRe","names","d3_time_expandYear","zs","zh","zm","formats","numberFormat","timeFormat","d3_locale_enUS","d3_adder","geo","d3_adderSum","d3_adderTemp","reset","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","stream","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","sphere","Point","coordinates","MultiPoint","LineString","d3_geo_streamLine","MultiLineString","Polygon","d3_geo_streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area","d3_geo_areaSum","d3_geo_area","d3_geo_centroidW0","d3_geo_centroidW1","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_areaRingSum","d3_geo_areaRingStart","λ00","φ00","λ0","cosφ0","sinφ0","nextPoint","λ","φ","dλ","sdλ","adλ","cosφ","sinφ","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","bounds","φ0","λ1","φ1","λ_","λ__","φ__","dλSum","ranges","bound","ringPoint","ringStart","ringEnd","linePoint","normal","equatorial","inflection","λi","antimeridian","φi","angle","compareRanges","withinRange","best","centroid","d3_geo_centroid","d3_geo_centroidPoint","d3_geo_centroidLineStart","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","d3_geo_centroidPointXYZ","z0","cz","d3_geo_compose","compose","d3_true","d3_geo_clipPolygon","segments","clipStartInside","interpolate","clip","segment","d3_geo_clipPolygonIntersection","d3_geo_clipPolygonLinkCircular","entry","points","current","isSubject","other","d3_geo_clip","pointVisible","clipLine","clipStart","rotate","line","rotatedClipStart","pointRing","polygon","d3_geo_pointInPolygon","polygonStarted","d3_geo_clipSort","pointLine","ring","buffer","d3_geo_clipBufferListener","ringListener","clean","ringSegments","pop","shift","d3_geo_clipSegmentLength1","lines","rejoin","d3_geo_clipAntimeridian","d3_geo_clipAntimeridianLine","d3_geo_clipAntimeridianInterpolate","sλ0","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","from","to","direction","meridian","parallel","meridianNormal","polarAngle","winding","point0","arc","intersection","φarc","d3_geo_clipCircle","radius","cr","smallRadius","notHemisphere","d3_geo_circleInterpolate","visible","c0","v0","v00","point2","point1","code","intersect","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","δλ","polar","q1","d3_geom_clipLine","ax","ay","bx","by","d3_geo_clipExtentMAX","d3_geo_clipExtent","x__","y__","v__","x_","y_","v_","first","listener_","bufferListener","insidePolygon","inside","wn","a1","corner","comparePoints","ca","cb","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","C","ρ0","forward","ρ0_y","clipExtent","output","valid","conicEqualArea","raw","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathAreaPolygon","d3_geo_pathBoundsX0","d3_geo_pathBoundsY0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY1","d3_geo_pathArea","d3_geo_pathAreaRingStart","x00","y00","d3_geo_pathBounds","d3_geo_pathBoundsPoint","d3_geo_pathBuffer","pointCircle","d3_geo_pathBufferCircle","pointLineStart","lineEndPolygon","pointRadius","d3_geo_lengthSum","d3_geo_pathCentroid","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","context","moveTo","lineTo","closePath","d3_geo_resample","project","δ2","cosMinDistance","maxDepth","resample","resampleRecursive","resampleNone","d3_geo_transformPoint","a00","b00","c00","a0","resampleLineTo","φ2","λ2","x2","y2","dx2","dy2","dz","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projectRotate","δx","δy","projectResample","δφ","δγ","preclip","postclip","clipAngle","projection","d3_geo_rotation","invalidate","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","rotation","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","path","projectStream","contextStream","cacheStream","transform","methods","projectionMutator","equirectangular","circle","Δλ","sinΔλ","cosΔλ","sinφ1","graticule","X1","X0","Y1","Y0","DX","DY","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_length","d3_geo_lengthLineStart","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","d3_geo_conicConformal","F","d3_geo_mercator","d3_geo_conicEquidistant","G","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","d3_geo_mercatorProjection","clipAuto","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","stereographic","transverseMercator","geom","vertices","fx","fy","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","d3_geom_polygonInside","d3_geom_polygonIntersect","x3","x21","x43","y3","y21","y43","ua","d3_geom_polygonClosed","input","d3_geom_voronoiEdges","d3_geom_voronoiCells","d3_geom_voronoiBeaches","d3_geom_voronoiFirstCircle","d3_geom_voronoiCircles","d3_geom_voronoiBeachPool","d3_geom_voronoiCirclePool","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiRemoveBeach","vertex","previous","P","disappearing","lArc","unshift","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","newArc","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","cell","iHalfEdge","halfEdges","nHalfEdges","cells","iCell","prepare","splice","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ha","d3_geom_voronoiClipEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","grandpa","uncle","sibling","voronoi","d3_geom_voronoiClipExtent","polygons","links","triangles","s0","s1","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","d3_geom_quadtreeVisit","sx","sy","children","d3_geom_quadtreeFind","root","closestPoint","minDistance2","find","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","index","delaunay","quadtree","compat","xs","ys","x1_","y1_","x2_","y2_","nx","ny","insertChild","nPoint","visit","interpolateRgb","interpolateObject","interpolateNumber","interpolateString","interpolators","d3_interpolateArray","na","nb","interpolateArray","d3_ease_default","d3_ease","linear","poly","d3_ease_poly","quad","d3_ease_quad","cubic","d3_ease_cubic","d3_ease_sin","d3_ease_exp","d3_ease_circle","elastic","d3_ease_elastic","back","d3_ease_back","bounce","d3_ease_bounce","d3_ease_mode","in","out","d3_ease_reverse","in-out","d3_ease_reflect","out-in","d3_ease_clamp","d3_ease_cubicInOut","t3","d3_interpolateHcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","aa","ba","d3_interpolateRound","d3_transform","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","ease","interpolateHcl","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","d3_interpolateTransformPop","d3_interpolateTranslate","ta","tb","d3_interpolateRotate","ra","rb","d3_interpolateSkew","wa","wb","d3_interpolateScale","ka","kb","d3_interpolateTransform","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","alpha","charges","charge","pointCharge","interpolateTransform","layout","bundle","paths","chord","chords","sortGroups","sortSubgroups","sortChords","relayout","groupSums","groupIndex","subgroupIndex","di","dj","subindex","startAngle","endAngle","resort","force","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","chargeDistance2","d3_layout_forceChargeDistance2","gravity","theta2","repulse","dw","dn","dragmove","resume","tick","weight","chargeDistance","theta","neighbors","dimension","candidates","d3_layout_hierarchyRebind","hierarchy","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","child","stack","childs","revalue","partition","pie","Number","d3_layout_pieSortByValue","padAngle","da","arcs","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","series","orders","offsets","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","d3_layout_stackMaxIndex","sums","d3_layout_stackReduceSum","bottom","tops","bottoms","default","silhouette","wiggle","s2","s3","o0","expand","zero","reduce","d3_layout_stackSum","d3_layout_histogramBinSturges","d3_layout_histogramBinFixed","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","xMin","xMax","yMin","yMax","d3_layout_packLink","d3_layout_packPlace","isect","d3_layout_packUnlink","d3_layout_packTransform","db","dc","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","d3_scaleRange","rangeExtent","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","d3_scale_niceStep","d3_scale_niceIdentity","histogram","frequency","valuer","ranger","binner","bin","bins","thresholds","pack","separation","nodeSize","root0","root1","wrapTree","firstWalk","secondWalk","sizeNode","tx","node1","queue","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","stickies","pad","sticky","mode","ratio","squarify","score","remaining","worst","stickify","rmax","rmin","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","d3_scale_polylinear","d3_scale_linear","clamp","rangeRound","ticks","d3_scale_linearTicks","tickFormat","d3_scale_linearTickFormat","d3_scale_linearNice","d3_scale_linearRebind","d3_scale_linearTickRange","span","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","base","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","rangeBand","steps","xi","rangePoints","rangeRoundPoints","rangeBands","outerPadding","rangeRoundBands","ordinal","category10","d3_category10","category20","d3_category20","category20b","d3_category20b","category20c","d3_category20c","d3_scale_quantile","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","quantize","threshold","innerRadius","d3_svg_arcInnerRadius","outerRadius","d3_svg_arcOuterRadius","cornerRadius","padRadius","d3_svg_arcAuto","d3_svg_arcStartAngle","d3_svg_arcEndAngle","d3_svg_arcPadAngle","cw","rc","circleSegment","rp","ap","d3_svg_arcSweep","h1","h0","rc1","rc0","oc","kc","lc","t30","d3_svg_arcCornerTangents","t12","t03","t21","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","defined","d3_svg_lineLinear","interpolateKey","tension","d3_svg_lineInterpolators","linear-closed","d3_svg_lineLinearClosed","d3_svg_lineStep","step-before","d3_svg_lineStepBefore","step-after","d3_svg_lineStepAfter","basis","d3_svg_lineBasis","basis-open","d3_svg_lineBasisOpen","basis-closed","d3_svg_lineBasisClosed","d3_svg_lineBundle","cardinal","d3_svg_lineCardinal","cardinal-open","d3_svg_lineCardinalOpen","cardinal-closed","d3_svg_lineCardinalClosed","monotone","d3_svg_lineMonotone","d3_svg_lineHermite","d3_svg_lineCardinalTangents","tangents","pi","lp","p2","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineRadial","d3_svg_area","interpolateReverse","points0","points1","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","radial","equals","curve","self","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","d3_transitionId","d3_transitionNamespace","d3_transitionInherit","d3_transitionNode","d3_transition","interrupt","d3_selection_interruptNS","lock","activeId","active","count","d3_transitionPrototype","d3_transition_tween","d3_transition_text","inherit","tweens","schedule","elapsed","cancelId","cancel","subnodes","nameNS","attrTween","attrTweenNS","styleString","styleTween","inheritId","id0","id1","axis","tickFormat_","orient","d3_svg_axisDefaultOrient","innerTickSize","outerTickSize","tickPadding","tickArguments_","tickValues","tickTransform","tickEnter","tickExit","tickUpdate","tickSpacing","pathUpdate","lineEnter","lineUpdate","textEnter","textUpdate","d3_svg_axisX","d3_svg_axisY","d3_svg_axisOrients","tickSize","tickSubdivide","brush","xExtentDomain","yExtentDomain","xExtent","yExtent","xClamp","yClamp","resizes","d3_svg_brushResizes","brushstart","background","resize","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","redraw","eventTarget","event_","resizing","resizingX","resizingY","dragging","keydown","keyup","brushmove","brushend","ex","ey","altKey","keyCode","move1","extent1","extent0","yi","clear","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","d3_time_formatIsoNative","toISOString","d3_time_scale","tickMethod","d3_time_scaleSteps","d3_time_scaleMilliseconds","d3_time_scaleDate","skip","skipped","iso","second","seconds","minute","minutes","hour","timezone","hours","month","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","d3_json","d3_html","createRange","selectNode","body","createContextualFragment","json","responseXML","exports","__webpack_require__","module","undefined","topojson","defaultOptions","scope","responsive","aspectRatio","setProjection","dataType","done","fills","defaultFill","filters","geographyConfig","dataUrl","hideAntarctica","hideHawaiiAndAlaska","borderWidth","borderOpacity","borderColor","popupTemplate","geography","popupOnHover","highlightOnHover","highlightFillColor","highlightBorderColor","highlightBorderWidth","highlightBorderOpacity","projectionConfig","bubblesConfig","fillOpacity","animate","highlightFillOpacity","exitDelay","arcConfig","strokeColor","strokeWidth","arcSharpness","animationSpeed","destination","latitude","longitude","val","datumValue","optionsValue","optionsValues","fnContext","addContainer","element","height","offsetWidth","offsetHeight","options","padding-bottom","addStyleBlock","drawSubunits","fillData","colorCodeData","geoConfig","subunits","addLayer","geoData","objects","fillColor","fillKey","handleGeographyConfig","moveToFront","$this","previousAttributes","stroke","stroke-width","fill-opacity","updatePopup","addLegend","layer","label","legendTitle","defaultFillName","labels","addGraticule","handleArcs","defaults","originXY","destXY","latLngToXY","midXY","sharpness","getTotalLength","WebkitTransition","strokeDasharray","strokeDashoffset","handleLabels","labelStartCoodinates","xOffset","yOffset","smallStateIndex","yStart","fontSize","labelColor","lineWidth","fontFamily","customLabelText","handleBubbles","filterData","bubbles","datumHasCoords","latLng","centered","filterKey","obj","prop","Datamap","addPlugin","disableDefaultStyles","draw","newsize","clientWidth","oldsize","pathAndProjection","results","customTopo","dataJson","tmpData","Datamaps","updateChoropleth","hoverover","worldTopo","world","abwTopo","afgTopo","agoTopo","aiaTopo","albTopo","aldTopo","andTopo","areTopo","argTopo","armTopo","asmTopo","ataTopo","atcTopo","atfTopo","atgTopo","ausTopo","autTopo","azeTopo","bdiTopo","belTopo","benTopo","bfaTopo","bgdTopo","bgrTopo","bhrTopo","bhsTopo","bihTopo","bjnTopo","blmTopo","blrTopo","blzTopo","bmuTopo","bolTopo","braTopo","brbTopo","brnTopo","btnTopo","norTopo","bwaTopo","cafTopo","canTopo","cheTopo","chlTopo","chnTopo","civTopo","clpTopo","cmrTopo","codTopo","cogTopo","cokTopo","colTopo","comTopo","cpvTopo","criTopo","csiTopo","cubTopo","cuwTopo","cymTopo","cynTopo","cypTopo","czeTopo","deuTopo","djiTopo","dmaTopo","dnkTopo","domTopo","dzaTopo","ecuTopo","egyTopo","eriTopo","esbTopo","espTopo","estTopo","ethTopo","finTopo","fjiTopo","flkTopo","fraTopo","froTopo","fsmTopo","gabTopo","psxTopo","gbrTopo","geoTopo","ggyTopo","ghaTopo","gibTopo","ginTopo","gmbTopo","gnbTopo","gnqTopo","grcTopo","grdTopo","grlTopo","gtmTopo","gumTopo","guyTopo","hkgTopo","hmdTopo","hndTopo","hrvTopo","htiTopo","hunTopo","idnTopo","imnTopo","indTopo","ioaTopo","iotTopo","irlTopo","irnTopo","irqTopo","islTopo","isrTopo","itaTopo","jamTopo","jeyTopo","jorTopo","jpnTopo","kabTopo","kasTopo","kazTopo","kenTopo","kgzTopo","khmTopo","kirTopo","knaTopo","korTopo","kosTopo","kwtTopo","laoTopo","lbnTopo","lbrTopo","lbyTopo","lcaTopo","lieTopo","lkaTopo","lsoTopo","ltuTopo","luxTopo","lvaTopo","macTopo","mafTopo","marTopo","mcoTopo","mdaTopo","mdgTopo","mdvTopo","mexTopo","mhlTopo","mkdTopo","mliTopo","mltTopo","mmrTopo","mneTopo","mngTopo","mnpTopo","mozTopo","mrtTopo","msrTopo","musTopo","mwiTopo","mysTopo","namTopo","nclTopo","nerTopo","nfkTopo","ngaTopo","nicTopo","niuTopo","nldTopo","nplTopo","nruTopo","nulTopo","nzlTopo","omnTopo","pakTopo","panTopo","pcnTopo","perTopo","pgaTopo","phlTopo","plwTopo","pngTopo","polTopo","priTopo","prkTopo","prtTopo","pryTopo","pyfTopo","qatTopo","rouTopo","rusTopo","rwaTopo","sahTopo","sauTopo","scrTopo","sdnTopo","sdsTopo","senTopo","serTopo","sgpTopo","sgsTopo","shnTopo","slbTopo","sleTopo","slvTopo","smrTopo","solTopo","somTopo","spmTopo","srbTopo","stpTopo","surTopo","svkTopo","svnTopo","sweTopo","swzTopo","sxmTopo","sycTopo","syrTopo","tcaTopo","tcdTopo","tgoTopo","thaTopo","tjkTopo","tkmTopo","tlsTopo","tonTopo","ttoTopo","tunTopo","turTopo","tuvTopo","twnTopo","tzaTopo","ugaTopo","ukrTopo","umiTopo","uryTopo","usaTopo","usa","usgTopo","uzbTopo","vatTopo","vctTopo","venTopo","vgbTopo","virTopo","vnmTopo","vutTopo","wlfTopo","wsbTopo","wsmTopo","yemTopo","zafTopo","zmbTopo","zweTopo","lat","lng","className","subunit","subunitData","pluginFn","createNewLayer","jQuery","fn","datamaps","datamap"],"mappings":"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C,KAAA,UACAjF,WAAA,CACAnF,KAAA,WAEAuW,GAAA,MACAqzC,KAAA,CACA,uBAEa,CACbx/C,KAAA,eACAjF,WAAA,CACAnF,KAAA,WAEAuW,GAAA,MACAqzC,KAAA,CACA,CACA,OAEA,CACA,SAGa,CACbx/C,KAAA,UACAjF,WAAA,CACAnF,KAAA,aAEAuW,GAAA,MACAqzC,KAAA,CACA,cAEa,CACbx/C,KAAA,UACAjF,WAAA,CACAnF,KAAA,SAEAuW,GAAA,MACAqzC,KAAA,CACA,kBAEa,CACbx/C,KAAA,UACAjF,WAAA,CACAnF,KAAA,gBAEAuW,GAAA,MACAqzC,KAAA,CACA,mCACA,SAEa,CACbx/C,KAAA,UACAjF,WAAA,CACAnF,KAAA,UAEAuW,GAAA,MACAqzC,KAAA,CACA,yCAEa,CACbx/C,KAAA,UACAjF,WAAA,CACAnF,KAAA,YAEAuW,GAAA,MACAqzaAEA,CACA,YACA,WACA,QACA,OACA,QACA,SACA,UAEA,CACA,YACA,SACA,SACA,SACA,UACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,SACA,UAEA,CACA,YACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,SACA,SACA,UAEA,CACA,YACA,SACA,SACA,SAEA,CACA,YACA,OACA,SAEA,CACA,YACA,QAEA,CACA,YACA,QACA,QACA,QACA,SACA,SACA,QACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,QACA,OACA,OACA,QAEA,CACA,YACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,SAEA,CACA,YACA,SAEA,CACA,YACA,UACA,UACA,UACA,UACA,QACA,SACA,QACA,OACA,SACA,QACA,SACA,SACA,QACA,WAEA,CACA,YACA,OACA,OACA,QACA,SACA,QACA,OACA,QACA,SACA,SACA,QACA,QACA,UACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,QACA,QACA,UACA,OACA,SACA,QACA,SACA,SACA,SACA,UACA,SAEA,CACA,YACA,QAEA,CACA,YACA,OACA,SACA,QACA,QACA,SACA,OACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,UAEA,CACA,YACA,QACA,SACA,QACA,SACA,SACA,UAEA,CACA,YACA,QAEA,CACA,YACA,SAEA,CACA,YACA,UACA,QACA,UACA,SACA,WAEA,CACA,YACA,UAEA,CACA,YACA,SACA,SACA,QACA,QACA,QAEA,CACA,YACA,SAEA,CACA,YACA,QACA,QACA,SACA,SACA,QAEA,CACA,YACA,SACA,QACA,OACA,OACA,QACA,QACA,SAEA,CACA,YACA,SACA,SACA,QACA,MACA,SACA,UAEA,CACA,YACA,QACA,SACA,SACA,SACA,MACA,SACA,SACA,SAEA,CACA,YACA,QACA,SACA,SACA,OACA,SACA,UAEA,CACA,YACA,OACA,SACA,SACA,QACA,SAEA,CACA,YACA,SACA,QACA,QACA,SACA,QACA,SAEA,CACA,YACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,QACA,QAEA,CACA,YACA,OACA,QACA,QACA,QACA,UACA,WAEA,CACA,YACA,MACA,OACA,OACA,QACA,OACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UAEA,CACA,YACA,SACA,OACA,OACA,UAEA,CACA,YACA,SACA,UAEA,CACA,YACA,SACA,UAEA,CACA,YACA,OAEA,CACA,YACA,UACA,UACA,QACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,QACA,UACA,SACA,QACA,SACA,UAEA,CACA,YACA,SACA,SACA,SACA,OACA,OACA,OACA,MACA,UAEA,CACA,YACA,QACA,QAEA,CACA,YACA,OACA,OACA,OACA,QACA,QACA,SACA,OACA,QACA,QACA,QAEA,CACA,YACA,WAEA,CACA,YACA,SACA,SACA,OACA,QACA,SACA,UACA,UACA,QACA,QACA,SACA,QACA,SACA,QACA,UAEA,CACA,YACA,SACA,QACA,SACA,SACA,SACA,QACA,OACA,QAEA,CACA,YACA,QACA,QACA,SACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QAEA,CACA,YACA,QACA,OACA,SACA,OACA,QACA,OACA,SACA,QACA,SACA,QACA,UACA,SACA,SAEA,CACA,YACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,OACA,QACA,SACA,SACA,SACA,SACA,SACA,UAEA,CACA,YACA,OACA,QACA,OACA,MACA,QACA,UACA,UACA,WAEA,CACA,YACA,OACA,OACA,SACA,SACA,OACA,OACA,SAEA,CACA,YACA,QACA,QACA,SACA,QACA,QACA,UACA,QACA,QACA,SACA,UACA,QACA,QACA,QACA,SAEA,CACA,YACA,SACA,QACA,SACA,SACA,UACA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,SACA,SACA,OACA,QACA,SAEA,CACA,YACA,QACA,SACA,SACA,SACA,UACA,UACA,QACA,QAEA,CACA,YACA,UACA,UACA,SACA,QACA,QACA,QACA,SACA,UAEA,CACA,YACA,UACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,UAEA,CACA,YACA,SACA,SACA,SACA,UAEA,CACA,YACA,OACA,QACA,QAEA,CACA,YACA,SACA,UACA,SACA,UACA,QACA,SACA,OACA,SACA,UACA,UACA,SACA,OACA,SACA,OACA,QACA,QACA,SACA,QACA,SACA,UACA,WAEA,CACA,YACA,UACA,UACA,SACA,SACA,SACA,SACA,UAEA,CACA,WACA,SACA,OACA,OACA,QACA,MACA,OACA,QACA,MACA,OACA,SACA,OACA,OACA,QACA,QACA,UACA,SAEA,CACA,WACA,QACA,QACA,OACA,MACA,MACA,OACA,OACA,SAEA,CACA,WACA,QACA,QACA,MACA,SAEA,CACA,WACA,QACA,OACA,OACA,QACA,OACA,MACA,OACA,SAEA,CACA,WACA,QACA,QACA,MACA,MACA,OACA,SAEA,CACA,YACA,QACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,QACA,QACA,QACA,SACA,SACA,QACA,UACA,SACA,SACA,UACA,QACA,QACA,UACA,QACA,MACA,SACA,OACA,SACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,SACA,UACA,OACA,OACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,OACA,QACA,QACA,UACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,SACA,SACA,SACA,SACA,QACA,QACA,QACA,SACA,SACA,SACA,QACA,OACA,QACA,SACA,QACA,UACA,OACA,SACA,SACA,SACA,QACA,SACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,QACA,QACA,SAEA,CACA,YACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,QACA,SACA,SACA,OACA,SACA,SACA,QACA,SACA,OACA,QACA,QACA,QACA,OACA,OACA,QACA,QACA,QACA,OACA,SACA,SACA,OACA,QACA,SAEA,CACA,WACA,UACA,SACA,QACA,QACA,OACA,QACA,SACA,WAEA,CACA,WACA,SACA,SACA,SACA,QACA,QACA,SAEA,CACA,WACA,SACA,OACA,SACA,QACA,QACA,UACA,SACA,SACA,SACA,OACA,QAEA,CACA,YACA,SACA,SACA,QACA,SACA,SACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,QACA,SACA,UACA,UACA,UACA,QACA,QACA,QACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,SACA,UACA,SACA,UACA,QACA,UACA,UACA,UACA,UACA,OACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,QACA,UACA,QACA,UACA,SACA,SACA,SACA,UACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,OACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,QACA,OACA,SACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,QACA,SACA,SACA,QACA,QACA,SACA,SACA,OACA,SACA,QACA,QACA,QACA,SACA,SAEA,CACA,YACA,SACA,SACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,OACA,SACA,QACA,QACA,OACA,OACA,OACA,UACA,SACA,QACA,SACA,QACA,OACA,UAEA,CACA,YACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,OACA,UAEA,CACA,YACA,QACA,QACA,OACA,UAEA,CACA,YACA,QACA,OACA,QACA,QACA,OACA,UAEA,CACA,YACA,UACA,SACA,SACA,UACA,UACA,UACA,SACA,OACA,UACA,UACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,MACA,QACA,OACA,SAEA,CACA,YACA,OACA,SACA,MACA,SAEA,CACA,YACA,SACA,SACA,SACA,UACA,QACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,SACA,QACA,UACA,SACA,SACA,QACA,UACA,UACA,UACA,SACA,SACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,MACA,UAEA,CACA,YACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,OACA,UAGA1Y,UAAA,CACA30B,MAAA,0CACAC,UAAA,oBAIAyuD,EAAAzrE,UAAA0sE,QAAA,UACAjB,EAAAzrE,UAAA2sE,QAAA,UACAlB,EAAAzrE,UAAA4sE,QAAA,UACAnB,EAAAzrE,UAAA6sE,QAAA,UACApB,EAAAzrE,UAAA8sE,QAAA,UACArB,EAAAzrE,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","file":"js/chunk-47c34c0a.6e6a82ab.js","sourcesContent":["!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) this.d3 = d3, define(d3); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n}();","(function() {\n  var svg;\n\n  // Save off default references\n  var d3 = window.d3, topojson = window.topojson;\n\n  var defaultOptions = {\n    scope: 'world',\n    responsive: false,\n    aspectRatio: 0.5625,\n    setProjection: setProjection,\n    projection: 'equirectangular',\n    dataType: 'json',\n    data: {},\n    done: function() {},\n    fills: {\n      defaultFill: '#ABDDA4'\n    },\n    filters: {},\n    geographyConfig: {\n        dataUrl: null,\n        hideAntarctica: true,\n        hideHawaiiAndAlaska : false,\n        borderWidth: 1,\n        borderOpacity: 1,\n        borderColor: '#FDFDFD',\n        popupTemplate: function(geography, data) {\n          return '<div class=\"hoverinfo\"><strong>' + geography.properties.name + '</strong></div>';\n        },\n        popupOnHover: true,\n        highlightOnHover: true,\n        highlightFillColor: '#FC8D59',\n        highlightBorderColor: 'rgba(250, 15, 160, 0.2)',\n        highlightBorderWidth: 2,\n        highlightBorderOpacity: 1\n    },\n    projectionConfig: {\n      rotation: [97, 0]\n    },\n    bubblesConfig: {\n        borderWidth: 2,\n        borderOpacity: 1,\n        borderColor: '#FFFFFF',\n        popupOnHover: true,\n        radius: null,\n        popupTemplate: function(geography, data) {\n          return '<div class=\"hoverinfo\"><strong>' + data.name + '</strong></div>';\n        },\n        fillOpacity: 0.75,\n        animate: true,\n        highlightOnHover: true,\n        highlightFillColor: '#FC8D59',\n        highlightBorderColor: 'rgba(250, 15, 160, 0.2)',\n        highlightBorderWidth: 2,\n        highlightBorderOpacity: 1,\n        highlightFillOpacity: 0.85,\n        exitDelay: 100,\n        key: JSON.stringify\n    },\n    arcConfig: {\n      strokeColor: '#DD1C77',\n      strokeWidth: 1,\n      arcSharpness: 1,\n      animationSpeed: 600,\n      popupOnHover: false,\n      popupTemplate: function(geography, data) {\n        // Case with latitude and longitude\n        if ( ( data.origin && data.destination ) && data.origin.latitude && data.origin.longitude && data.destination.latitude && data.destination.longitude ) {\n          return '<div class=\"hoverinfo\"><strong>Arc</strong><br>Origin: ' + JSON.stringify(data.origin) + '<br>Destination: ' + JSON.stringify(data.destination) + '</div>';\n        }\n        // Case with only country name\n        else if ( data.origin && data.destination ) {\n          return '<div class=\"hoverinfo\"><strong>Arc</strong><br>' + data.origin + ' -> ' + data.destination + '</div>';\n        }\n        // Missing information\n        else {\n          return '';\n        }\n      }\n    }\n  };\n\n  /*\n    Getter for value. If not declared on datumValue, look up the chain into optionsValue\n  */\n  function val( datumValue, optionsValue, context ) {\n    if ( typeof context === 'undefined' ) {\n      context = optionsValue;\n      optionsValues = undefined;\n    }\n    var value = typeof datumValue !== 'undefined' ? datumValue : optionsValue;\n\n    if (typeof value === 'undefined') {\n      return  null;\n    }\n\n    if ( typeof value === 'function' ) {\n      var fnContext = [context];\n      if ( context.geography ) {\n        fnContext = [context.geography, context.data];\n      }\n      return value.apply(null, fnContext);\n    }\n    else {\n      return value;\n    }\n  }\n\n  function addContainer( element, height, width ) {\n    this.svg = d3.select( element ).append('svg')\n      .attr('width', width || element.offsetWidth)\n      .attr('data-width', width || element.offsetWidth)\n      .attr('class', 'datamap')\n      .attr('height', height || element.offsetHeight)\n      .style('overflow', 'hidden'); // IE10+ doesn't respect height/width when map is zoomed in\n\n    if (this.options.responsive) {\n      d3.select(this.options.element).style({'position': 'relative', 'padding-bottom': (this.options.aspectRatio*100) + '%'});\n      d3.select(this.options.element).select('svg').style({'position': 'absolute', 'width': '100%', 'height': '100%'});\n      d3.select(this.options.element).select('svg').select('g').selectAll('path').style('vector-effect', 'non-scaling-stroke');\n\n    }\n\n    return this.svg;\n  }\n\n  // setProjection takes the svg element and options\n  function setProjection( element, options ) {\n    var width = options.width || element.offsetWidth;\n    var height = options.height || element.offsetHeight;\n    var projection, path;\n    var svg = this.svg;\n\n    if ( options && typeof options.scope === 'undefined') {\n      options.scope = 'world';\n    }\n\n    if ( options.scope === 'usa' ) {\n      projection = d3.geo.albersUsa()\n        .scale(width)\n        .translate([width / 2, height / 2]);\n    }\n    else if ( options.scope === 'world' ) {\n      projection = d3.geo[options.projection]()\n        .scale((width + 1) / 2 / Math.PI)\n        .translate([width / 2, height / (options.projection === \"mercator\" ? 1.45 : 1.8)]);\n    }\n\n    if ( options.projection === 'orthographic' ) {\n\n      svg.append(\"defs\").append(\"path\")\n        .datum({type: \"Sphere\"})\n        .attr(\"id\", \"sphere\")\n        .attr(\"d\", path);\n\n      svg.append(\"use\")\n          .attr(\"class\", \"stroke\")\n          .attr(\"xlink:href\", \"#sphere\");\n\n      svg.append(\"use\")\n          .attr(\"class\", \"fill\")\n          .attr(\"xlink:href\", \"#sphere\");\n      projection.scale(250).clipAngle(90).rotate(options.projectionConfig.rotation)\n    }\n\n    path = d3.geo.path()\n      .projection( projection );\n\n    return {path: path, projection: projection};\n  }\n\n  function addStyleBlock() {\n    if ( d3.select('.datamaps-style-block').empty() ) {\n      d3.select('head').append('style').attr('class', 'datamaps-style-block')\n      .html('.datamap path.datamaps-graticule { fill: none; stroke: #777; stroke-width: 0.5px; stroke-opacity: .5; pointer-events: none; } .datamap .labels {pointer-events: none;} .datamap path:not(.datamaps-arc), .datamap circle, .datamap line {stroke: #FFFFFF; vector-effect: non-scaling-stroke; stroke-width: 1px;} .datamaps-legend dt, .datamaps-legend dd { float: left; margin: 0 3px 0 0;} .datamaps-legend dd {width: 20px; margin-right: 6px; border-radius: 3px;} .datamaps-legend {padding-bottom: 20px; z-index: 1001; position: absolute; left: 4px; font-size: 12px; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;} .datamaps-hoverover {display: none; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; } .hoverinfo {padding: 4px; border-radius: 1px; background-color: #FFF; box-shadow: 1px 1px 5px #CCC; font-size: 12px; border: 1px solid #CCC; } .hoverinfo hr {border:1px dotted #CCC; }');\n    }\n  }\n\n  function drawSubunits( data ) {\n    var fillData = this.options.fills,\n        colorCodeData = this.options.data || {},\n        geoConfig = this.options.geographyConfig;\n\n    var subunits = this.svg.select('g.datamaps-subunits');\n    if ( subunits.empty() ) {\n      subunits = this.addLayer('datamaps-subunits', null, true);\n    }\n\n    var geoData = topojson.feature( data, data.objects[ this.options.scope ] ).features;\n    if ( geoConfig.hideAntarctica ) {\n      geoData = geoData.filter(function(feature) {\n        return feature.id !== \"ATA\";\n      });\n    }\n\n    if ( geoConfig.hideHawaiiAndAlaska ) {\n      geoData = geoData.filter(function(feature) {\n        return feature.id !== \"HI\" && feature.id !== 'AK';\n      });\n    }\n\n    var geo = subunits.selectAll('path.datamaps-subunit').data( geoData );\n\n    geo.enter()\n      .append('path')\n      .attr('d', this.path)\n      .attr('class', function(d) {\n        return 'datamaps-subunit ' + d.id;\n      })\n      .attr('data-info', function(d) {\n        return JSON.stringify( colorCodeData[d.id]);\n      })\n      .style('fill', function(d) {\n        // If fillKey - use that\n        // Otherwise check 'fill'\n        // Otherwise check 'defaultFill'\n        var fillColor;\n\n        var datum = colorCodeData[d.id];\n        if ( datum && datum.fillKey ) {\n          fillColor = fillData[ val(datum.fillKey, {data: colorCodeData[d.id], geography: d}) ];\n        }\n\n        if ( typeof fillColor === 'undefined' ) {\n          fillColor = val(datum && datum.fillColor, fillData.defaultFill, {data: colorCodeData[d.id], geography: d});\n        }\n\n        return fillColor;\n      })\n      .style('stroke-width', geoConfig.borderWidth)\n      .style('stroke-opacity', geoConfig.borderOpacity)\n      .style('stroke', geoConfig.borderColor);\n  }\n\n  function handleGeographyConfig () {\n    var hoverover;\n    var svg = this.svg;\n    var self = this;\n    var options = this.options.geographyConfig;\n\n    if ( options.highlightOnHover || options.popupOnHover ) {\n      svg.selectAll('.datamaps-subunit')\n        .on('mouseover', function(d) {\n          var $this = d3.select(this);\n          var datum = self.options.data[d.id] || {};\n          if ( options.highlightOnHover ) {\n            var previousAttributes = {\n              'fill':  $this.style('fill'),\n              'stroke': $this.style('stroke'),\n              'stroke-width': $this.style('stroke-width'),\n              'fill-opacity': $this.style('fill-opacity')\n            };\n\n            $this\n              .style('fill', val(datum.highlightFillColor, options.highlightFillColor, datum))\n              .style('stroke', val(datum.highlightBorderColor, options.highlightBorderColor, datum))\n              .style('stroke-width', val(datum.highlightBorderWidth, options.highlightBorderWidth, datum))\n              .style('stroke-opacity', val(datum.highlightBorderOpacity, options.highlightBorderOpacity, datum))\n              .style('fill-opacity', val(datum.highlightFillOpacity, options.highlightFillOpacity, datum))\n              .attr('data-previousAttributes', JSON.stringify(previousAttributes));\n\n            // As per discussion on https://github.com/markmarkoh/datamaps/issues/19\n            if ( ! /((MSIE)|(Trident))/.test(navigator.userAgent) ) {\n             moveToFront.call(this);\n            }\n          }\n\n          if ( options.popupOnHover ) {\n            self.updatePopup($this, d, options, svg);\n          }\n        })\n        .on('mouseout', function() {\n          var $this = d3.select(this);\n\n          if (options.highlightOnHover) {\n            // Reapply previous attributes\n            var previousAttributes = JSON.parse( $this.attr('data-previousAttributes') );\n            for ( var attr in previousAttributes ) {\n              $this.style(attr, previousAttributes[attr]);\n            }\n          }\n          $this.on('mousemove', null);\n          d3.selectAll('.datamaps-hoverover').style('display', 'none');\n        });\n    }\n\n    function moveToFront() {\n      this.parentNode.appendChild(this);\n    }\n  }\n\n  // Plugin to add a simple map legend\n  function addLegend(layer, data, options) {\n    data = data || {};\n    if ( !this.options.fills ) {\n      return;\n    }\n\n    var html = '<dl>';\n    var label = '';\n    if ( data.legendTitle ) {\n      html = '<h2>' + data.legendTitle + '</h2>' + html;\n    }\n    for ( var fillKey in this.options.fills ) {\n\n      if ( fillKey === 'defaultFill') {\n        if (! data.defaultFillName ) {\n          continue;\n        }\n        label = data.defaultFillName;\n      } else {\n        if (data.labels && data.labels[fillKey]) {\n          label = data.labels[fillKey];\n        } else {\n          label= fillKey + ': ';\n        }\n      }\n      html += '<dt>' + label + '</dt>';\n      html += '<dd style=\"background-color:' +  this.options.fills[fillKey] + '\">&nbsp;</dd>';\n    }\n    html += '</dl>';\n\n    var hoverover = d3.select( this.options.element ).append('div')\n      .attr('class', 'datamaps-legend')\n      .html(html);\n  }\n\n    function addGraticule ( layer, options ) {\n      var graticule = d3.geo.graticule();\n      this.svg.insert(\"path\", '.datamaps-subunits')\n        .datum(graticule)\n        .attr(\"class\", \"datamaps-graticule\")\n        .attr(\"d\", this.path);\n  }\n\n  function handleArcs (layer, data, options) {\n    var self = this,\n        svg = this.svg;\n\n    if ( !data || (data && !data.slice) ) {\n      throw \"Datamaps Error - arcs must be an array\";\n    }\n\n    // For some reason arc options were put in an `options` object instead of the parent arc\n    // I don't like this, so to match bubbles and other plugins I'm moving it\n    // This is to keep backwards compatability\n    for ( var i = 0; i < data.length; i++ ) {\n      data[i] = defaults(data[i], data[i].options);\n      delete data[i].options;\n    }\n\n    if ( typeof options === \"undefined\" ) {\n      options = defaultOptions.arcConfig;\n    }\n\n    var arcs = layer.selectAll('path.datamaps-arc').data( data, JSON.stringify );\n\n    var path = d3.geo.path()\n        .projection(self.projection);\n\n    arcs\n      .enter()\n        .append('svg:path')\n        .attr('class', 'datamaps-arc')\n        .style('stroke-linecap', 'round')\n        .style('stroke', function(datum) {\n          return val(datum.strokeColor, options.strokeColor, datum);\n        })\n        .style('fill', 'none')\n        .style('stroke-width', function(datum) {\n            return val(datum.strokeWidth, options.strokeWidth, datum);\n        })\n        .attr('d', function(datum) {\n\n            var originXY, destXY;\n\n            if (typeof datum.origin === \"string\") {\n              switch (datum.origin) {\n                   case \"CAN\":\n                       originXY = self.latLngToXY(56.624472, -114.665293);\n                       break;\n                   case \"CHL\":\n                       originXY = self.latLngToXY(-33.448890, -70.669265);\n                       break;\n                   case \"IDN\":\n                       originXY = self.latLngToXY(-6.208763, 106.845599);\n                       break;\n                   case \"JPN\":\n                       originXY = self.latLngToXY(35.689487, 139.691706);\n                       break;\n                   case \"MYS\":\n                       originXY = self.latLngToXY(3.139003, 101.686855);\n                       break;\n                   case \"NOR\":\n                       originXY = self.latLngToXY(59.913869, 10.752245);\n                       break;\n                   case \"USA\":\n                       originXY = self.latLngToXY(41.140276, -100.760145);\n                       break;\n                   case \"VNM\":\n                       originXY = self.latLngToXY(21.027764, 105.834160);\n                       break;\n                   default:\n                       originXY = self.path.centroid(svg.select('path.' + datum.origin).data()[0]);\n               }\n            } else {\n              originXY = self.latLngToXY(val(datum.origin.latitude, datum), val(datum.origin.longitude, datum))\n            }\n\n            if (typeof datum.destination === 'string') {\n              switch (datum.destination) {\n                     case \"CAN\":\n                        destXY = self.latLngToXY(56.624472, -114.665293);\n                        break;\n                    case \"CHL\":\n                        destXY = self.latLngToXY(-33.448890, -70.669265);\n                        break;\n                    case \"IDN\":\n                        destXY = self.latLngToXY(-6.208763, 106.845599);\n                        break;\n                    case \"JPN\":\n                        destXY = self.latLngToXY(35.689487, 139.691706);\n                        break;\n                    case \"MYS\":\n                        destXY = self.latLngToXY(3.139003, 101.686855);\n                        break;\n                    case \"NOR\":\n                        destXY = self.latLngToXY(59.913869, 10.752245);\n                        break;\n                    case \"USA\":\n                        destXY = self.latLngToXY(41.140276, -100.760145);\n                        break;\n                    case \"VNM\":\n                        destXY = self.latLngToXY(21.027764, 105.834160);\n                        break;\n                    default:\n                        destXY = self.path.centroid(svg.select('path.' + datum.destination).data()[0]);\n              }\n            } else {\n              destXY = self.latLngToXY(val(datum.destination.latitude, datum), val(datum.destination.longitude, datum));\n            }\n            var midXY = [ (originXY[0] + destXY[0]) / 2, (originXY[1] + destXY[1]) / 2];\n            if (options.greatArc) {\n                  // TODO: Move this to inside `if` clause when setting attr `d`\n              var greatArc = d3.geo.greatArc()\n                  .source(function(d) { return [val(d.origin.longitude, d), val(d.origin.latitude, d)]; })\n                  .target(function(d) { return [val(d.destination.longitude, d), val(d.destination.latitude, d)]; });\n\n              return path(greatArc(datum))\n            }\n            var sharpness = val(datum.arcSharpness, options.arcSharpness, datum);\n            return \"M\" + originXY[0] + ',' + originXY[1] + \"S\" + (midXY[0] + (50 * sharpness)) + \",\" + (midXY[1] - (75 * sharpness)) + \",\" + destXY[0] + \",\" + destXY[1];\n        })\n        .attr('data-info', function(datum) {\n          return JSON.stringify(datum);\n        })\n        .on('mouseover', function ( datum ) {\n          var $this = d3.select(this);\n\n          if (options.popupOnHover) {\n            self.updatePopup($this, datum, options, svg);\n          }\n        })\n        .on('mouseout', function ( datum ) {\n          var $this = d3.select(this);\n\n          d3.selectAll('.datamaps-hoverover').style('display', 'none');\n        })\n        .transition()\n          .delay(100)\n          .style('fill', function(datum) {\n            /*\n              Thank you Jake Archibald, this is awesome.\n              Source: http://jakearchibald.com/2013/animated-line-drawing-svg/\n            */\n            var length = this.getTotalLength();\n            this.style.transition = this.style.WebkitTransition = 'none';\n            this.style.strokeDasharray = length + ' ' + length;\n            this.style.strokeDashoffset = length;\n            this.getBoundingClientRect();\n            this.style.transition = this.style.WebkitTransition = 'stroke-dashoffset ' + val(datum.animationSpeed, options.animationSpeed, datum) + 'ms ease-out';\n            this.style.strokeDashoffset = '0';\n            return 'none';\n          })\n\n    arcs.exit()\n      .transition()\n      .style('opacity', 0)\n      .remove();\n  }\n\n  function handleLabels ( layer, options ) {\n    var self = this;\n    options = options || {};\n    var labelStartCoodinates = this.projection([-67.707617, 42.722131]);\n    this.svg.selectAll(\".datamaps-subunit\")\n      .attr(\"data-foo\", function(d) {\n        var center = self.path.centroid(d);\n        var xOffset = 7.5, yOffset = 5;\n\n        if ( [\"FL\", \"KY\", \"MI\"].indexOf(d.id) > -1 ) xOffset = -2.5;\n        if ( d.id === \"NY\" ) xOffset = -1;\n        if ( d.id === \"MI\" ) yOffset = 18;\n        if ( d.id === \"LA\" ) xOffset = 13;\n\n        var x,y;\n\n        x = center[0] - xOffset;\n        y = center[1] + yOffset;\n\n        var smallStateIndex = [\"VT\", \"NH\", \"MA\", \"RI\", \"CT\", \"NJ\", \"DE\", \"MD\", \"DC\"].indexOf(d.id);\n        if ( smallStateIndex > -1) {\n          var yStart = labelStartCoodinates[1];\n          x = labelStartCoodinates[0];\n          y = yStart + (smallStateIndex * (2+ (options.fontSize || 12)));\n          layer.append(\"line\")\n            .attr(\"x1\", x - 3)\n            .attr(\"y1\", y - 5)\n            .attr(\"x2\", center[0])\n            .attr(\"y2\", center[1])\n            .style(\"stroke\", options.labelColor || \"#000\")\n            .style(\"stroke-width\", options.lineWidth || 1)\n        }\n\n          layer.append(\"text\")\n              .attr(\"x\", x)\n              .attr(\"y\", y)\n              .style(\"font-size\", (options.fontSize || 10) + 'px')\n              .style(\"font-family\", options.fontFamily || \"Verdana\")\n              .style(\"fill\", options.labelColor || \"#000\")\n              .text(function() {\n                  if (options.customLabelText && options.customLabelText[d.id]) {\n                      return options.customLabelText[d.id]\n                  } else {\n                      return d.id\n                  }\n              });\n\n        return \"bar\";\n      });\n  }\n\n\n  function handleBubbles (layer, data, options ) {\n    var self = this,\n        fillData = this.options.fills,\n        filterData = this.options.filters,\n        svg = this.svg;\n\n    if ( !data || (data && !data.slice) ) {\n      throw \"Datamaps Error - bubbles must be an array\";\n    }\n\n    var bubbles = layer.selectAll('circle.datamaps-bubble').data( data, options.key );\n\n    bubbles\n      .enter()\n        .append('svg:circle')\n        .attr('class', 'datamaps-bubble')\n        .attr('cx', function ( datum ) {\n          var latLng;\n          if ( datumHasCoords(datum) ) {\n            latLng = self.latLngToXY(datum.latitude, datum.longitude);\n          }\n          else if ( datum.centered ) {\n            if ( datum.centered === 'USA' ) {\n              latLng = self.projection([-98.58333, 39.83333])\n            } else {\n              latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);\n            }\n          }\n          if ( latLng ) return latLng[0];\n        })\n        .attr('cy', function ( datum ) {\n          var latLng;\n          if ( datumHasCoords(datum) ) {\n            latLng = self.latLngToXY(datum.latitude, datum.longitude);\n          }\n          else if ( datum.centered ) {\n            if ( datum.centered === 'USA' ) {\n              latLng = self.projection([-98.58333, 39.83333])\n            } else {\n              latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);\n            }\n          }\n          if ( latLng ) return latLng[1];\n        })\n        .attr('r', function(datum) {\n          // If animation enabled start with radius 0, otherwise use full size.\n          return options.animate ? 0 : val(datum.radius, options.radius, datum);\n        })\n        .attr('data-info', function(datum) {\n          return JSON.stringify(datum);\n        })\n        .attr('filter', function (datum) {\n          var filterKey = filterData[ val(datum.filterKey, options.filterKey, datum) ];\n\n          if (filterKey) {\n            return filterKey;\n          }\n        })\n        .style('stroke', function ( datum ) {\n          return val(datum.borderColor, options.borderColor, datum);\n        })\n        .style('stroke-width', function ( datum ) {\n          return val(datum.borderWidth, options.borderWidth, datum);\n        })\n        .style('stroke-opacity', function ( datum ) {\n          return val(datum.borderOpacity, options.borderOpacity, datum);\n        })\n        .style('fill-opacity', function ( datum ) {\n          return val(datum.fillOpacity, options.fillOpacity, datum);\n        })\n        .style('fill', function ( datum ) {\n          var fillColor = fillData[ val(datum.fillKey, options.fillKey, datum) ];\n          return fillColor || fillData.defaultFill;\n        })\n        .on('mouseover', function ( datum ) {\n          var $this = d3.select(this);\n\n          if (options.highlightOnHover) {\n            // Save all previous attributes for mouseout\n            var previousAttributes = {\n              'fill':  $this.style('fill'),\n              'stroke': $this.style('stroke'),\n              'stroke-width': $this.style('stroke-width'),\n              'fill-opacity': $this.style('fill-opacity')\n            };\n\n            $this\n              .style('fill', val(datum.highlightFillColor, options.highlightFillColor, datum))\n              .style('stroke', val(datum.highlightBorderColor, options.highlightBorderColor, datum))\n              .style('stroke-width', val(datum.highlightBorderWidth, options.highlightBorderWidth, datum))\n              .style('stroke-opacity', val(datum.highlightBorderOpacity, options.highlightBorderOpacity, datum))\n              .style('fill-opacity', val(datum.highlightFillOpacity, options.highlightFillOpacity, datum))\n              .attr('data-previousAttributes', JSON.stringify(previousAttributes));\n          }\n\n          if (options.popupOnHover) {\n            self.updatePopup($this, datum, options, svg);\n          }\n        })\n        .on('mouseout', function ( datum ) {\n          var $this = d3.select(this);\n\n          if (options.highlightOnHover) {\n            // Reapply previous attributes\n            var previousAttributes = JSON.parse( $this.attr('data-previousAttributes') );\n            for ( var attr in previousAttributes ) {\n              $this.style(attr, previousAttributes[attr]);\n            }\n          }\n\n          d3.selectAll('.datamaps-hoverover').style('display', 'none');\n        })\n\n    bubbles.transition()\n      .duration(400)\n      .attr('r', function ( datum ) {\n        return val(datum.radius, options.radius, datum);\n      })\n    .transition()\n      .duration(0)\n      .attr('data-info', function(d) {\n        return JSON.stringify(d);\n      });\n\n    bubbles.exit()\n      .transition()\n        .delay(options.exitDelay)\n        .attr(\"r\", 0)\n        .remove();\n\n    function datumHasCoords (datum) {\n      return typeof datum !== 'undefined' && typeof datum.latitude !== 'undefined' && typeof datum.longitude !== 'undefined';\n    }\n  }\n\n  function defaults(obj) {\n    Array.prototype.slice.call(arguments, 1).forEach(function(source) {\n      if (source) {\n        for (var prop in source) {\n          // Deep copy if property not set\n          if (obj[prop] == null) {\n            if (typeof source[prop] == 'function') {\n              obj[prop] = source[prop];\n            }\n            else {\n              obj[prop] = JSON.parse(JSON.stringify(source[prop]));\n            }\n          }\n        }\n      }\n    });\n    return obj;\n  }\n  /**************************************\n             Public Functions\n  ***************************************/\n\n  function Datamap( options ) {\n\n    if ( typeof d3 === 'undefined' || typeof topojson === 'undefined' ) {\n      throw new Error('Include d3.js (v3.0.3 or greater) and topojson on this page before creating a new map');\n   }\n    // Set options for global use\n    this.options = defaults(options, defaultOptions);\n    this.options.geographyConfig = defaults(options.geographyConfig, defaultOptions.geographyConfig);\n    this.options.projectionConfig = defaults(options.projectionConfig, defaultOptions.projectionConfig);\n    this.options.bubblesConfig = defaults(options.bubblesConfig, defaultOptions.bubblesConfig);\n    this.options.arcConfig = defaults(options.arcConfig, defaultOptions.arcConfig);\n\n    // Add the SVG container\n    if ( d3.select( this.options.element ).select('svg').length > 0 ) {\n      addContainer.call(this, this.options.element, this.options.height, this.options.width );\n    }\n\n    // Add core plugins to this instance\n    this.addPlugin('bubbles', handleBubbles);\n    this.addPlugin('legend', addLegend);\n    this.addPlugin('arc', handleArcs);\n    this.addPlugin('labels', handleLabels);\n    this.addPlugin('graticule', addGraticule);\n\n    // Append style block with basic hoverover styles\n    if ( ! this.options.disableDefaultStyles ) {\n      addStyleBlock();\n    }\n\n    return this.draw();\n  }\n\n  // Resize map\n  Datamap.prototype.resize = function () {\n\n    var self = this;\n    var options = self.options;\n\n    if (options.responsive) {\n      var newsize = options.element.clientWidth,\n          oldsize = d3.select( options.element).select('svg').attr('data-width');\n\n      d3.select(options.element).select('svg').selectAll('g').attr('transform', 'scale(' + (newsize / oldsize) + ')');\n    }\n  }\n\n  // Actually draw the features(states & countries)\n  Datamap.prototype.draw = function() {\n    // Save off in a closure\n    var self = this;\n    var options = self.options;\n\n    // Set projections and paths based on scope\n    var pathAndProjection = options.setProjection.apply(this, [options.element, options] );\n\n    this.path = pathAndProjection.path;\n    this.projection = pathAndProjection.projection;\n\n    // If custom URL for topojson data, retrieve it and render\n    if ( options.geographyConfig.dataUrl ) {\n      d3.json( options.geographyConfig.dataUrl, function(error, results) {\n        if ( error ) throw new Error(error);\n        self.customTopo = results;\n        draw( results );\n      });\n    }\n    else {\n      draw( this[options.scope + 'Topo'] || options.geographyConfig.dataJson);\n    }\n\n    return this;\n\n      function draw (data) {\n        // If fetching remote data, draw the map first then call `updateChoropleth`\n        if ( self.options.dataUrl ) {\n          // Allow for csv or json data types\n          d3[self.options.dataType](self.options.dataUrl, function(data) {\n            // In the case of csv, transform data to object\n            if ( self.options.dataType === 'csv' && (data && data.slice) ) {\n              var tmpData = {};\n              for(var i = 0; i < data.length; i++) {\n                tmpData[data[i].id] = data[i];\n              }\n              data = tmpData;\n            }\n            Datamaps.prototype.updateChoropleth.call(self, data);\n          });\n        }\n        drawSubunits.call(self, data);\n        handleGeographyConfig.call(self);\n\n        if ( self.options.geographyConfig.popupOnHover || self.options.bubblesConfig.popupOnHover) {\n          hoverover = d3.select( self.options.element ).append('div')\n            .attr('class', 'datamaps-hoverover')\n            .style('z-index', 10001)\n            .style('position', 'absolute');\n        }\n\n        // Fire off finished callback\n        self.options.done(self);\n      }\n  };\n  /**************************************\n                TopoJSON\n  ***************************************/\n  Datamap.prototype.worldTopo = {\n    \"type\": \"Topology\",\n    \"objects\": {\n        \"world\": {\n            \"type\": \"GeometryCollection\",\n            \"geometries\": [{\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Afghanistan\"\n                },\n                \"id\": \"AFG\",\n                \"arcs\": [\n                    [0, 1, 2, 3, 4, 5]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Angola\"\n                },\n                \"id\": \"AGO\",\n                \"arcs\": [\n                    [\n                        [6, 7, 8, 9]\n                    ],\n                    [\n                        [10, 11, 12]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Albania\"\n                },\n                \"id\": \"ALB\",\n                \"arcs\": [\n                    [13, 14, 15, 16, 17]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"United Arab Emirates\"\n                },\n                \"id\": \"ARE\",\n                \"arcs\": [\n                    [18, 19, 20, 21, 22]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Argentina\"\n                },\n                \"id\": \"ARG\",\n                \"arcs\": [\n                    [\n                        [23, 24]\n                    ],\n                    [\n                        [25, 26, 27, 28, 29, 30]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Armenia\"\n                },\n                \"id\": \"ARM\",\n                \"arcs\": [\n                    [31, 32, 33, 34, 35]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Antarctica\"\n                },\n                \"id\": \"ATA\",\n                \"arcs\": [\n                    [\n                        [36]\n                    ],\n                    [\n                        [37]\n                    ],\n                    [\n                        [38]\n                    ],\n                    [\n                        [39]\n                    ],\n                    [\n                        [40]\n                    ],\n                    [\n                        [41]\n                    ],\n                    [\n                        [42]\n                    ],\n                    [\n                        [43]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"French Southern and Antarctic Lands\"\n                },\n                \"id\": \"ATF\",\n                \"arcs\": [\n                    [44]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Australia\"\n                },\n                \"id\": \"AUS\",\n                \"arcs\": [\n                    [\n                        [45]\n                    ],\n                    [\n                        [46]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Austria\"\n                },\n                \"id\": \"AUT\",\n                \"arcs\": [\n                    [47, 48, 49, 50, 51, 52, 53]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Azerbaijan\"\n                },\n                \"id\": \"AZE\",\n                \"arcs\": [\n                    [\n                        [54, -35]\n                    ],\n                    [\n                        [55, 56, -33, 57, 58]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Burundi\"\n                },\n                \"id\": \"BDI\",\n                \"arcs\": [\n                    [59, 60, 61]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Belgium\"\n                },\n                \"id\": \"BEL\",\n                \"arcs\": [\n                    [62, 63, 64, 65, 66]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Benin\"\n                },\n                \"id\": \"BEN\",\n                \"arcs\": [\n                    [67, 68, 69, 70, 71]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Burkina Faso\"\n                },\n                \"id\": \"BFA\",\n                \"arcs\": [\n                    [72, 73, 74, -70, 75, 76]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Bangladesh\"\n                },\n                \"id\": \"BGD\",\n                \"arcs\": [\n                    [77, 78, 79]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Bulgaria\"\n                },\n                \"id\": \"BGR\",\n                \"arcs\": [\n                    [80, 81, 82, 83, 84, 85]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"The Bahamas\"\n                },\n                \"id\": \"BHS\",\n                \"arcs\": [\n                    [\n                        [86]\n                    ],\n                    [\n                        [87]\n                    ],\n                    [\n                        [88]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Bosnia and Herzegovina\"\n                },\n                \"id\": \"BIH\",\n                \"arcs\": [\n                    [89, 90, 91]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Belarus\"\n                },\n                \"id\": \"BLR\",\n                \"arcs\": [\n                    [92, 93, 94, 95, 96]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Belize\"\n                },\n                \"id\": \"BLZ\",\n                \"arcs\": [\n                    [97, 98, 99]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Bolivia\"\n                },\n                \"id\": \"BOL\",\n                \"arcs\": [\n                    [100, 101, 102, 103, -31]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Brazil\"\n                },\n                \"id\": \"BRA\",\n                \"arcs\": [\n                    [-27, 104, -103, 105, 106, 107, 108, 109, 110, 111, 112]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Brunei\"\n                },\n                \"id\": \"BRN\",\n                \"arcs\": [\n                    [113, 114]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Bhutan\"\n                },\n                \"id\": \"BTN\",\n                \"arcs\": [\n                    [115, 116]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Botswana\"\n                },\n                \"id\": \"BWA\",\n                \"arcs\": [\n                    [117, 118, 119, 120]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Central African Republic\"\n                },\n                \"id\": \"CAF\",\n                \"arcs\": [\n                    [121, 122, 123, 124, 125, 126, 127]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Canada\"\n                },\n                \"id\": \"CAN\",\n                \"arcs\": [\n                    [\n                        [128]\n                    ],\n                    [\n                        [129]\n                    ],\n                    [\n                        [130]\n                    ],\n                    [\n                        [131]\n                    ],\n                    [\n                        [132]\n                    ],\n                    [\n                        [133]\n                    ],\n                    [\n                        [134]\n                    ],\n                    [\n                        [135]\n                    ],\n                    [\n                        [136]\n                    ],\n                    [\n                        [137]\n                    ],\n                    [\n                        [138, 139, 140, 141]\n                    ],\n                    [\n                        [142]\n                    ],\n                    [\n                        [143]\n                    ],\n                    [\n                        [144]\n                    ],\n                    [\n                        [145]\n                    ],\n                    [\n                        [146]\n                    ],\n                    [\n                        [147]\n                    ],\n                    [\n                        [148]\n                    ],\n                    [\n                        [149]\n                    ],\n                    [\n                        [150]\n                    ],\n                    [\n                        [151]\n                    ],\n                    [\n                        [152]\n                    ],\n                    [\n                        [153]\n                    ],\n                    [\n                        [154]\n                    ],\n                    [\n                        [155]\n                    ],\n                    [\n                        [156]\n                    ],\n                    [\n                        [157]\n                    ],\n                    [\n                        [158]\n                    ],\n                    [\n                        [159]\n                    ],\n                    [\n                        [160]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Switzerland\"\n                },\n                \"id\": \"CHE\",\n                \"arcs\": [\n                    [-51, 161, 162, 163]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Chile\"\n                },\n                \"id\": \"CHL\",\n                \"arcs\": [\n                    [\n                        [-24, 164]\n                    ],\n                    [\n                        [-30, 165, 166, -101]\n                    ]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"China\"\n                },\n                \"id\": \"CHN\",\n                \"arcs\": [\n                    [\n                        [167]\n                    ],\n                    [\n                        [168, 169, 170, 171, 172, 173, -117, 174, 175, 176, 177, -4, 178, 179, 180, 181, 182, 183]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ivory Coast\"\n                },\n                \"id\": \"CIV\",\n                \"arcs\": [\n                    [184, 185, 186, 187, -73, 188]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Cameroon\"\n                },\n                \"id\": \"CMR\",\n                \"arcs\": [\n                    [189, 190, 191, 192, 193, 194, -128, 195]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Democratic Republic of the Congo\"\n                },\n                \"id\": \"COD\",\n                \"arcs\": [\n                    [196, 197, -60, 198, 199, -10, 200, -13, 201, -126, 202]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Republic of the Congo\"\n                },\n                \"id\": \"COG\",\n                \"arcs\": [\n                    [-12, 203, 204, -196, -127, -202]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Colombia\"\n                },\n                \"id\": \"COL\",\n                \"arcs\": [\n                    [205, 206, 207, 208, 209, -107, 210]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Costa Rica\"\n                },\n                \"id\": \"CRI\",\n                \"arcs\": [\n                    [211, 212, 213, 214]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Cuba\"\n                },\n                \"id\": \"CUB\",\n                \"arcs\": [\n                    [215]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Northern Cyprus\"\n                },\n                \"id\": \"-99\",\n                \"arcs\": [\n                    [216, 217]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Cyprus\"\n                },\n                \"id\": \"CYP\",\n                \"arcs\": [\n                    [218, -218]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Czech Republic\"\n                },\n                \"id\": \"CZE\",\n                \"arcs\": [\n                    [-53, 219, 220, 221]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Germany\"\n                },\n                \"id\": \"DEU\",\n                \"arcs\": [\n                    [222, 223, -220, -52, -164, 224, 225, -64, 226, 227, 228]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Djibouti\"\n                },\n                \"id\": \"DJI\",\n                \"arcs\": [\n                    [229, 230, 231, 232]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Denmark\"\n                },\n                \"id\": \"DNK\",\n                \"arcs\": [\n                    [\n                        [233]\n                    ],\n                    [\n                        [-229, 234]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Dominican Republic\"\n                },\n                \"id\": \"DOM\",\n                \"arcs\": [\n                    [235, 236]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Algeria\"\n                },\n                \"id\": \"DZA\",\n                \"arcs\": [\n                    [237, 238, 239, 240, 241, 242, 243, 244]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ecuador\"\n                },\n                \"id\": \"ECU\",\n                \"arcs\": [\n                    [245, -206, 246]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Egypt\"\n                },\n                \"id\": \"EGY\",\n                \"arcs\": [\n                    [247, 248, 249, 250, 251]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Eritrea\"\n                },\n                \"id\": \"ERI\",\n                \"arcs\": [\n                    [252, 253, 254, -233]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Spain\"\n                },\n                \"id\": \"ESP\",\n                \"arcs\": [\n                    [255, 256, 257, 258]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Estonia\"\n                },\n                \"id\": \"EST\",\n                \"arcs\": [\n                    [259, 260, 261]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ethiopia\"\n                },\n                \"id\": \"ETH\",\n                \"arcs\": [\n                    [-232, 262, 263, 264, 265, 266, 267, -253]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Finland\"\n                },\n                \"id\": \"FIN\",\n                \"arcs\": [\n                    [268, 269, 270, 271]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Fiji\"\n                },\n                \"id\": \"FJI\",\n                \"arcs\": [\n                    [\n                        [272]\n                    ],\n                    [\n                        [273, 274]\n                    ],\n                    [\n                        [275, -275]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Falkland Islands\"\n                },\n                \"id\": \"FLK\",\n                \"arcs\": [\n                    [276]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"France\"\n                },\n                \"id\": \"FRA\",\n                \"arcs\": [\n                    [\n                        [277]\n                    ],\n                    [\n                        [278, -225, -163, 279, 280, -257, 281, -66]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"French Guiana\"\n                },\n                \"id\": \"GUF\",\n                \"arcs\": [\n                    [282, 283, 284, 285, -111]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Gabon\"\n                },\n                \"id\": \"GAB\",\n                \"arcs\": [\n                    [286, 287, -190, -205]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"United Kingdom\"\n                },\n                \"id\": \"GBR\",\n                \"arcs\": [\n                    [\n                        [288, 289]\n                    ],\n                    [\n                        [290]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Georgia\"\n                },\n                \"id\": \"GEO\",\n                \"arcs\": [\n                    [291, 292, -58, -32, 293]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ghana\"\n                },\n                \"id\": \"GHA\",\n                \"arcs\": [\n                    [294, -189, -77, 295]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Guinea\"\n                },\n                \"id\": \"GIN\",\n                \"arcs\": [\n                    [296, 297, 298, 299, 300, 301, -187]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Gambia\"\n                },\n                \"id\": \"GMB\",\n                \"arcs\": [\n                    [302, 303]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Guinea Bissau\"\n                },\n                \"id\": \"GNB\",\n                \"arcs\": [\n                    [304, 305, -300]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Equatorial Guinea\"\n                },\n                \"id\": \"GNQ\",\n                \"arcs\": [\n                    [306, -191, -288]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Greece\"\n                },\n                \"id\": \"GRC\",\n                \"arcs\": [\n                    [\n                        [307]\n                    ],\n                    [\n                        [308, -15, 309, -84, 310]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Greenland\"\n                },\n                \"id\": \"GRL\",\n                \"arcs\": [\n                    [311]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Guatemala\"\n                },\n                \"id\": \"GTM\",\n                \"arcs\": [\n                    [312, 313, -100, 314, 315, 316]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Guyana\"\n                },\n                \"id\": \"GUY\",\n                \"arcs\": [\n                    [317, 318, -109, 319]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Honduras\"\n                },\n                \"id\": \"HND\",\n                \"arcs\": [\n                    [320, 321, -316, 322, 323]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Croatia\"\n                },\n                \"id\": \"HRV\",\n                \"arcs\": [\n                    [324, -92, 325, 326, 327, 328]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Haiti\"\n                },\n                \"id\": \"HTI\",\n                \"arcs\": [\n                    [-237, 329]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Hungary\"\n                },\n                \"id\": \"HUN\",\n                \"arcs\": [\n                    [-48, 330, 331, 332, 333, -329, 334]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Indonesia\"\n                },\n                \"id\": \"IDN\",\n                \"arcs\": [\n                    [\n                        [335]\n                    ],\n                    [\n                        [336, 337]\n                    ],\n                    [\n                        [338]\n                    ],\n                    [\n                        [339]\n                    ],\n                    [\n                        [340]\n                    ],\n                    [\n                        [341]\n                    ],\n                    [\n                        [342]\n                    ],\n                    [\n                        [343]\n                    ],\n                    [\n                        [344, 345]\n                    ],\n                    [\n                        [346]\n                    ],\n                    [\n                        [347]\n                    ],\n                    [\n                        [348, 349]\n                    ],\n                    [\n                        [350]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"India\"\n                },\n                \"id\": \"IND\",\n                \"arcs\": [\n                    [-177, 351, -175, -116, -174, 352, -80, 353, 354]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ireland\"\n                },\n                \"id\": \"IRL\",\n                \"arcs\": [\n                    [355, -289]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Iran\"\n                },\n                \"id\": \"IRN\",\n                \"arcs\": [\n                    [356, -6, 357, 358, 359, 360, -55, -34, -57, 361]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Iraq\"\n                },\n                \"id\": \"IRQ\",\n                \"arcs\": [\n                    [362, 363, 364, 365, 366, 367, -360]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Iceland\"\n                },\n                \"id\": \"ISL\",\n                \"arcs\": [\n                    [368]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Israel\"\n                },\n                \"id\": \"ISR\",\n                \"arcs\": [\n                    [369, 370, 371, -252, 372, 373, 374]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Italy\"\n                },\n                \"id\": \"ITA\",\n                \"arcs\": [\n                    [\n                        [375]\n                    ],\n                    [\n                        [376]\n                    ],\n                    [\n                        [377, 378, -280, -162, -50]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Jamaica\"\n                },\n                \"id\": \"JAM\",\n                \"arcs\": [\n                    [379]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Jordan\"\n                },\n                \"id\": \"JOR\",\n                \"arcs\": [\n                    [-370, 380, -366, 381, 382, -372, 383]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Japan\"\n                },\n                \"id\": \"JPN\",\n                \"arcs\": [\n                    [\n                        [384]\n                    ],\n                    [\n                        [385]\n                    ],\n                    [\n                        [386]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Kazakhstan\"\n                },\n                \"id\": \"KAZ\",\n                \"arcs\": [\n                    [387, 388, 389, 390, -181, 391]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Kenya\"\n                },\n                \"id\": \"KEN\",\n                \"arcs\": [\n                    [392, 393, 394, 395, -265, 396]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Kyrgyzstan\"\n                },\n                \"id\": \"KGZ\",\n                \"arcs\": [\n                    [-392, -180, 397, 398]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Cambodia\"\n                },\n                \"id\": \"KHM\",\n                \"arcs\": [\n                    [399, 400, 401, 402]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"South Korea\"\n                },\n                \"id\": \"KOR\",\n                \"arcs\": [\n                    [403, 404]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Kosovo\"\n                },\n                \"id\": \"-99\",\n                \"arcs\": [\n                    [-18, 405, 406, 407]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Kuwait\"\n                },\n                \"id\": \"KWT\",\n                \"arcs\": [\n                    [408, 409, -364]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Laos\"\n                },\n                \"id\": \"LAO\",\n                \"arcs\": [\n                    [410, 411, -172, 412, -401]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Lebanon\"\n                },\n                \"id\": \"LBN\",\n                \"arcs\": [\n                    [-374, 413, 414]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Liberia\"\n                },\n                \"id\": \"LBR\",\n                \"arcs\": [\n                    [415, 416, -297, -186]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Libya\"\n                },\n                \"id\": \"LBY\",\n                \"arcs\": [\n                    [417, -245, 418, 419, -250, 420, 421]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Sri Lanka\"\n                },\n                \"id\": \"LKA\",\n                \"arcs\": [\n                    [422]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Lesotho\"\n                },\n                \"id\": \"LSO\",\n                \"arcs\": [\n                    [423]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Lithuania\"\n                },\n                \"id\": \"LTU\",\n                \"arcs\": [\n                    [424, 425, 426, -93, 427]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Luxembourg\"\n                },\n                \"id\": \"LUX\",\n                \"arcs\": [\n                    [-226, -279, -65]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Latvia\"\n                },\n                \"id\": \"LVA\",\n                \"arcs\": [\n                    [428, -262, 429, -94, -427]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Morocco\"\n                },\n                \"id\": \"MAR\",\n                \"arcs\": [\n                    [-242, 430, 431]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Moldova\"\n                },\n                \"id\": \"MDA\",\n                \"arcs\": [\n                    [432, 433]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Madagascar\"\n                },\n                \"id\": \"MDG\",\n                \"arcs\": [\n                    [434]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Mexico\"\n                },\n                \"id\": \"MEX\",\n                \"arcs\": [\n                    [435, -98, -314, 436, 437]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Macedonia\"\n                },\n                \"id\": \"MKD\",\n                \"arcs\": [\n                    [-408, 438, -85, -310, -14]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Mali\"\n                },\n                \"id\": \"MLI\",\n                \"arcs\": [\n                    [439, -239, 440, -74, -188, -302, 441]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Myanmar\"\n                },\n                \"id\": \"MMR\",\n                \"arcs\": [\n                    [442, -78, -353, -173, -412, 443]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Montenegro\"\n                },\n                \"id\": \"MNE\",\n                \"arcs\": [\n                    [444, -326, -91, 445, -406, -17]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Mongolia\"\n                },\n                \"id\": \"MNG\",\n                \"arcs\": [\n                    [446, -183]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Mozambique\"\n                },\n                \"id\": \"MOZ\",\n                \"arcs\": [\n                    [447, 448, 449, 450, 451, 452, 453, 454]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Mauritania\"\n                },\n                \"id\": \"MRT\",\n                \"arcs\": [\n                    [455, 456, 457, -240, -440]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Malawi\"\n                },\n                \"id\": \"MWI\",\n                \"arcs\": [\n                    [-455, 458, 459]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Malaysia\"\n                },\n                \"id\": \"MYS\",\n                \"arcs\": [\n                    [\n                        [460, 461]\n                    ],\n                    [\n                        [-349, 462, -115, 463]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Namibia\"\n                },\n                \"id\": \"NAM\",\n                \"arcs\": [\n                    [464, -8, 465, -119, 466]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"New Caledonia\"\n                },\n                \"id\": \"NCL\",\n                \"arcs\": [\n                    [467]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Niger\"\n                },\n                \"id\": \"NER\",\n                \"arcs\": [\n                    [-75, -441, -238, -418, 468, -194, 469, -71]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Nigeria\"\n                },\n                \"id\": \"NGA\",\n                \"arcs\": [\n                    [470, -72, -470, -193]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Nicaragua\"\n                },\n                \"id\": \"NIC\",\n                \"arcs\": [\n                    [471, -324, 472, -213]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Netherlands\"\n                },\n                \"id\": \"NLD\",\n                \"arcs\": [\n                    [-227, -63, 473]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Norway\"\n                },\n                \"id\": \"NOR\",\n                \"arcs\": [\n                    [\n                        [474, -272, 475, 476]\n                    ],\n                    [\n                        [477]\n                    ],\n                    [\n                        [478]\n                    ],\n                    [\n                        [479]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Nepal\"\n                },\n                \"id\": \"NPL\",\n                \"arcs\": [\n                    [-352, -176]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"New Zealand\"\n                },\n                \"id\": \"NZL\",\n                \"arcs\": [\n                    [\n                        [480]\n                    ],\n                    [\n                        [481]\n                    ]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Oman\"\n                },\n                \"id\": \"OMN\",\n                \"arcs\": [\n                    [\n                        [482, 483, -22, 484]\n                    ],\n                    [\n                        [-20, 485]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Pakistan\"\n                },\n                \"id\": \"PAK\",\n                \"arcs\": [\n                    [-178, -355, 486, -358, -5]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Panama\"\n                },\n                \"id\": \"PAN\",\n                \"arcs\": [\n                    [487, -215, 488, -208]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Peru\"\n                },\n                \"id\": \"PER\",\n                \"arcs\": [\n                    [-167, 489, -247, -211, -106, -102]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Philippines\"\n                },\n                \"id\": \"PHL\",\n                \"arcs\": [\n                    [\n                        [490]\n                    ],\n                    [\n                        [491]\n                    ],\n                    [\n                        [492]\n                    ],\n                    [\n                        [493]\n                    ],\n                    [\n                        [494]\n                    ],\n                    [\n                        [495]\n                    ],\n                    [\n                        [496]\n                    ]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Papua New Guinea\"\n                },\n                \"id\": \"PNG\",\n                \"arcs\": [\n                    [\n                        [497]\n                    ],\n                    [\n                        [498]\n                    ],\n                    [\n                        [-345, 499]\n                    ],\n                    [\n                        [500]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Poland\"\n                },\n                \"id\": \"POL\",\n                \"arcs\": [\n                    [-224, 501, 502, -428, -97, 503, 504, -221]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Puerto Rico\"\n                },\n                \"id\": \"PRI\",\n                \"arcs\": [\n                    [505]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"North Korea\"\n                },\n                \"id\": \"PRK\",\n                \"arcs\": [\n                    [506, 507, -405, 508, -169]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Portugal\"\n                },\n                \"id\": \"PRT\",\n                \"arcs\": [\n                    [-259, 509]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Paraguay\"\n                },\n                \"id\": \"PRY\",\n                \"arcs\": [\n                    [-104, -105, -26]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Qatar\"\n                },\n                \"id\": \"QAT\",\n                \"arcs\": [\n                    [510, 511]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Romania\"\n                },\n                \"id\": \"ROU\",\n                \"arcs\": [\n                    [512, -434, 513, 514, -81, 515, -333]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Russia\"\n                },\n                \"id\": \"RUS\",\n                \"arcs\": [\n                    [\n                        [516]\n                    ],\n                    [\n                        [-503, 517, -425]\n                    ],\n                    [\n                        [518, 519]\n                    ],\n                    [\n                        [520]\n                    ],\n                    [\n                        [521]\n                    ],\n                    [\n                        [522]\n                    ],\n                    [\n                        [523]\n                    ],\n                    [\n                        [524]\n                    ],\n                    [\n                        [525]\n                    ],\n                    [\n                        [526, -507, -184, -447, -182, -391, 527, -59, -293, 528, 529, -95, -430, -261, 530, -269, -475, 531, -520]\n                    ],\n                    [\n                        [532]\n                    ],\n                    [\n                        [533]\n                    ],\n                    [\n                        [534]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Rwanda\"\n                },\n                \"id\": \"RWA\",\n                \"arcs\": [\n                    [535, -61, -198, 536]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Western Sahara\"\n                },\n                \"id\": \"ESH\",\n                \"arcs\": [\n                    [-241, -458, 537, -431]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Saudi Arabia\"\n                },\n                \"id\": \"SAU\",\n                \"arcs\": [\n                    [538, -382, -365, -410, 539, -512, 540, -23, -484, 541]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Sudan\"\n                },\n                \"id\": \"SDN\",\n                \"arcs\": [\n                    [542, 543, -123, 544, -421, -249, 545, -254, -268, 546]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"South Sudan\"\n                },\n                \"id\": \"SSD\",\n                \"arcs\": [\n                    [547, -266, -396, 548, -203, -125, 549, -543]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Senegal\"\n                },\n                \"id\": \"SEN\",\n                \"arcs\": [\n                    [550, -456, -442, -301, -306, 551, -304]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Solomon Islands\"\n                },\n                \"id\": \"SLB\",\n                \"arcs\": [\n                    [\n                        [552]\n                    ],\n                    [\n                        [553]\n                    ],\n                    [\n                        [554]\n                    ],\n                    [\n                        [555]\n                    ],\n                    [\n                        [556]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Sierra Leone\"\n                },\n                \"id\": \"SLE\",\n                \"arcs\": [\n                    [557, -298, -417]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"El Salvador\"\n                },\n                \"id\": \"SLV\",\n                \"arcs\": [\n                    [558, -317, -322]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Somaliland\"\n                },\n                \"id\": \"-99\",\n                \"arcs\": [\n                    [-263, -231, 559, 560]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Somalia\"\n                },\n                \"id\": \"SOM\",\n                \"arcs\": [\n                    [-397, -264, -561, 561]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Republic of Serbia\"\n                },\n                \"id\": \"SRB\",\n                \"arcs\": [\n                    [-86, -439, -407, -446, -90, -325, -334, -516]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Suriname\"\n                },\n                \"id\": \"SUR\",\n                \"arcs\": [\n                    [562, -285, 563, -283, -110, -319]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Slovakia\"\n                },\n                \"id\": \"SVK\",\n                \"arcs\": [\n                    [-505, 564, -331, -54, -222]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Slovenia\"\n                },\n                \"id\": \"SVN\",\n                \"arcs\": [\n                    [-49, -335, -328, 565, -378]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Sweden\"\n                },\n                \"id\": \"SWE\",\n                \"arcs\": [\n                    [-476, -271, 566]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Swaziland\"\n                },\n                \"id\": \"SWZ\",\n                \"arcs\": [\n                    [567, -451]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Syria\"\n                },\n                \"id\": \"SYR\",\n                \"arcs\": [\n                    [-381, -375, -415, 568, 569, -367]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Chad\"\n                },\n                \"id\": \"TCD\",\n                \"arcs\": [\n                    [-469, -422, -545, -122, -195]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Togo\"\n                },\n                \"id\": \"TGO\",\n                \"arcs\": [\n                    [570, -296, -76, -69]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Thailand\"\n                },\n                \"id\": \"THA\",\n                \"arcs\": [\n                    [571, -462, 572, -444, -411, -400]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Tajikistan\"\n                },\n                \"id\": \"TJK\",\n                \"arcs\": [\n                    [-398, -179, -3, 573]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Turkmenistan\"\n                },\n                \"id\": \"TKM\",\n                \"arcs\": [\n                    [-357, 574, -389, 575, -1]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"East Timor\"\n                },\n                \"id\": \"TLS\",\n                \"arcs\": [\n                    [576, -337]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Trinidad and Tobago\"\n                },\n                \"id\": \"TTO\",\n                \"arcs\": [\n                    [577]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Tunisia\"\n                },\n                \"id\": \"TUN\",\n                \"arcs\": [\n                    [-244, 578, -419]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Turkey\"\n                },\n                \"id\": \"TUR\",\n                \"arcs\": [\n                    [\n                        [-294, -36, -361, -368, -570, 579]\n                    ],\n                    [\n                        [-311, -83, 580]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Taiwan\"\n                },\n                \"id\": \"TWN\",\n                \"arcs\": [\n                    [581]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"United Republic of Tanzania\"\n                },\n                \"id\": \"TZA\",\n                \"arcs\": [\n                    [-394, 582, -448, -460, 583, -199, -62, -536, 584]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Uganda\"\n                },\n                \"id\": \"UGA\",\n                \"arcs\": [\n                    [-537, -197, -549, -395, -585]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Ukraine\"\n                },\n                \"id\": \"UKR\",\n                \"arcs\": [\n                    [-530, 585, -514, -433, -513, -332, -565, -504, -96]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Uruguay\"\n                },\n                \"id\": \"URY\",\n                \"arcs\": [\n                    [-113, 586, -28]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"United States of America\"\n                },\n                \"id\": \"USA\",\n                \"arcs\": [\n                    [\n                        [587]\n                    ],\n                    [\n                        [588]\n                    ],\n                    [\n                        [589]\n                    ],\n                    [\n                        [590]\n                    ],\n                    [\n                        [591]\n                    ],\n                    [\n                        [592, -438, 593, -139]\n                    ],\n                    [\n                        [594]\n                    ],\n                    [\n                        [595]\n                    ],\n                    [\n                        [596]\n                    ],\n                    [\n                        [-141, 597]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Uzbekistan\"\n                },\n                \"id\": \"UZB\",\n                \"arcs\": [\n                    [-576, -388, -399, -574, -2]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Venezuela\"\n                },\n                \"id\": \"VEN\",\n                \"arcs\": [\n                    [598, -320, -108, -210]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Vietnam\"\n                },\n                \"id\": \"VNM\",\n                \"arcs\": [\n                    [599, -402, -413, -171]\n                ]\n            }, {\n                \"type\": \"MultiPolygon\",\n                \"properties\": {\n                    \"name\": \"Vanuatu\"\n                },\n                \"id\": \"VUT\",\n                \"arcs\": [\n                    [\n                        [600]\n                    ],\n                    [\n                        [601]\n                    ]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"West Bank\"\n                },\n                \"id\": \"PSE\",\n                \"arcs\": [\n                    [-384, -371]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Yemen\"\n                },\n                \"id\": \"YEM\",\n                \"arcs\": [\n                    [602, -542, -483]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"South Africa\"\n                },\n                \"id\": \"ZAF\",\n                \"arcs\": [\n                    [-467, -118, 603, -452, -568, -450, 604],\n                    [-424]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Zambia\"\n                },\n                \"id\": \"ZMB\",\n                \"arcs\": [\n                    [-459, -454, 605, -120, -466, -7, -200, -584]\n                ]\n            }, {\n                \"type\": \"Polygon\",\n                \"properties\": {\n                    \"name\": \"Zimbabwe\"\n                },\n                \"id\": \"ZWE\",\n                \"arcs\": [\n                    [-604, -121, -606, -453]\n                ]\n            }]\n        }\n    },\n    \"arcs\": [\n        [\n            [6700, 7164],\n            [28, -23],\n            [21, 8],\n            [6, 27],\n            [22, 9],\n            [15, 18],\n            [6, 47],\n            [23, 11],\n            [5, 21],\n            [13, -15],\n            [8, -2]\n        ],\n        [\n            [6847, 7265],\n            [16, -1],\n            [20, -12]\n        ],\n        [\n            [6883, 7252],\n            [9, -7],\n            [20, 19],\n            [9, -12],\n            [9, 27],\n            [17, -1],\n            [4, 9],\n            [3, 24],\n            [12, 20],\n            [15, -13],\n            [-3, -18],\n            [9, -3],\n            [-3, -50],\n            [11, -19],\n            [10, 12],\n            [12, 6],\n            [17, 27],\n            [19, -5],\n            [29, 0]\n        ],\n        [\n            [7082, 7268],\n            [5, -17]\n        ],\n        [\n            [7087, 7251],\n            [-16, -6],\n            [-14, -11],\n            [-32, -7],\n            [-30, -13],\n            [-16, -25],\n            [6, -25],\n            [4, -30],\n            [-14, -25],\n            [1, -22],\n            [-8, -22],\n            [-26, 2],\n            [11, -39],\n            [-18, -15],\n            [-12, -35],\n            [2, -36],\n            [-11, -16],\n            [-10, 5],\n            [-22, -8],\n            [-3, -16],\n            [-20, 0],\n            [-16, -34],\n            [-1, -50],\n            [-36, -24],\n            [-19, 5],\n            [-6, -13],\n            [-16, 7],\n            [-28, -8],\n            [-47, 30]\n        ],\n        [\n            [6690, 6820],\n            [25, 53],\n            [-2, 38],\n            [-21, 10],\n            [-2, 38],\n            [-9, 47],\n            [12, 32],\n            [-12, 9],\n            [7, 43],\n            [12, 74]\n        ],\n        [\n            [5664, 4412],\n            [3, -18],\n            [-4, -29],\n            [5, -28],\n            [-4, -22],\n            [3, -20],\n            [-58, 1],\n            [-2, -188],\n            [19, -49],\n            [18, -37]\n        ],\n        [\n            [5644, 4022],\n            [-51, -24],\n            [-67, 9],\n            [-19, 28],\n            [-113, -3],\n            [-4, -4],\n            [-17, 27],\n            [-18, 2],\n            [-16, -10],\n            [-14, -12]\n        ],\n        [\n            [5325, 4035],\n            [-2, 38],\n            [4, 51],\n            [9, 55],\n            [2, 25],\n            [9, 53],\n            [6, 24],\n            [16, 39],\n            [9, 26],\n            [3, 44],\n            [-1, 34],\n            [-9, 21],\n            [-7, 36],\n            [-7, 35],\n            [2, 12],\n            [8, 24],\n            [-8, 57],\n            [-6, 39],\n            [-14, 38],\n            [3, 11]\n        ],\n        [\n            [5342, 4697],\n            [11, 8],\n            [8, -1],\n            [10, 7],\n            [82, -1],\n            [7, -44],\n            [8, -35],\n            [6, -19],\n            [11, -31],\n            [18, 5],\n            [9, 8],\n            [16, -8],\n            [4, 14],\n            [7, 35],\n            [17, 2],\n            [2, 10],\n            [14, 1],\n            [-3, -22],\n            [34, 1],\n            [1, -37],\n            [5, -23],\n            [-4, -36],\n            [2, -36],\n            [9, -22],\n            [-1, -70],\n            [7, 5],\n            [12, -1],\n            [17, 8],\n            [13, -3]\n        ],\n        [\n            [5338, 4715],\n            [-8, 45]\n        ],\n        [\n            [5330, 4760],\n            [12, 25],\n            [8, 10],\n            [10, -20]\n        ],\n        [\n            [5360, 4775],\n            [-10, -12],\n            [-4, -16],\n            [-1, -25],\n            [-7, -7]\n        ],\n        [\n            [5571, 7530],\n            [-3, -20],\n            [4, -25],\n            [11, -15]\n        ],\n        [\n            [5583, 7470],\n            [0, -15],\n            [-9, -9],\n            [-2, -19],\n            [-13, -29]\n        ],\n        [\n            [5559, 7398],\n            [-5, 5],\n            [0, 13],\n            [-15, 19],\n            [-3, 29],\n            [2, 40],\n            [4, 18],\n            [-4, 10]\n        ],\n        [\n            [5538, 7532],\n            [-2, 18],\n            [12, 29],\n            [1, -11],\n            [8, 6]\n        ],\n        [\n            [5557, 7574],\n            [6, -16],\n            [7, -6],\n            [1, -22]\n        ],\n        [\n            [6432, 6490],\n            [5, 3],\n            [1, -16],\n            [22, 9],\n            [23, -2],\n            [17, -1],\n            [19, 39],\n            [20, 38],\n            [18, 37]\n        ],\n        [\n            [6557, 6597],\n            [5, -20]\n        ],\n        [\n            [6562, 6577],\n            [4, -47]\n        ],\n        [\n            [6566, 6530],\n            [-14, 0],\n            [-3, -39],\n            [5, -8],\n            [-12, -12],\n            [0, -24],\n            [-8, -24],\n            [-1, -24]\n        ],\n        [\n            [6533, 6399],\n            [-6, -12],\n            [-83, 29],\n            [-11, 60],\n            [-1, 14]\n        ],\n        [\n            [3140, 1814],\n            [-17, 2],\n            [-30, 0],\n            [0, 132]\n        ],\n        [\n            [3093, 1948],\n            [11, -27],\n            [14, -45],\n            [36, -35],\n            [39, -15],\n            [-13, -30],\n            [-26, -2],\n            [-14, 20]\n        ],\n        [\n            [3258, 3743],\n            [51, -96],\n            [23, -9],\n            [34, -44],\n            [29, -23],\n            [4, -26],\n            [-28, -90],\n            [28, -16],\n            [32, -9],\n            [22, 10],\n            [25, 45],\n            [4, 52]\n        ],\n        [\n            [3482, 3537],\n            [14, 11],\n            [14, -34],\n            [-1, -47],\n            [-23, -33],\n            [-19, -24],\n            [-31, -57],\n            [-37, -81]\n        ],\n        [\n            [3399, 3272],\n            [-7, -47],\n            [-7, -61],\n            [0, -58],\n            [-6, -14],\n            [-2, -38]\n        ],\n        [\n            [3377, 3054],\n            [-2, -31],\n            [35, -50],\n            [-4, -41],\n            [18, -26],\n            [-2, -29],\n            [-26, -75],\n            [-42, -32],\n            [-55, -12],\n            [-31, 6],\n            [6, -36],\n            [-6, -44],\n            [5, -30],\n            [-16, -20],\n            [-29, -8],\n            [-26, 21],\n            [-11, -15],\n            [4, -59],\n            [18, -18],\n            [16, 19],\n            [8, -31],\n            [-26, -18],\n            [-22, -37],\n            [-4, -59],\n            [-7, -32],\n            [-26, 0],\n            [-22, -31],\n            [-8, -44],\n            [28, -43],\n            [26, -12],\n            [-9, -53],\n            [-33, -33],\n            [-18, -70],\n            [-25, -23],\n            [-12, -28],\n            [9, -61],\n            [19, -34],\n            [-12, 3]\n        ],\n        [\n            [3095, 1968],\n            [-26, 9],\n            [-67, 8],\n            [-11, 34],\n            [0, 45],\n            [-18, -4],\n            [-10, 21],\n            [-3, 63],\n            [22, 26],\n            [9, 37],\n            [-4, 30],\n            [15, 51],\n            [10, 78],\n            [-3, 35],\n            [12, 11],\n            [-3, 22],\n            [-13, 12],\n            [10, 25],\n            [-13, 22],\n            [-6, 68],\n            [11, 12],\n            [-5, 72],\n            [7, 61],\n            [7, 52],\n            [17, 22],\n            [-9, 58],\n            [0, 54],\n            [21, 38],\n            [-1, 50],\n            [16, 57],\n            [0, 55],\n            [-7, 11],\n            [-13, 102],\n            [17, 60],\n            [-2, 58],\n            [10, 53],\n            [18, 56],\n            [20, 36],\n            [-9, 24],\n            [6, 19],\n            [-1, 98],\n            [30, 29],\n            [10, 62],\n            [-3, 14]\n        ],\n        [\n            [3136, 3714],\n            [23, 54],\n            [36, -15],\n            [16, -42],\n            [11, 47],\n            [32, -2],\n            [4, -13]\n        ],\n        [\n            [6210, 7485],\n            [39, 9]\n        ],\n        [\n            [6249, 7494],\n            [5, -15],\n            [11, -10],\n            [-6, -15],\n            [15, -21],\n            [-8, -18],\n            [12, -16],\n            [13, -10],\n            [0, -41]\n        ],\n        [\n            [6291, 7348],\n            [-10, -2]\n        ],\n        [\n            [6281, 7346],\n            [-11, 34],\n            [0, 10],\n            [-12, -1],\n            [-9, 16],\n            [-5, -1]\n        ],\n        [\n            [6244, 7404],\n            [-11, 17],\n            [-21, 15],\n            [3, 28],\n            [-5, 21]\n        ],\n        [\n            [3345, 329],\n            [-8, -30],\n            [-8, -27],\n            [-59, 8],\n            [-62, -3],\n            [-34, 20],\n            [0, 2],\n            [-16, 17],\n            [63, -2],\n            [60, -6],\n            [20, 24],\n            [15, 21],\n            [29, -24]\n        ],\n        [\n            [577, 361],\n            [-53, -8],\n            [-36, 21],\n            [-17, 21],\n            [-1, 3],\n            [-18, 16],\n            [17, 22],\n            [52, -9],\n            [28, -18],\n            [21, -21],\n            [7, -27]\n        ],\n        [\n            [3745, 447],\n            [35, -26],\n            [12, -36],\n            [3, -25],\n            [1, -30],\n            [-43, -19],\n            [-45, -15],\n            [-52, -14],\n            [-59, -11],\n            [-65, 3],\n            [-37, 20],\n            [5, 24],\n            [59, 16],\n            [24, 20],\n            [18, 26],\n            [12, 22],\n            [17, 20],\n            [18, 25],\n            [14, 0],\n            [41, 12],\n            [42, -12]\n        ],\n        [\n            [1633, 715],\n            [36, -9],\n            [33, 10],\n            [-16, -20],\n            [-26, -15],\n            [-39, 4],\n            [-27, 21],\n            [6, 20],\n            [33, -11]\n        ],\n        [\n            [1512, 716],\n            [43, -23],\n            [-17, 3],\n            [-36, 5],\n            [-38, 17],\n            [20, 12],\n            [28, -14]\n        ],\n        [\n            [2250, 808],\n            [31, -8],\n            [30, 7],\n            [17, -34],\n            [-22, 5],\n            [-34, -2],\n            [-34, 2],\n            [-38, -4],\n            [-28, 12],\n            [-15, 24],\n            [18, 11],\n            [35, -8],\n            [40, -5]\n        ],\n        [\n            [3098, 866],\n            [4, -27],\n            [-5, -23],\n            [-8, -22],\n            [-33, -8],\n            [-31, -12],\n            [-36, 1],\n            [14, 24],\n            [-33, -9],\n            [-31, -8],\n            [-21, 18],\n            [-2, 24],\n            [30, 23],\n            [20, 7],\n            [32, -2],\n            [8, 30],\n            [1, 22],\n            [0, 47],\n            [16, 28],\n            [25, 9],\n            [15, -22],\n            [6, -22],\n            [12, -26],\n            [10, -26],\n            [7, -26]\n        ],\n        [\n            [3371, 1268],\n            [-11, -13],\n            [-21, 9],\n            [-23, -6],\n            [-19, -14],\n            [-20, -15],\n            [-14, -17],\n            [-4, -23],\n            [2, -22],\n            [13, -20],\n            [-19, -14],\n            [-26, -4],\n            [-15, -20],\n            [-17, -19],\n            [-17, -25],\n            [-4, -22],\n            [9, -24],\n            [15, -19],\n            [23, -14],\n            [21, -18],\n            [12, -23],\n            [6, -22],\n            [8, -24],\n            [13, -19],\n            [8, -22],\n            [4, -55],\n            [8, -22],\n            [2, -23],\n            [9, -23],\n            [-4, -31],\n            [-15, -24],\n            [-17, -20],\n            [-37, -8],\n            [-12, -21],\n            [-17, -20],\n            [-42, -22],\n            [-37, -9],\n            [-35, -13],\n            [-37, -13],\n            [-22, -24],\n            [-45, -2],\n            [-49, 2],\n            [-44, -4],\n            [-47, 0],\n            [9, -24],\n            [42, -10],\n            [31, -16],\n            [18, -21],\n            [-31, -19],\n            [-48, 6],\n            [-40, -15],\n            [-2, -24],\n            [-1, -23],\n            [33, -20],\n            [6, -22],\n            [35, -22],\n            [59, -9],\n            [50, -16],\n            [40, -19],\n            [50, -18],\n            [70, -10],\n            [68, -16],\n            [47, -17],\n            [52, -20],\n            [27, -28],\n            [13, -22],\n            [34, 21],\n            [46, 17],\n            [48, 19],\n            [58, 15],\n            [49, 16],\n            [69, 1],\n            [68, -8],\n            [56, -14],\n            [18, 26],\n            [39, 17],\n            [70, 1],\n            [55, 13],\n            [52, 13],\n            [58, 8],\n            [62, 10],\n            [43, 15],\n            [-20, 21],\n            [-12, 21],\n            [0, 22],\n            [-54, -2],\n            [-57, -10],\n            [-54, 0],\n            [-8, 22],\n            [4, 44],\n            [12, 13],\n            [40, 14],\n            [47, 14],\n            [34, 17],\n            [33, 18],\n            [25, 23],\n            [38, 10],\n            [38, 8],\n            [19, 5],\n            [43, 2],\n            [41, 8],\n            [34, 12],\n            [34, 14],\n            [30, 14],\n            [39, 18],\n            [24, 20],\n            [26, 17],\n            [9, 24],\n            [-30, 13],\n            [10, 25],\n            [18, 18],\n            [29, 12],\n            [31, 14],\n            [28, 18],\n            [22, 23],\n            [13, 28],\n            [21, 16],\n            [33, -3],\n            [13, -20],\n            [34, -2],\n            [1, 22],\n            [14, 23],\n            [30, -6],\n            [7, -22],\n            [33, -3],\n            [36, 10],\n            [35, 7],\n            [31, -3],\n            [12, -25],\n            [31, 20],\n            [28, 10],\n            [31, 9],\n            [31, 8],\n            [29, 14],\n            [31, 9],\n            [24, 13],\n            [17, 20],\n            [20, -15],\n            [29, 8],\n            [20, -27],\n            [16, -21],\n            [32, 11],\n            [12, 24],\n            [28, 16],\n            [37, -4],\n            [11, -22],\n            [22, 22],\n            [30, 7],\n            [33, 3],\n            [29, -2],\n            [31, -7],\n            [30, -3],\n            [13, -20],\n            [18, -17],\n            [31, 10],\n            [32, 3],\n            [32, 0],\n            [31, 1],\n            [28, 8],\n            [29, 7],\n            [25, 16],\n            [26, 11],\n            [28, 5],\n            [21, 17],\n            [15, 32],\n            [16, 20],\n            [29, -10],\n            [11, -21],\n            [24, -13],\n            [29, 4],\n            [19, -21],\n            [21, -15],\n            [28, 14],\n            [10, 26],\n            [25, 10],\n            [29, 20],\n            [27, 8],\n            [33, 11],\n            [22, 13],\n            [22, 14],\n            [22, 13],\n            [26, -7],\n            [25, 21],\n            [18, 16],\n            [26, -1],\n            [23, 14],\n            [6, 21],\n            [23, 16],\n            [23, 11],\n            [28, 10],\n            [25, 4],\n            [25, -3],\n            [26, -6],\n            [22, -16],\n            [3, -26],\n            [24, -19],\n            [17, -17],\n            [33, -7],\n            [19, -16],\n            [23, -16],\n            [26, -3],\n            [23, 11],\n            [24, 24],\n            [26, -12],\n            [27, -7],\n            [26, -7],\n            [27, -5],\n            [28, 0],\n            [23, -61],\n            [-1, -15],\n            [-4, -27],\n            [-26, -15],\n            [-22, -22],\n            [4, -23],\n            [31, 1],\n            [-4, -23],\n            [-14, -22],\n            [-13, -24],\n            [21, -19],\n            [32, -6],\n            [32, 11],\n            [15, 23],\n            [10, 22],\n            [15, 18],\n            [17, 18],\n            [7, 21],\n            [15, 29],\n            [18, 5],\n            [31, 3],\n            [28, 7],\n            [28, 9],\n            [14, 23],\n            [8, 22],\n            [19, 22],\n            [27, 15],\n            [23, 12],\n            [16, 19],\n            [15, 11],\n            [21, 9],\n            [27, -6],\n            [25, 6],\n            [28, 7],\n            [30, -4],\n            [20, 17],\n            [14, 39],\n            [11, -16],\n            [13, -28],\n            [23, -12],\n            [27, -4],\n            [26, 7],\n            [29, -5],\n            [26, -1],\n            [17, 6],\n            [24, -4],\n            [21, -12],\n            [25, 8],\n            [30, 0],\n            [25, 8],\n            [29, -8],\n            [19, 19],\n            [14, 20],\n            [19, 16],\n            [35, 44],\n            [18, -8],\n            [21, -16],\n            [18, -21],\n            [36, -36],\n            [27, -1],\n            [25, 0],\n            [30, 7],\n            [30, 8],\n            [23, 16],\n            [19, 18],\n            [31, 2],\n            [21, 13],\n            [22, -12],\n            [14, -18],\n            [19, -19],\n            [31, 2],\n            [19, -15],\n            [33, -15],\n            [35, -5],\n            [29, 4],\n            [21, 19],\n            [19, 18],\n            [25, 5],\n            [25, -8],\n            [29, -6],\n            [26, 9],\n            [25, 0],\n            [24, -6],\n            [26, -5],\n            [25, 10],\n            [30, 9],\n            [28, 3],\n            [32, 0],\n            [25, 5],\n            [25, 5],\n            [8, 29],\n            [1, 24],\n            [17, -16],\n            [5, -27],\n            [10, -24],\n            [11, -20],\n            [23, -10],\n            [32, 4],\n            [36, 1],\n            [25, 3],\n            [37, 0],\n            [26, 1],\n            [36, -2],\n            [31, -5],\n            [20, -18],\n            [-5, -22],\n            [18, -18],\n            [30, -13],\n            [31, -15],\n            [35, -11],\n            [38, -9],\n            [28, -9],\n            [32, -2],\n            [18, 20],\n            [24, -16],\n            [21, -19],\n            [25, -13],\n            [34, -6],\n            [32, -7],\n            [13, -23],\n            [32, -14],\n            [21, -21],\n            [31, -9],\n            [32, 1],\n            [30, -4],\n            [33, 1],\n            [34, -4],\n            [31, -8],\n            [28, -14],\n            [29, -12],\n            [20, -17],\n            [-3, -23],\n            [-15, -21],\n            [-13, -27],\n            [-9, -21],\n            [-14, -24],\n            [-36, -9],\n            [-16, -21],\n            [-36, -13],\n            [-13, -23],\n            [-19, -22],\n            [-20, -18],\n            [-11, -25],\n            [-7, -22],\n            [-3, -26],\n            [0, -22],\n            [16, -23],\n            [6, -22],\n            [13, -21],\n            [52, -8],\n            [11, -26],\n            [-50, -9],\n            [-43, -13],\n            [-52, -2],\n            [-24, -34],\n            [-5, -27],\n            [-12, -22],\n            [-14, -22],\n            [37, -20],\n            [14, -24],\n            [24, -22],\n            [33, -20],\n            [39, -19],\n            [42, -18],\n            [64, -19],\n            [14, -29],\n            [80, -12],\n            [5, -5],\n            [21, -17],\n            [77, 15],\n            [63, -19],\n            [48, -14],\n            [-9997, -1],\n            [24, 35],\n            [50, -19],\n            [3, 2],\n            [30, 19],\n            [4, 0],\n            [3, -1],\n            [40, -25],\n            [35, 25],\n            [7, 3],\n            [81, 11],\n            [27, -14],\n            [13, -7],\n            [41, -20],\n            [79, -15],\n            [63, -18],\n            [107, -14],\n            [80, 16],\n            [118, -11],\n            [67, -19],\n            [73, 17],\n            [78, 17],\n            [6, 27],\n            [-110, 3],\n            [-89, 14],\n            [-24, 23],\n            [-74, 12],\n            [5, 27],\n            [10, 24],\n            [10, 22],\n            [-5, 25],\n            [-46, 16],\n            [-22, 21],\n            [-43, 18],\n            [68, -3],\n            [64, 9],\n            [40, -20],\n            [50, 18],\n            [45, 22],\n            [23, 19],\n            [-10, 25],\n            [-36, 16],\n            [-41, 17],\n            [-57, 4],\n            [-50, 8],\n            [-54, 6],\n            [-18, 22],\n            [-36, 18],\n            [-21, 21],\n            [-9, 67],\n            [14, -6],\n            [25, -18],\n            [45, 6],\n            [44, 8],\n            [23, -26],\n            [44, 6],\n            [37, 13],\n            [35, 16],\n            [32, 20],\n            [41, 5],\n            [-1, 22],\n            [-9, 22],\n            [8, 21],\n            [36, 11],\n            [16, -20],\n            [42, 12],\n            [32, 15],\n            [40, 1],\n            [38, 6],\n            [37, 13],\n            [30, 13],\n            [34, 13],\n            [22, -4],\n            [19, -4],\n            [41, 8],\n            [37, -10],\n            [38, 1],\n            [37, 8],\n            [37, -6],\n            [41, -6],\n            [39, 3],\n            [40, -2],\n            [42, -1],\n            [38, 3],\n            [28, 17],\n            [34, 9],\n            [35, -13],\n            [33, 11],\n            [30, 21],\n            [18, -19],\n            [9, -21],\n            [18, -19],\n            [29, 17],\n            [33, -22],\n            [38, -7],\n            [32, -16],\n            [39, 3],\n            [36, 11],\n            [41, -3],\n            [38, -8],\n            [38, -10],\n            [15, 25],\n            [-18, 20],\n            [-14, 21],\n            [-36, 5],\n            [-15, 22],\n            [-6, 22],\n            [-10, 43],\n            [21, -8],\n            [36, -3],\n            [36, 3],\n            [33, -9],\n            [28, -17],\n            [12, -21],\n            [38, -4],\n            [36, 9],\n            [38, 11],\n            [34, 7],\n            [28, -14],\n            [37, 5],\n            [24, 45],\n            [23, -27],\n            [32, -10],\n            [34, 6],\n            [23, -23],\n            [37, -3],\n            [33, -7],\n            [34, -12],\n            [21, 22],\n            [11, 20],\n            [28, -23],\n            [38, 6],\n            [28, -13],\n            [19, -19],\n            [37, 5],\n            [29, 13],\n            [29, 15],\n            [33, 8],\n            [39, 7],\n            [36, 8],\n            [27, 13],\n            [16, 19],\n            [7, 25],\n            [-3, 24],\n            [-9, 24],\n            [-10, 23],\n            [-9, 23],\n            [-7, 21],\n            [-1, 23],\n            [2, 23],\n            [13, 22],\n            [11, 24],\n            [5, 23],\n            [-6, 26],\n            [-3, 23],\n            [14, 27],\n            [15, 17],\n            [18, 22],\n            [19, 19],\n            [22, 17],\n            [11, 25],\n            [15, 17],\n            [18, 15],\n            [26, 3],\n            [18, 19],\n            [19, 11],\n            [23, 7],\n            [20, 15],\n            [16, 19],\n            [22, 7],\n            [16, -15],\n            [-10, -20],\n            [-29, -17]\n        ],\n        [\n            [6914, 2185],\n            [18, -19],\n            [26, -7],\n            [1, -11],\n            [-7, -27],\n            [-43, -4],\n            [-1, 31],\n            [4, 25],\n            [2, 12]\n        ],\n        [\n            [9038, 2648],\n            [27, -21],\n            [15, 8],\n            [22, 12],\n            [16, -4],\n            [2, -70],\n            [-9, -21],\n            [-3, -47],\n            [-10, 16],\n            [-19, -41],\n            [-6, 3],\n            [-17, 2],\n            [-17, 50],\n            [-4, 39],\n            [-16, 52],\n            [1, 27],\n            [18, -5]\n        ],\n        [\n            [8987, 4244],\n            [10, -46],\n            [18, 22],\n            [9, -25],\n            [13, -23],\n            [-3, -26],\n            [6, -51],\n            [5, -29],\n            [7, -7],\n            [7, -51],\n            [-3, -30],\n            [9, -40],\n            [31, -31],\n            [19, -28],\n            [19, -26],\n            [-4, -14],\n            [16, -37],\n            [11, -64],\n            [11, 13],\n            [11, -26],\n            [7, 9],\n            [5, -63],\n            [19, -36],\n            [13, -22],\n            [22, -48],\n            [8, -48],\n            [1, -33],\n            [-2, -37],\n            [13, -50],\n            [-2, -52],\n            [-5, -28],\n            [-7, -52],\n            [1, -34],\n            [-6, -43],\n            [-12, -53],\n            [-21, -29],\n            [-10, -46],\n            [-9, -29],\n            [-8, -51],\n            [-11, -30],\n            [-7, -44],\n            [-4, -41],\n            [2, -18],\n            [-16, -21],\n            [-31, -2],\n            [-26, -24],\n            [-13, -23],\n            [-17, -26],\n            [-23, 27],\n            [-17, 10],\n            [5, 31],\n            [-15, -11],\n            [-25, -43],\n            [-24, 16],\n            [-15, 9],\n            [-16, 4],\n            [-27, 17],\n            [-18, 37],\n            [-5, 45],\n            [-7, 30],\n            [-13, 24],\n            [-27, 7],\n            [9, 28],\n            [-7, 44],\n            [-13, -41],\n            [-25, -11],\n            [14, 33],\n            [5, 34],\n            [10, 29],\n            [-2, 44],\n            [-22, -50],\n            [-18, -21],\n            [-10, -47],\n            [-22, 25],\n            [1, 31],\n            [-18, 43],\n            [-14, 22],\n            [5, 14],\n            [-36, 35],\n            [-19, 2],\n            [-27, 29],\n            [-50, -6],\n            [-36, -21],\n            [-31, -20],\n            [-27, 4],\n            [-29, -30],\n            [-24, -14],\n            [-6, -31],\n            [-10, -24],\n            [-23, -1],\n            [-18, -5],\n            [-24, 10],\n            [-20, -6],\n            [-19, -3],\n            [-17, -31],\n            [-8, 2],\n            [-14, -16],\n            [-13, -19],\n            [-21, 2],\n            [-18, 0],\n            [-30, 38],\n            [-15, 11],\n            [1, 34],\n            [14, 8],\n            [4, 14],\n            [-1, 21],\n            [4, 41],\n            [-3, 35],\n            [-15, 60],\n            [-4, 33],\n            [1, 34],\n            [-11, 38],\n            [-1, 18],\n            [-12, 23],\n            [-4, 47],\n            [-16, 46],\n            [-4, 26],\n            [13, -26],\n            [-10, 55],\n            [14, -17],\n            [8, -23],\n            [0, 30],\n            [-14, 47],\n            [-3, 18],\n            [-6, 18],\n            [3, 34],\n            [6, 15],\n            [4, 29],\n            [-3, 35],\n            [11, 42],\n            [2, -45],\n            [12, 41],\n            [22, 20],\n            [14, 25],\n            [21, 22],\n            [13, 4],\n            [7, -7],\n            [22, 22],\n            [17, 6],\n            [4, 13],\n            [8, 6],\n            [15, -2],\n            [29, 18],\n            [15, 26],\n            [7, 31],\n            [17, 30],\n            [1, 24],\n            [1, 32],\n            [19, 50],\n            [12, -51],\n            [12, 12],\n            [-10, 28],\n            [9, 29],\n            [12, -13],\n            [3, 45],\n            [15, 29],\n            [7, 23],\n            [14, 10],\n            [0, 17],\n            [13, -7],\n            [0, 15],\n            [12, 8],\n            [14, 8],\n            [20, -27],\n            [16, -35],\n            [17, 0],\n            [18, -6],\n            [-6, 33],\n            [13, 47],\n            [13, 15],\n            [-5, 15],\n            [12, 34],\n            [17, 21],\n            [14, -7],\n            [24, 11],\n            [-1, 30],\n            [-20, 19],\n            [15, 9],\n            [18, -15],\n            [15, -24],\n            [23, -15],\n            [8, 6],\n            [17, -18],\n            [17, 17],\n            [10, -5],\n            [7, 11],\n            [12, -29],\n            [-7, -32],\n            [-11, -24],\n            [-9, -2],\n            [3, -23],\n            [-8, -30],\n            [-10, -29],\n            [2, -17],\n            [22, -32],\n            [21, -19],\n            [15, -20],\n            [20, -35],\n            [8, 0],\n            [14, -15],\n            [4, -19],\n            [27, -20],\n            [18, 20],\n            [6, 32],\n            [5, 26],\n            [4, 33],\n            [8, 47],\n            [-4, 28],\n            [2, 17],\n            [-3, 34],\n            [4, 45],\n            [5, 12],\n            [-4, 20],\n            [7, 31],\n            [5, 32],\n            [1, 17],\n            [10, 22],\n            [8, -29],\n            [2, -37],\n            [7, -7],\n            [1, -25],\n            [10, -30],\n            [2, -33],\n            [-1, -22]\n        ],\n        [\n            [5471, 7900],\n            [-2, -24],\n            [-16, 0],\n            [6, -13],\n            [-9, -38]\n        ],\n        [\n            [5450, 7825],\n            [-6, -10],\n            [-24, -1],\n            [-14, -13],\n            [-23, 4]\n        ],\n        [\n            [5383, 7805],\n            [-40, 15],\n            [-6, 21],\n            [-27, -10],\n            [-4, -12],\n            [-16, 9]\n        ],\n        [\n            [5290, 7828],\n            [-15, 1],\n            [-12, 11],\n            [4, 15],\n            [-1, 10]\n        ],\n        [\n            [5266, 7865],\n            [8, 3],\n            [14, -16],\n            [4, 16],\n            [25, -3],\n            [20, 11],\n            [13, -2],\n            [9, -12],\n            [2, 10],\n            [-4, 38],\n            [10, 8],\n            [10, 27]\n        ],\n        [\n            [5377, 7945],\n            [21, -19],\n            [15, 24],\n            [10, 5],\n            [22, -18],\n            [13, 3],\n            [13, -12]\n        ],\n        [\n            [5471, 7928],\n            [-3, -7],\n            [3, -21]\n        ],\n        [\n            [6281, 7346],\n            [-19, 8],\n            [-14, 27],\n            [-4, 23]\n        ],\n        [\n            [6349, 7527],\n            [15, -31],\n            [14, -42],\n            [13, -2],\n            [8, -16],\n            [-23, -5],\n            [-5, -46],\n            [-4, -21],\n            [-11, -13],\n            [1, -30]\n        ],\n        [\n            [6357, 7321],\n            [-7, -3],\n            [-17, 31],\n            [10, 30],\n            [-9, 17],\n            [-10, -4],\n            [-33, -44]\n        ],\n        [\n            [6249, 7494],\n            [6, 10],\n            [21, -17],\n            [15, -4],\n            [4, 7],\n            [-14, 32],\n            [7, 9]\n        ],\n        [\n            [6288, 7531],\n            [8, -2],\n            [19, -36],\n            [13, -4],\n            [4, 15],\n            [17, 23]\n        ],\n        [\n            [5814, 4792],\n            [-1, 71],\n            [-7, 27]\n        ],\n        [\n            [5806, 4890],\n            [17, -5],\n            [8, 34],\n            [15, -4]\n        ],\n        [\n            [5846, 4915],\n            [1, -23],\n            [6, -14],\n            [1, -19],\n            [-7, -12],\n            [-11, -31],\n            [-10, -22],\n            [-12, -2]\n        ],\n        [\n            [5092, 8091],\n            [20, -5],\n            [26, 12],\n            [17, -25],\n            [16, -14]\n        ],\n        [\n            [5171, 8059],\n            [-4, -40]\n        ],\n        [\n            [5167, 8019],\n            [-7, -2],\n            [-3, -33]\n        ],\n        [\n            [5157, 7984],\n            [-24, 26],\n            [-14, -4],\n            [-20, 28],\n            [-13, 23],\n            [-13, 1],\n            [-4, 21]\n        ],\n        [\n            [5069, 8079],\n            [23, 12]\n        ],\n        [\n            [5074, 5427],\n            [-23, -7]\n        ],\n        [\n            [5051, 5420],\n            [-7, 41],\n            [2, 136],\n            [-6, 12],\n            [-1, 29],\n            [-10, 21],\n            [-8, 17],\n            [3, 31]\n        ],\n        [\n            [5024, 5707],\n            [10, 7],\n            [6, 26],\n            [13, 5],\n            [6, 18]\n        ],\n        [\n            [5059, 5763],\n            [10, 17],\n            [10, 0],\n            [21, -34]\n        ],\n        [\n            [5100, 5746],\n            [-1, -19],\n            [6, -35],\n            [-6, -24],\n            [3, -16],\n            [-13, -37],\n            [-9, -18],\n            [-5, -37],\n            [1, -38],\n            [-2, -95]\n        ],\n        [\n            [4921, 5627],\n            [-19, 15],\n            [-13, -2],\n            [-10, -15],\n            [-12, 13],\n            [-5, 19],\n            [-13, 13]\n        ],\n        [\n            [4849, 5670],\n            [-1, 34],\n            [7, 26],\n            [-1, 20],\n            [23, 48],\n            [4, 41],\n            [7, 14],\n            [14, -8],\n            [11, 12],\n            [4, 16],\n            [22, 26],\n            [5, 19],\n            [26, 24],\n            [15, 9],\n            [7, -12],\n            [18, 0]\n        ],\n        [\n            [5010, 5939],\n            [-2, -28],\n            [3, -27],\n            [16, -39],\n            [1, -28],\n            [32, -14],\n            [-1, -40]\n        ],\n        [\n            [5024, 5707],\n            [-24, 1]\n        ],\n        [\n            [5000, 5708],\n            [-13, 5],\n            [-9, -9],\n            [-12, 4],\n            [-48, -3],\n            [-1, -33],\n            [4, -45]\n        ],\n        [\n            [7573, 6360],\n            [0, -43],\n            [-10, 9],\n            [2, -47]\n        ],\n        [\n            [7565, 6279],\n            [-8, 30],\n            [-1, 31],\n            [-6, 28],\n            [-11, 34],\n            [-26, 3],\n            [3, -25],\n            [-9, -32],\n            [-12, 12],\n            [-4, -11],\n            [-8, 6],\n            [-11, 5]\n        ],\n        [\n            [7472, 6360],\n            [-4, 49],\n            [-10, 45],\n            [5, 35],\n            [-17, 16],\n            [6, 22],\n            [18, 22],\n            [-20, 31],\n            [9, 40],\n            [22, -26],\n            [14, -3],\n            [2, -41],\n            [26, -8],\n            [26, 1],\n            [16, -10],\n            [-13, -50],\n            [-12, -3],\n            [-9, -34],\n            [16, -31],\n            [4, 38],\n            [8, 0],\n            [14, -93]\n        ],\n        [\n            [5629, 7671],\n            [8, -25],\n            [11, 5],\n            [21, -9],\n            [41, -4],\n            [13, 16],\n            [33, 13],\n            [20, -21],\n            [17, -6]\n        ],\n        [\n            [5793, 7640],\n            [-15, -25],\n            [-10, -42],\n            [9, -34]\n        ],\n        [\n            [5777, 7539],\n            [-24, 8],\n            [-28, -18]\n        ],\n        [\n            [5725, 7529],\n            [0, -30],\n            [-26, -5],\n            [-19, 20],\n            [-22, -16],\n            [-21, 2]\n        ],\n        [\n            [5637, 7500],\n            [-2, 39],\n            [-14, 19]\n        ],\n        [\n            [5621, 7558],\n            [5, 8],\n            [-3, 7],\n            [4, 19],\n            [11, 18],\n            [-14, 26],\n            [-2, 21],\n            [7, 14]\n        ],\n        [\n            [2846, 6461],\n            [-7, -3],\n            [-7, 34],\n            [-10, 17],\n            [6, 38],\n            [8, -3],\n            [10, -49],\n            [0, -34]\n        ],\n        [\n            [2838, 6628],\n            [-30, -10],\n            [-2, 22],\n            [13, 5],\n            [18, -2],\n            [1, -15]\n        ],\n        [\n            [2861, 6628],\n            [-5, -42],\n            [-5, 8],\n            [0, 31],\n            [-12, 23],\n            [0, 7],\n            [22, -27]\n        ],\n        [\n            [5527, 7708],\n            [10, 0],\n            [-7, -26],\n            [14, -23],\n            [-4, -28],\n            [-7, -2]\n        ],\n        [\n            [5533, 7629],\n            [-5, -6],\n            [-9, -13],\n            [-4, -33]\n        ],\n        [\n            [5515, 7577],\n            [-25, 23],\n            [-10, 24],\n            [-11, 13],\n            [-12, 22],\n            [-6, 19],\n            [-14, 27],\n            [6, 25],\n            [10, -14],\n            [6, 12],\n            [13, 2],\n            [24, -10],\n            [19, 1],\n            [12, -13]\n        ],\n        [\n            [5652, 8242],\n            [27, 0],\n            [30, 22],\n            [6, 34],\n            [23, 19],\n            [-3, 26]\n        ],\n        [\n            [5735, 8343],\n            [17, 10],\n            [30, 23]\n        ],\n        [\n            [5782, 8376],\n            [29, -15],\n            [4, -15],\n            [15, 7],\n            [27, -14],\n            [3, -27],\n            [-6, -16],\n            [17, -39],\n            [12, -11],\n            [-2, -11],\n            [19, -10],\n            [8, -16],\n            [-11, -13],\n            [-23, 2],\n            [-5, -5],\n            [7, -20],\n            [6, -37]\n        ],\n        [\n            [5882, 8136],\n            [-23, -4],\n            [-9, -13],\n            [-2, -30],\n            [-11, 6],\n            [-25, -3],\n            [-7, 14],\n            [-11, -10],\n            [-10, 8],\n            [-22, 1],\n            [-31, 15],\n            [-28, 4],\n            [-22, -1],\n            [-15, -16],\n            [-13, -2]\n        ],\n        [\n            [5653, 8105],\n            [-1, 26],\n            [-8, 27],\n            [17, 12],\n            [0, 24],\n            [-8, 22],\n            [-1, 26]\n        ],\n        [\n            [2524, 6110],\n            [-1, 8],\n            [4, 3],\n            [5, -7],\n            [10, 36],\n            [5, 0]\n        ],\n        [\n            [2547, 6150],\n            [0, -8],\n            [5, -1],\n            [0, -16],\n            [-5, -25],\n            [3, -9],\n            [-3, -21],\n            [2, -6],\n            [-4, -30],\n            [-5, -16],\n            [-5, -1],\n            [-6, -21]\n        ],\n        [\n            [2529, 5996],\n            [-8, 0],\n            [2, 67],\n            [1, 47]\n        ],\n        [\n            [3136, 3714],\n            [-20, -8],\n            [-11, 82],\n            [-15, 66],\n            [9, 57],\n            [-15, 25],\n            [-4, 43],\n            [-13, 40]\n        ],\n        [\n            [3067, 4019],\n            [17, 64],\n            [-12, 49],\n            [7, 20],\n            [-5, 22],\n            [10, 30],\n            [1, 50],\n            [1, 41],\n            [6, 20],\n            [-24, 96]\n        ],\n        [\n            [3068, 4411],\n            [21, -5],\n            [14, 1],\n            [6, 18],\n            [25, 24],\n            [14, 22],\n            [37, 10],\n            [-3, -44],\n            [3, -23],\n            [-2, -40],\n            [30, -53],\n            [31, -9],\n            [11, -23],\n            [19, -11],\n            [11, -17],\n            [18, 0],\n            [16, -17],\n            [1, -34],\n            [6, -18],\n            [0, -25],\n            [-8, -1],\n            [11, -69],\n            [53, -2],\n            [-4, -35],\n            [3, -23],\n            [15, -16],\n            [6, -37],\n            [-4, -47],\n            [-8, -26],\n            [3, -33],\n            [-9, -12]\n        ],\n        [\n            [3384, 3866],\n            [-1, 18],\n            [-25, 30],\n            [-26, 1],\n            [-49, -17],\n            [-13, -52],\n            [-1, -32],\n            [-11, -71]\n        ],\n        [\n            [3482, 3537],\n            [6, 34],\n            [3, 35],\n            [1, 32],\n            [-10, 11],\n            [-11, -9],\n            [-10, 2],\n            [-4, 23],\n            [-2, 54],\n            [-5, 18],\n            [-19, 16],\n            [-11, -12],\n            [-30, 11],\n            [2, 81],\n            [-8, 33]\n        ],\n        [\n            [3068, 4411],\n            [-15, -11],\n            [-13, 7],\n            [2, 90],\n            [-23, -35],\n            [-24, 2],\n            [-11, 31],\n            [-18, 4],\n            [5, 25],\n            [-15, 36],\n            [-11, 53],\n            [7, 11],\n            [0, 25],\n            [17, 17],\n            [-3, 32],\n            [7, 20],\n            [2, 28],\n            [32, 40],\n            [22, 11],\n            [4, 9],\n            [25, -2]\n        ],\n        [\n            [3058, 4804],\n            [13, 162],\n            [0, 25],\n            [-4, 34],\n            [-12, 22],\n            [0, 42],\n            [15, 10],\n            [6, -6],\n            [1, 23],\n            [-16, 6],\n            [-1, 37],\n            [54, -2],\n            [10, 21],\n            [7, -19],\n            [6, -35],\n            [5, 8]\n        ],\n        [\n            [3142, 5132],\n            [15, -32],\n            [22, 4],\n            [5, 18],\n            [21, 14],\n            [11, 10],\n            [4, 25],\n            [19, 17],\n            [-1, 12],\n            [-24, 5],\n            [-3, 37],\n            [1, 40],\n            [-13, 15],\n            [5, 6],\n            [21, -8],\n            [22, -15],\n            [8, 14],\n            [20, 9],\n            [31, 23],\n            [10, 22],\n            [-3, 17]\n        ],\n        [\n            [3313, 5365],\n            [14, 2],\n            [7, -13],\n            [-4, -26],\n            [9, -9],\n            [7, -28],\n            [-8, -20],\n            [-4, -51],\n            [7, -30],\n            [2, -27],\n            [17, -28],\n            [14, -3],\n            [3, 12],\n            [8, 3],\n            [13, 10],\n            [9, 16],\n            [15, -5],\n            [7, 2]\n        ],\n        [\n            [3429, 5170],\n            [15, -5],\n            [3, 12],\n            [-5, 12],\n            [3, 17],\n            [11, -5],\n            [13, 6],\n            [16, -13]\n        ],\n        [\n            [3485, 5194],\n            [12, -12],\n            [9, 16],\n            [6, -3],\n            [4, -16],\n            [13, 4],\n            [11, 22],\n            [8, 44],\n            [17, 54]\n        ],\n        [\n            [3565, 5303],\n            [9, 3],\n            [7, -33],\n            [16, -103],\n            [14, -10],\n            [1, -41],\n            [-21, -48],\n            [9, -18],\n            [49, -9],\n            [1, -60],\n            [21, 39],\n            [35, -21],\n            [46, -36],\n            [14, -35],\n            [-5, -32],\n            [33, 18],\n            [54, -32],\n            [41, 3],\n            [41, -49],\n            [36, -66],\n            [21, -17],\n            [24, -3],\n            [10, -18],\n            [9, -76],\n            [5, -35],\n            [-11, -98],\n            [-14, -39],\n            [-39, -82],\n            [-18, -67],\n            [-21, -51],\n            [-7, -1],\n            [-7, -43],\n            [2, -111],\n            [-8, -91],\n            [-3, -39],\n            [-9, -23],\n            [-5, -79],\n            [-28, -77],\n            [-5, -61],\n            [-22, -26],\n            [-7, -35],\n            [-30, 0],\n            [-44, -23],\n            [-19, -26],\n            [-31, -18],\n            [-33, -47],\n            [-23, -58],\n            [-5, -44],\n            [5, -33],\n            [-5, -60],\n            [-6, -28],\n            [-20, -33],\n            [-31, -104],\n            [-24, -47],\n            [-19, -27],\n            [-13, -57],\n            [-18, -33]\n        ],\n        [\n            [3517, 3063],\n            [-8, 33],\n            [13, 28],\n            [-16, 40],\n            [-22, 33],\n            [-29, 38],\n            [-10, -2],\n            [-28, 46],\n            [-18, -7]\n        ],\n        [\n            [8172, 5325],\n            [11, 22],\n            [23, 32]\n        ],\n        [\n            [8206, 5379],\n            [-1, -29],\n            [-2, -37],\n            [-13, 1],\n            [-6, -20],\n            [-12, 31]\n        ],\n        [\n            [7546, 6698],\n            [12, -19],\n            [-2, -36],\n            [-23, -2],\n            [-23, 4],\n            [-18, -9],\n            [-25, 22],\n            [-1, 12]\n        ],\n        [\n            [7466, 6670],\n            [19, 44],\n            [15, 15],\n            [20, -14],\n            [14, -1],\n            [12, -16]\n        ],\n        [\n            [5817, 3752],\n            [-39, -43],\n            [-25, -44],\n            [-10, -40],\n            [-8, -22],\n            [-15, -4],\n            [-5, -29],\n            [-3, -18],\n            [-17, -14],\n            [-23, 3],\n            [-13, 17],\n            [-12, 7],\n            [-14, -14],\n            [-6, -28],\n            [-14, -18],\n            [-13, -26],\n            [-20, -6],\n            [-6, 20],\n            [2, 36],\n            [-16, 56],\n            [-8, 9]\n        ],\n        [\n            [5552, 3594],\n            [0, 173],\n            [27, 2],\n            [1, 210],\n            [21, 2],\n            [43, 21],\n            [10, -24],\n            [18, 23],\n            [9, 0],\n            [15, 13]\n        ],\n        [\n            [5696, 4014],\n            [5, -4]\n        ],\n        [\n            [5701, 4010],\n            [11, -48],\n            [5, -10],\n            [9, -34],\n            [32, -65],\n            [12, -7],\n            [0, -20],\n            [8, -38],\n            [21, -9],\n            [18, -27]\n        ],\n        [\n            [5424, 5496],\n            [23, 4],\n            [5, 16],\n            [5, -2],\n            [7, -13],\n            [34, 23],\n            [12, 23],\n            [15, 20],\n            [-3, 21],\n            [8, 6],\n            [27, -4],\n            [26, 27],\n            [20, 65],\n            [14, 24],\n            [18, 10]\n        ],\n        [\n            [5635, 5716],\n            [3, -26],\n            [16, -36],\n            [0, -25],\n            [-5, -24],\n            [2, -18],\n            [10, -18]\n        ],\n        [\n            [5661, 5569],\n            [21, -25]\n        ],\n        [\n            [5682, 5544],\n            [15, -24],\n            [0, -19],\n            [19, -31],\n            [12, -26],\n            [7, -35],\n            [20, -24],\n            [5, -18]\n        ],\n        [\n            [5760, 5367],\n            [-9, -7],\n            [-18, 2],\n            [-21, 6],\n            [-10, -5],\n            [-5, -14],\n            [-9, -2],\n            [-10, 12],\n            [-31, -29],\n            [-13, 6],\n            [-4, -5],\n            [-8, -35],\n            [-21, 11],\n            [-20, 6],\n            [-18, 22],\n            [-23, 20],\n            [-15, -19],\n            [-10, -30],\n            [-3, -41]\n        ],\n        [\n            [5512, 5265],\n            [-18, 3],\n            [-19, 10],\n            [-16, -32],\n            [-15, -55]\n        ],\n        [\n            [5444, 5191],\n            [-3, 18],\n            [-1, 27],\n            [-13, 19],\n            [-10, 30],\n            [-2, 21],\n            [-13, 31],\n            [2, 18],\n            [-3, 25],\n            [2, 45],\n            [7, 11],\n            [14, 60]\n        ],\n        [\n            [3231, 7808],\n            [20, -8],\n            [26, 1],\n            [-14, -24],\n            [-10, -4],\n            [-35, 25],\n            [-7, 20],\n            [10, 18],\n            [10, -28]\n        ],\n        [\n            [3283, 7958],\n            [-14, -1],\n            [-36, 19],\n            [-26, 28],\n            [10, 5],\n            [37, -15],\n            [28, -25],\n            [1, -11]\n        ],\n        [\n            [1569, 7923],\n            [-14, -8],\n            [-46, 27],\n            [-8, 21],\n            [-25, 21],\n            [-5, 16],\n            [-28, 11],\n            [-11, 32],\n            [2, 14],\n            [30, -13],\n            [17, -9],\n            [26, -6],\n            [9, -21],\n            [14, -28],\n            [28, -24],\n            [11, -33]\n        ],\n        [\n            [3440, 8052],\n            [-18, -52],\n            [18, 20],\n            [19, -12],\n            [-10, -21],\n            [25, -16],\n            [12, 14],\n            [28, -18],\n            [-8, -43],\n            [19, 10],\n            [4, -32],\n            [8, -36],\n            [-11, -52],\n            [-13, -2],\n            [-18, 11],\n            [6, 48],\n            [-8, 8],\n            [-32, -52],\n            [-17, 2],\n            [20, 28],\n            [-27, 14],\n            [-30, -3],\n            [-54, 2],\n            [-4, 17],\n            [17, 21],\n            [-12, 16],\n            [24, 36],\n            [28, 94],\n            [18, 33],\n            [24, 21],\n            [13, -3],\n            [-6, -16],\n            [-15, -37]\n        ],\n        [\n            [1313, 8250],\n            [27, 5],\n            [-8, -67],\n            [24, -48],\n            [-11, 0],\n            [-17, 27],\n            [-10, 27],\n            [-14, 19],\n            [-5, 26],\n            [1, 19],\n            [13, -8]\n        ],\n        [\n            [2798, 8730],\n            [-11, -31],\n            [-12, 5],\n            [-8, 17],\n            [2, 4],\n            [10, 18],\n            [12, -1],\n            [7, -12]\n        ],\n        [\n            [2725, 8762],\n            [-33, -32],\n            [-19, 1],\n            [-6, 16],\n            [20, 27],\n            [38, 0],\n            [0, -12]\n        ],\n        [\n            [2634, 8936],\n            [5, -26],\n            [15, 9],\n            [16, -15],\n            [30, -20],\n            [32, -19],\n            [2, -28],\n            [21, 5],\n            [20, -20],\n            [-25, -18],\n            [-43, 14],\n            [-16, 26],\n            [-27, -31],\n            [-40, -31],\n            [-9, 35],\n            [-38, -6],\n            [24, 30],\n            [4, 46],\n            [9, 54],\n            [20, -5]\n        ],\n        [\n            [2892, 9024],\n            [-31, -3],\n            [-7, 29],\n            [12, 34],\n            [26, 8],\n            [21, -17],\n            [1, -25],\n            [-4, -8],\n            [-18, -18]\n        ],\n        [\n            [2343, 9140],\n            [-17, -21],\n            [-38, 18],\n            [-22, -6],\n            [-38, 26],\n            [24, 19],\n            [19, 25],\n            [30, -16],\n            [17, -11],\n            [8, -11],\n            [17, -23]\n        ],\n        [\n            [3135, 7724],\n            [-18, 33],\n            [0, 81],\n            [-13, 17],\n            [-18, -10],\n            [-10, 16],\n            [-21, -45],\n            [-8, -46],\n            [-10, -27],\n            [-12, -9],\n            [-9, -3],\n            [-3, -15],\n            [-51, 0],\n            [-42, 0],\n            [-12, -11],\n            [-30, -42],\n            [-3, -5],\n            [-9, -23],\n            [-26, 0],\n            [-27, 0],\n            [-12, -10],\n            [4, -11],\n            [2, -18],\n            [0, -6],\n            [-36, -30],\n            [-29, -9],\n            [-32, -31],\n            [-7, 0],\n            [-10, 9],\n            [-3, 8],\n            [1, 6],\n            [6, 21],\n            [13, 33],\n            [8, 35],\n            [-5, 51],\n            [-6, 53],\n            [-29, 28],\n            [3, 11],\n            [-4, 7],\n            [-8, 0],\n            [-5, 9],\n            [-2, 14],\n            [-5, -6],\n            [-7, 2],\n            [1, 6],\n            [-6, 6],\n            [-3, 15],\n            [-21, 19],\n            [-23, 20],\n            [-27, 23],\n            [-26, 21],\n            [-25, -17],\n            [-9, 0],\n            [-34, 15],\n            [-23, -8],\n            [-27, 19],\n            [-28, 9],\n            [-19, 4],\n            [-9, 10],\n            [-5, 32],\n            [-9, 0],\n            [-1, -23],\n            [-57, 0],\n            [-95, 0],\n            [-94, 0],\n            [-84, 0],\n            [-83, 0],\n            [-82, 0],\n            [-85, 0],\n            [-27, 0],\n            [-82, 0],\n            [-79, 0]\n        ],\n        [\n            [1588, 7952],\n            [-4, 0],\n            [-54, 58],\n            [-20, 26],\n            [-50, 24],\n            [-15, 53],\n            [3, 36],\n            [-35, 25],\n            [-5, 48],\n            [-34, 43],\n            [0, 30]\n        ],\n        [\n            [1374, 8295],\n            [15, 29],\n            [0, 37],\n            [-48, 37],\n            [-28, 68],\n            [-17, 42],\n            [-26, 27],\n            [-19, 24],\n            [-14, 31],\n            [-28, -20],\n            [-27, -33],\n            [-25, 39],\n            [-19, 26],\n            [-27, 16],\n            [-28, 2],\n            [0, 337],\n            [1, 219]\n        ],\n        [\n            [1084, 9176],\n            [51, -14],\n            [44, -29],\n            [29, -5],\n            [24, 24],\n            [34, 19],\n            [41, -7],\n            [42, 26],\n            [45, 14],\n            [20, -24],\n            [20, 14],\n            [6, 27],\n            [20, -6],\n            [47, -53],\n            [37, 40],\n            [3, -45],\n            [34, 10],\n            [11, 17],\n            [34, -3],\n            [42, -25],\n            [65, -22],\n            [38, -10],\n            [28, 4],\n            [37, -30],\n            [-39, -29],\n            [50, -13],\n            [75, 7],\n            [24, 11],\n            [29, -36],\n            [31, 30],\n            [-29, 25],\n            [18, 20],\n            [34, 3],\n            [22, 6],\n            [23, -14],\n            [28, -32],\n            [31, 5],\n            [49, -27],\n            [43, 9],\n            [40, -1],\n            [-3, 37],\n            [25, 10],\n            [43, -20],\n            [0, -56],\n            [17, 47],\n            [23, -1],\n            [12, 59],\n            [-30, 36],\n            [-32, 24],\n            [2, 65],\n            [33, 43],\n            [37, -9],\n            [28, -26],\n            [38, -67],\n            [-25, -29],\n            [52, -12],\n            [-1, -60],\n            [38, 46],\n            [33, -38],\n            [-9, -44],\n            [27, -40],\n            [29, 43],\n            [21, 51],\n            [1, 65],\n            [40, -5],\n            [41, -8],\n            [37, -30],\n            [2, -29],\n            [-21, -31],\n            [20, -32],\n            [-4, -29],\n            [-54, -41],\n            [-39, -9],\n            [-29, 18],\n            [-8, -30],\n            [-27, -50],\n            [-8, -26],\n            [-32, -40],\n            [-40, -4],\n            [-22, -25],\n            [-2, -38],\n            [-32, -7],\n            [-34, -48],\n            [-30, -67],\n            [-11, -46],\n            [-1, -69],\n            [40, -10],\n            [13, -55],\n            [13, -45],\n            [39, 12],\n            [51, -26],\n            [28, -22],\n            [20, -28],\n            [35, -17],\n            [29, -24],\n            [46, -4],\n            [30, -6],\n            [-4, -51],\n            [8, -59],\n            [21, -66],\n            [41, -56],\n            [21, 19],\n            [15, 61],\n            [-14, 93],\n            [-20, 31],\n            [45, 28],\n            [31, 41],\n            [16, 41],\n            [-3, 40],\n            [-19, 50],\n            [-33, 44],\n            [32, 62],\n            [-12, 54],\n            [-9, 92],\n            [19, 14],\n            [48, -16],\n            [29, -6],\n            [23, 15],\n            [25, -20],\n            [35, -34],\n            [8, -23],\n            [50, -4],\n            [-1, -50],\n            [9, -74],\n            [25, -10],\n            [21, -35],\n            [40, 33],\n            [26, 65],\n            [19, 28],\n            [21, -53],\n            [36, -75],\n            [31, -71],\n            [-11, -37],\n            [37, -33],\n            [25, -34],\n            [44, -15],\n            [18, -19],\n            [11, -50],\n            [22, -8],\n            [11, -22],\n            [2, -67],\n            [-20, -22],\n            [-20, -21],\n            [-46, -21],\n            [-35, -48],\n            [-47, -10],\n            [-59, 13],\n            [-42, 0],\n            [-29, -4],\n            [-23, -43],\n            [-35, -26],\n            [-40, -78],\n            [-32, -54],\n            [23, 9],\n            [45, 78],\n            [58, 49],\n            [42, 6],\n            [24, -29],\n            [-26, -40],\n            [9, -63],\n            [9, -45],\n            [36, -29],\n            [46, 8],\n            [28, 67],\n            [2, -43],\n            [17, -22],\n            [-34, -38],\n            [-61, -36],\n            [-28, -23],\n            [-31, -43],\n            [-21, 4],\n            [-1, 50],\n            [48, 49],\n            [-44, -2],\n            [-31, -7]\n        ],\n        [\n            [1829, 9377],\n            [-14, -27],\n            [61, 17],\n            [39, -29],\n            [31, 30],\n            [26, -20],\n            [23, -58],\n            [14, 25],\n            [-20, 60],\n            [24, 9],\n            [28, -9],\n            [31, -24],\n            [17, -58],\n            [9, -41],\n            [47, -30],\n            [50, -28],\n            [-3, -26],\n            [-46, -4],\n            [18, -23],\n            [-9, -22],\n            [-51, 9],\n            [-48, 16],\n            [-32, -3],\n            [-52, -20],\n            [-70, -9],\n            [-50, -6],\n            [-15, 28],\n            [-38, 16],\n            [-24, -6],\n            [-35, 47],\n            [19, 6],\n            [43, 10],\n            [39, -3],\n            [36, 11],\n            [-54, 13],\n            [-59, -4],\n            [-39, 1],\n            [-15, 22],\n            [64, 23],\n            [-42, -1],\n            [-49, 16],\n            [23, 44],\n            [20, 24],\n            [74, 36],\n            [29, -12]\n        ],\n        [\n            [2097, 9395],\n            [-24, -39],\n            [-44, 41],\n            [10, 9],\n            [37, 2],\n            [21, -13]\n        ],\n        [\n            [2879, 9376],\n            [3, -16],\n            [-30, 2],\n            [-30, 1],\n            [-30, -8],\n            [-8, 3],\n            [-31, 32],\n            [1, 21],\n            [14, 4],\n            [63, -6],\n            [48, -33]\n        ],\n        [\n            [2595, 9379],\n            [22, -36],\n            [26, 47],\n            [70, 24],\n            [48, -61],\n            [-4, -38],\n            [55, 17],\n            [26, 23],\n            [62, -30],\n            [38, -28],\n            [3, -25],\n            [52, 13],\n            [29, -38],\n            [67, -23],\n            [24, -24],\n            [26, -55],\n            [-51, -28],\n            [66, -38],\n            [44, -13],\n            [40, -55],\n            [44, -3],\n            [-9, -42],\n            [-49, -69],\n            [-34, 26],\n            [-44, 57],\n            [-36, -8],\n            [-3, -34],\n            [29, -34],\n            [38, -27],\n            [11, -16],\n            [18, -58],\n            [-9, -43],\n            [-35, 16],\n            [-70, 47],\n            [39, -51],\n            [29, -35],\n            [5, -21],\n            [-76, 24],\n            [-59, 34],\n            [-34, 29],\n            [10, 17],\n            [-42, 30],\n            [-40, 29],\n            [0, -18],\n            [-80, -9],\n            [-23, 20],\n            [18, 44],\n            [52, 1],\n            [57, 7],\n            [-9, 21],\n            [10, 30],\n            [36, 57],\n            [-8, 27],\n            [-11, 20],\n            [-42, 29],\n            [-57, 20],\n            [18, 15],\n            [-29, 36],\n            [-25, 4],\n            [-22, 20],\n            [-14, -18],\n            [-51, -7],\n            [-101, 13],\n            [-59, 17],\n            [-45, 9],\n            [-23, 21],\n            [29, 27],\n            [-39, 0],\n            [-9, 60],\n            [21, 53],\n            [29, 24],\n            [72, 16],\n            [-21, -39]\n        ],\n        [\n            [2212, 9420],\n            [33, -12],\n            [50, 7],\n            [7, -17],\n            [-26, -28],\n            [42, -26],\n            [-5, -53],\n            [-45, -23],\n            [-27, 5],\n            [-19, 23],\n            [-69, 45],\n            [0, 19],\n            [57, -7],\n            [-31, 38],\n            [33, 29]\n        ],\n        [\n            [2411, 9357],\n            [-30, -45],\n            [-32, 3],\n            [-17, 52],\n            [1, 29],\n            [14, 25],\n            [28, 16],\n            [58, -2],\n            [53, -14],\n            [-42, -53],\n            [-33, -11]\n        ],\n        [\n            [1654, 9275],\n            [-73, -29],\n            [-15, 26],\n            [-64, 31],\n            [12, 25],\n            [19, 43],\n            [24, 39],\n            [-27, 36],\n            [94, 10],\n            [39, -13],\n            [71, -3],\n            [27, -17],\n            [30, -25],\n            [-35, -15],\n            [-68, -41],\n            [-34, -42],\n            [0, -25]\n        ],\n        [\n            [2399, 9487],\n            [-15, -23],\n            [-40, 5],\n            [-34, 15],\n            [15, 27],\n            [40, 16],\n            [24, -21],\n            [10, -19]\n        ],\n        [\n            [2264, 9590],\n            [21, -27],\n            [1, -31],\n            [-13, -44],\n            [-46, -6],\n            [-30, 10],\n            [1, 34],\n            [-45, -4],\n            [-2, 45],\n            [30, -2],\n            [41, 21],\n            [40, -4],\n            [2, 8]\n        ],\n        [\n            [1994, 9559],\n            [11, -21],\n            [25, 10],\n            [29, -2],\n            [5, -29],\n            [-17, -28],\n            [-94, -10],\n            [-70, -25],\n            [-43, -2],\n            [-3, 20],\n            [57, 26],\n            [-125, -7],\n            [-39, 10],\n            [38, 58],\n            [26, 17],\n            [78, -20],\n            [50, -35],\n            [48, -5],\n            [-40, 57],\n            [26, 21],\n            [29, -7],\n            [9, -28]\n        ],\n        [\n            [2370, 9612],\n            [30, -19],\n            [55, 0],\n            [24, -19],\n            [-6, -22],\n            [32, -14],\n            [17, -14],\n            [38, -2],\n            [40, -5],\n            [44, 13],\n            [57, 5],\n            [45, -5],\n            [30, -22],\n            [6, -24],\n            [-17, -16],\n            [-42, -13],\n            [-35, 8],\n            [-80, -10],\n            [-57, -1],\n            [-45, 8],\n            [-74, 19],\n            [-9, 32],\n            [-4, 29],\n            [-27, 26],\n            [-58, 7],\n            [-32, 19],\n            [10, 24],\n            [58, -4]\n        ],\n        [\n            [1772, 9645],\n            [-4, -46],\n            [-21, -20],\n            [-26, -3],\n            [-52, -26],\n            [-44, -9],\n            [-38, 13],\n            [47, 44],\n            [57, 39],\n            [43, -1],\n            [38, 9]\n        ],\n        [\n            [2393, 9637],\n            [-13, -2],\n            [-52, 4],\n            [-7, 17],\n            [56, -1],\n            [19, -11],\n            [-3, -7]\n        ],\n        [\n            [1939, 9648],\n            [-52, -17],\n            [-41, 19],\n            [23, 19],\n            [40, 6],\n            [39, -10],\n            [-9, -17]\n        ],\n        [\n            [1954, 9701],\n            [-34, -11],\n            [-46, 0],\n            [0, 8],\n            [29, 18],\n            [14, -3],\n            [37, -12]\n        ],\n        [\n            [2338, 9669],\n            [-41, -12],\n            [-23, 13],\n            [-12, 23],\n            [-2, 24],\n            [36, -2],\n            [16, -4],\n            [33, -21],\n            [-7, -21]\n        ],\n        [\n            [2220, 9685],\n            [11, -25],\n            [-45, 7],\n            [-46, 19],\n            [-62, 2],\n            [27, 18],\n            [-34, 14],\n            [-2, 22],\n            [55, -8],\n            [75, -21],\n            [21, -28]\n        ],\n        [\n            [2583, 9764],\n            [33, -20],\n            [-38, -17],\n            [-51, -45],\n            [-50, -4],\n            [-57, 8],\n            [-30, 24],\n            [0, 21],\n            [22, 16],\n            [-50, 0],\n            [-31, 19],\n            [-18, 27],\n            [20, 26],\n            [19, 18],\n            [28, 4],\n            [-12, 14],\n            [65, 3],\n            [35, -32],\n            [47, -12],\n            [46, -11],\n            [22, -39]\n        ],\n        [\n            [3097, 9967],\n            [74, -4],\n            [60, -8],\n            [51, -16],\n            [-2, -16],\n            [-67, -25],\n            [-68, -12],\n            [-25, -14],\n            [61, 1],\n            [-66, -36],\n            [-45, -17],\n            [-48, -48],\n            [-57, -10],\n            [-18, -12],\n            [-84, -6],\n            [39, -8],\n            [-20, -10],\n            [23, -29],\n            [-26, -21],\n            [-43, -16],\n            [-13, -24],\n            [-39, -17],\n            [4, -14],\n            [48, 3],\n            [0, -15],\n            [-74, -35],\n            [-73, 16],\n            [-81, -9],\n            [-42, 7],\n            [-52, 3],\n            [-4, 29],\n            [52, 13],\n            [-14, 43],\n            [17, 4],\n            [74, -26],\n            [-38, 38],\n            [-45, 11],\n            [23, 23],\n            [49, 14],\n            [8, 21],\n            [-39, 23],\n            [-12, 31],\n            [76, -3],\n            [22, -6],\n            [43, 21],\n            [-62, 7],\n            [-98, -4],\n            [-49, 20],\n            [-23, 24],\n            [-32, 17],\n            [-6, 21],\n            [41, 11],\n            [32, 2],\n            [55, 9],\n            [41, 22],\n            [34, -3],\n            [30, -16],\n            [21, 32],\n            [37, 9],\n            [50, 7],\n            [85, 2],\n            [14, -6],\n            [81, 10],\n            [60, -4],\n            [60, -4]\n        ],\n        [\n            [5290, 7828],\n            [-3, -24],\n            [-12, -10],\n            [-20, 7],\n            [-6, -24],\n            [-14, -2],\n            [-5, 10],\n            [-15, -20],\n            [-13, -3],\n            [-12, 13]\n        ],\n        [\n            [5190, 7775],\n            [-10, 25],\n            [-13, -9],\n            [0, 27],\n            [21, 33],\n            [-1, 15],\n            [12, -5],\n            [8, 10]\n        ],\n        [\n            [5207, 7871],\n            [24, -1],\n            [5, 13],\n            [30, -18]\n        ],\n        [\n            [3140, 1814],\n            [-10, -24],\n            [-23, -18],\n            [-14, 2],\n            [-16, 5],\n            [-21, 18],\n            [-29, 8],\n            [-35, 33],\n            [-28, 32],\n            [-38, 66],\n            [23, -12],\n            [39, -40],\n            [36, -21],\n            [15, 27],\n            [9, 41],\n            [25, 24],\n            [20, -7]\n        ],\n        [\n            [3095, 1968],\n            [-25, 0],\n            [-13, -14],\n            [-25, -22],\n            [-5, -55],\n            [-11, -1],\n            [-32, 19],\n            [-32, 41],\n            [-34, 34],\n            [-9, 37],\n            [8, 35],\n            [-14, 39],\n            [-4, 101],\n            [12, 57],\n            [30, 45],\n            [-43, 18],\n            [27, 52],\n            [9, 98],\n            [31, -21],\n            [15, 123],\n            [-19, 15],\n            [-9, -73],\n            [-17, 8],\n            [9, 84],\n            [9, 110],\n            [13, 40],\n            [-8, 58],\n            [-2, 66],\n            [11, 2],\n            [17, 96],\n            [20, 94],\n            [11, 88],\n            [-6, 89],\n            [8, 49],\n            [-3, 72],\n            [16, 73],\n            [5, 114],\n            [9, 123],\n            [9, 132],\n            [-2, 96],\n            [-6, 84]\n        ],\n        [\n            [3045, 3974],\n            [14, 15],\n            [8, 30]\n        ],\n        [\n            [8064, 6161],\n            [-24, -28],\n            [-23, 18],\n            [0, 51],\n            [13, 26],\n            [31, 17],\n            [16, -1],\n            [6, -23],\n            [-12, -26],\n            [-7, -34]\n        ],\n        [\n            [8628, 7562],\n            [-18, 35],\n            [-11, -33],\n            [-43, -26],\n            [4, -31],\n            [-24, 2],\n            [-13, 19],\n            [-19, -42],\n            [-30, -32],\n            [-23, -38]\n        ],\n        [\n            [8451, 7416],\n            [-39, -17],\n            [-20, -27],\n            [-30, -17],\n            [15, 28],\n            [-6, 23],\n            [22, 40],\n            [-15, 30],\n            [-24, -20],\n            [-32, -41],\n            [-17, -39],\n            [-27, -2],\n            [-14, -28],\n            [15, -40],\n            [22, -10],\n            [1, -26],\n            [22, -17],\n            [31, 42],\n            [25, -23],\n            [18, -2],\n            [4, -31],\n            [-39, -16],\n            [-13, -32],\n            [-27, -30],\n            [-14, -41],\n            [30, -33],\n            [11, -58],\n            [17, -54],\n            [18, -45],\n            [0, -44],\n            [-17, -16],\n            [6, -32],\n            [17, -18],\n            [-5, -48],\n            [-7, -47],\n            [-15, -5],\n            [-21, -64],\n            [-22, -78],\n            [-26, -70],\n            [-38, -55],\n            [-39, -50],\n            [-31, -6],\n            [-17, -27],\n            [-10, 20],\n            [-15, -30],\n            [-39, -29],\n            [-29, -9],\n            [-10, -63],\n            [-15, -3],\n            [-8, 43],\n            [7, 22],\n            [-37, 19],\n            [-13, -9]\n        ],\n        [\n            [8001, 6331],\n            [-28, 15],\n            [-14, 24],\n            [5, 34],\n            [-26, 11],\n            [-13, 22],\n            [-24, -31],\n            [-27, -7],\n            [-22, 0],\n            [-15, -14]\n        ],\n        [\n            [7837, 6385],\n            [-14, -9],\n            [4, -68],\n            [-15, 2],\n            [-2, 14]\n        ],\n        [\n            [7810, 6324],\n            [-1, 24],\n            [-20, -17],\n            [-12, 11],\n            [-21, 22],\n            [8, 49],\n            [-18, 12],\n            [-6, 54],\n            [-30, -10],\n            [4, 70],\n            [26, 50],\n            [1, 48],\n            [-1, 46],\n            [-12, 14],\n            [-9, 35],\n            [-16, -5]\n        ],\n        [\n            [7703, 6727],\n            [-30, 9],\n            [9, 25],\n            [-13, 36],\n            [-20, -24],\n            [-23, 14],\n            [-32, -37],\n            [-25, -44],\n            [-23, -8]\n        ],\n        [\n            [7466, 6670],\n            [-2, 47],\n            [-17, -13]\n        ],\n        [\n            [7447, 6704],\n            [-32, 6],\n            [-32, 14],\n            [-22, 26],\n            [-22, 11],\n            [-9, 29],\n            [-16, 8],\n            [-28, 39],\n            [-22, 18],\n            [-12, -14]\n        ],\n        [\n            [7252, 6841],\n            [-38, 41],\n            [-28, 37],\n            [-7, 65],\n            [20, -7],\n            [1, 30],\n            [-12, 30],\n            [3, 48],\n            [-30, 69]\n        ],\n        [\n            [7161, 7154],\n            [-45, 24],\n            [-8, 46],\n            [-21, 27]\n        ],\n        [\n            [7082, 7268],\n            [-4, 34],\n            [1, 23],\n            [-17, 13],\n            [-9, -6],\n            [-7, 55]\n        ],\n        [\n            [7046, 7387],\n            [8, 13],\n            [-4, 14],\n            [26, 28],\n            [20, 12],\n            [29, -8],\n            [11, 38],\n            [35, 7],\n            [10, 23],\n            [44, 32],\n            [4, 13]\n        ],\n        [\n            [7229, 7559],\n            [-2, 34],\n            [19, 15],\n            [-25, 103],\n            [55, 24],\n            [14, 13],\n            [20, 106],\n            [55, -20],\n            [15, 27],\n            [2, 59],\n            [23, 6],\n            [21, 39]\n        ],\n        [\n            [7426, 7965],\n            [11, 5]\n        ],\n        [\n            [7437, 7970],\n            [7, -41],\n            [23, -32],\n            [40, -22],\n            [19, -47],\n            [-10, -70],\n            [10, -25],\n            [33, -10],\n            [37, -8],\n            [33, -37],\n            [18, -7],\n            [12, -54],\n            [17, -35],\n            [30, 1],\n            [58, -13],\n            [36, 8],\n            [28, -9],\n            [41, -36],\n            [34, 0],\n            [12, -18],\n            [32, 32],\n            [45, 20],\n            [42, 2],\n            [32, 21],\n            [20, 32],\n            [20, 20],\n            [-5, 19],\n            [-9, 23],\n            [15, 38],\n            [15, -5],\n            [29, -12],\n            [28, 31],\n            [42, 23],\n            [20, 39],\n            [20, 17],\n            [40, 8],\n            [22, -7],\n            [3, 21],\n            [-25, 41],\n            [-22, 19],\n            [-22, -22],\n            [-27, 10],\n            [-16, -8],\n            [-7, 24],\n            [20, 59],\n            [13, 45]\n        ],\n        [\n            [8240, 8005],\n            [34, -23],\n            [39, 38],\n            [-1, 26],\n            [26, 62],\n            [15, 19],\n            [0, 33],\n            [-16, 14],\n            [23, 29],\n            [35, 11],\n            [37, 2],\n            [41, -18],\n            [25, -22],\n            [17, -59],\n            [10, -26],\n            [10, -36],\n            [10, -58],\n            [49, -19],\n            [32, -42],\n            [12, -55],\n            [42, 0],\n            [24, 23],\n            [46, 17],\n            [-15, -53],\n            [-11, -21],\n            [-9, -65],\n            [-19, -58],\n            [-33, 11],\n            [-24, -21],\n            [7, -51],\n            [-4, -69],\n            [-14, -2],\n            [0, -30]\n        ],\n        [\n            [4920, 5353],\n            [-12, -1],\n            [-20, 12],\n            [-18, -1],\n            [-33, -10],\n            [-19, -18],\n            [-27, -21],\n            [-6, 1]\n        ],\n        [\n            [4785, 5315],\n            [2, 49],\n            [3, 7],\n            [-1, 24],\n            [-12, 24],\n            [-8, 4],\n            [-8, 17],\n            [6, 26],\n            [-3, 28],\n            [1, 18]\n        ],\n        [\n            [4765, 5512],\n            [5, 0],\n            [1, 25],\n            [-2, 12],\n            [3, 8],\n            [10, 7],\n            [-7, 47],\n            [-6, 25],\n            [2, 20],\n            [5, 4]\n        ],\n        [\n            [4776, 5660],\n            [4, 6],\n            [8, -9],\n            [21, -1],\n            [5, 18],\n            [5, -1],\n            [8, 6],\n            [4, -25],\n            [7, 7],\n            [11, 9]\n        ],\n        [\n            [4921, 5627],\n            [7, -84],\n            [-11, -50],\n            [-8, -66],\n            [12, -51],\n            [-1, -23]\n        ],\n        [\n            [5363, 5191],\n            [-4, 4],\n            [-16, -8],\n            [-17, 8],\n            [-13, -4]\n        ],\n        [\n            [5313, 5191],\n            [-45, 1]\n        ],\n        [\n            [5268, 5192],\n            [4, 47],\n            [-11, 39],\n            [-13, 10],\n            [-6, 27],\n            [-7, 8],\n            [1, 16]\n        ],\n        [\n            [5236, 5339],\n            [7, 42],\n            [13, 57],\n            [8, 1],\n            [17, 34],\n            [10, 1],\n            [16, -24],\n            [19, 20],\n            [2, 25],\n            [7, 23],\n            [4, 30],\n            [15, 25],\n            [5, 41],\n            [6, 13],\n            [4, 31],\n            [7, 37],\n            [24, 46],\n            [1, 20],\n            [3, 10],\n            [-11, 24]\n        ],\n        [\n            [5393, 5795],\n            [1, 19],\n            [8, 3]\n        ],\n        [\n            [5402, 5817],\n            [11, -38],\n            [2, -39],\n            [-1, -39],\n            [15, -54],\n            [-15, 1],\n            [-8, -4],\n            [-13, 6],\n            [-6, -28],\n            [16, -35],\n            [13, -10],\n            [3, -24],\n            [9, -41],\n            [-4, -16]\n        ],\n        [\n            [5444, 5191],\n            [-2, -31],\n            [-22, 14],\n            [-22, 15],\n            [-35, 2]\n        ],\n        [\n            [5856, 5265],\n            [-2, -69],\n            [11, -8],\n            [-9, -21],\n            [-10, -16],\n            [-11, -31],\n            [-6, -27],\n            [-1, -48],\n            [-7, -22],\n            [0, -45]\n        ],\n        [\n            [5821, 4978],\n            [-8, -16],\n            [-1, -35],\n            [-4, -5],\n            [-2, -32]\n        ],\n        [\n            [5814, 4792],\n            [5, -55],\n            [-2, -30],\n            [5, -35],\n            [16, -33],\n            [15, -74]\n        ],\n        [\n            [5853, 4565],\n            [-11, 6],\n            [-37, -10],\n            [-7, -7],\n            [-8, -38],\n            [6, -26],\n            [-5, -70],\n            [-3, -59],\n            [7, -11],\n            [19, -23],\n            [8, 11],\n            [2, -64],\n            [-21, 1],\n            [-11, 32],\n            [-10, 25],\n            [-22, 9],\n            [-6, 31],\n            [-17, -19],\n            [-22, 8],\n            [-10, 27],\n            [-17, 6],\n            [-13, -2],\n            [-2, 19],\n            [-9, 1]\n        ],\n        [\n            [5342, 4697],\n            [-4, 18]\n        ],\n        [\n            [5360, 4775],\n            [8, -6],\n            [9, 23],\n            [15, -1],\n            [2, -17],\n            [11, -10],\n            [16, 37],\n            [16, 29],\n            [7, 19],\n            [-1, 48],\n            [12, 58],\n            [13, 30],\n            [18, 29],\n            [3, 18],\n            [1, 22],\n            [5, 21],\n            [-2, 33],\n            [4, 52],\n            [5, 37],\n            [8, 32],\n            [2, 36]\n        ],\n        [\n            [5760, 5367],\n            [17, -49],\n            [12, -7],\n            [8, 10],\n            [12, -4],\n            [16, 12],\n            [6, -25],\n            [25, -39]\n        ],\n        [\n            [5330, 4760],\n            [-22, 62]\n        ],\n        [\n            [5308, 4822],\n            [21, 33],\n            [-11, 39],\n            [10, 15],\n            [19, 7],\n            [2, 26],\n            [15, -28],\n            [24, -2],\n            [9, 27],\n            [3, 40],\n            [-3, 46],\n            [-13, 35],\n            [12, 68],\n            [-7, 12],\n            [-21, -5],\n            [-7, 31],\n            [2, 25]\n        ],\n        [\n            [2906, 5049],\n            [-12, 14],\n            [-14, 19],\n            [-7, -9],\n            [-24, 8],\n            [-7, 25],\n            [-5, -1],\n            [-28, 34]\n        ],\n        [\n            [2809, 5139],\n            [-3, 18],\n            [10, 5],\n            [-1, 29],\n            [6, 22],\n            [14, 4],\n            [12, 37],\n            [10, 31],\n            [-10, 14],\n            [5, 34],\n            [-6, 54],\n            [6, 16],\n            [-4, 50],\n            [-12, 31]\n        ],\n        [\n            [2836, 5484],\n            [4, 29],\n            [9, -4],\n            [5, 17],\n            [-6, 35],\n            [3, 9]\n        ],\n        [\n            [2851, 5570],\n            [14, -2],\n            [21, 41],\n            [12, 6],\n            [0, 20],\n            [5, 50],\n            [16, 27],\n            [17, 1],\n            [3, 13],\n            [21, -5],\n            [22, 30],\n            [11, 13],\n            [14, 28],\n            [9, -3],\n            [8, -16],\n            [-6, -20]\n        ],\n        [\n            [3018, 5753],\n            [-18, -10],\n            [-7, -29],\n            [-10, -17],\n            [-8, -22],\n            [-4, -42],\n            [-8, -35],\n            [15, -4],\n            [3, -27],\n            [6, -13],\n            [3, -24],\n            [-4, -22],\n            [1, -12],\n            [7, -5],\n            [7, -20],\n            [36, 5],\n            [16, -7],\n            [19, -51],\n            [11, 6],\n            [20, -3],\n            [16, 7],\n            [10, -10],\n            [-5, -32],\n            [-6, -20],\n            [-2, -42],\n            [5, -40],\n            [8, -17],\n            [1, -13],\n            [-14, -30],\n            [10, -13],\n            [8, -21],\n            [8, -58]\n        ],\n        [\n            [3058, 4804],\n            [-14, 31],\n            [-8, 1],\n            [18, 61],\n            [-21, 27],\n            [-17, -5],\n            [-10, 10],\n            [-15, -15],\n            [-21, 7],\n            [-16, 62],\n            [-13, 15],\n            [-9, 28],\n            [-19, 28],\n            [-7, -5]\n        ],\n        [\n            [2695, 5543],\n            [-15, 14],\n            [-6, 12],\n            [4, 10],\n            [-1, 13],\n            [-8, 14],\n            [-11, 12],\n            [-10, 8],\n            [-1, 17],\n            [-8, 10],\n            [2, -17],\n            [-5, -14],\n            [-7, 17],\n            [-9, 5],\n            [-4, 12],\n            [1, 18],\n            [3, 19],\n            [-8, 8],\n            [7, 12]\n        ],\n        [\n            [2619, 5713],\n            [4, 7],\n            [18, -15],\n            [7, 7],\n            [9, -5],\n            [4, -12],\n            [8, -4],\n            [7, 13]\n        ],\n        [\n            [2676, 5704],\n            [7, -32],\n            [11, -24],\n            [13, -25]\n        ],\n        [\n            [2707, 5623],\n            [-11, -6],\n            [0, -23],\n            [6, -9],\n            [-4, -7],\n            [1, -11],\n            [-2, -12],\n            [-2, -12]\n        ],\n        [\n            [2715, 6427],\n            [23, -4],\n            [22, 0],\n            [26, -21],\n            [11, -21],\n            [26, 6],\n            [10, -13],\n            [24, -37],\n            [17, -27],\n            [9, 1],\n            [17, -12],\n            [-2, -17],\n            [20, -2],\n            [21, -24],\n            [-3, -14],\n            [-19, -7],\n            [-18, -3],\n            [-19, 4],\n            [-40, -5],\n            [18, 32],\n            [-11, 16],\n            [-18, 4],\n            [-9, 17],\n            [-7, 33],\n            [-16, -2],\n            [-26, 16],\n            [-8, 12],\n            [-36, 10],\n            [-10, 11],\n            [11, 15],\n            [-28, 3],\n            [-20, -31],\n            [-11, -1],\n            [-4, -14],\n            [-14, -7],\n            [-12, 6],\n            [15, 18],\n            [6, 22],\n            [13, 13],\n            [14, 11],\n            [21, 6],\n            [7, 6]\n        ],\n        [\n            [5909, 7133],\n            [2, 1],\n            [4, 14],\n            [20, -1],\n            [25, 18],\n            [-19, -25],\n            [2, -11]\n        ],\n        [\n            [5943, 7129],\n            [-3, 2],\n            [-5, -5],\n            [-4, 1],\n            [-2, -2],\n            [0, 6],\n            [-2, 4],\n            [-6, 0],\n            [-7, -5],\n            [-5, 3]\n        ],\n        [\n            [5943, 7129],\n            [1, -5],\n            [-28, -24],\n            [-14, 8],\n            [-7, 23],\n            [14, 2]\n        ],\n        [\n            [5377, 7945],\n            [-16, 25],\n            [-14, 15],\n            [-3, 25],\n            [-5, 17],\n            [21, 13],\n            [10, 15],\n            [20, 11],\n            [7, 11],\n            [7, -6],\n            [13, 6]\n        ],\n        [\n            [5417, 8077],\n            [13, -19],\n            [21, -5],\n            [-2, -17],\n            [15, -12],\n            [4, 15],\n            [19, -6],\n            [3, -19],\n            [20, -3],\n            [13, -29]\n        ],\n        [\n            [5523, 7982],\n            [-8, 0],\n            [-4, -11],\n            [-7, -3],\n            [-2, -13],\n            [-5, -3],\n            [-1, -5],\n            [-9, -7],\n            [-12, 1],\n            [-4, -13]\n        ],\n        [\n            [5275, 8306],\n            [1, -23],\n            [28, -14],\n            [-1, -21],\n            [29, 11],\n            [15, 16],\n            [32, -23],\n            [13, -19]\n        ],\n        [\n            [5392, 8233],\n            [6, -30],\n            [-8, -16],\n            [11, -21],\n            [6, -31],\n            [-2, -21],\n            [12, -37]\n        ],\n        [\n            [5207, 7871],\n            [3, 42],\n            [14, 40],\n            [-40, 11],\n            [-13, 16]\n        ],\n        [\n            [5171, 7980],\n            [2, 26],\n            [-6, 13]\n        ],\n        [\n            [5171, 8059],\n            [-5, 62],\n            [17, 0],\n            [7, 22],\n            [6, 54],\n            [-5, 20]\n        ],\n        [\n            [5191, 8217],\n            [6, 13],\n            [23, 3],\n            [5, -13],\n            [19, 29],\n            [-6, 22],\n            [-2, 34]\n        ],\n        [\n            [5236, 8305],\n            [21, -8],\n            [18, 9]\n        ],\n        [\n            [6196, 5808],\n            [7, -19],\n            [-1, -24],\n            [-16, -14],\n            [12, -16]\n        ],\n        [\n            [6198, 5735],\n            [-10, -32]\n        ],\n        [\n            [6188, 5703],\n            [-7, 11],\n            [-6, -5],\n            [-16, 1],\n            [0, 18],\n            [-2, 17],\n            [9, 27],\n            [10, 26]\n        ],\n        [\n            [6176, 5798],\n            [12, -5],\n            [8, 15]\n        ],\n        [\n            [5352, 8343],\n            [-17, -48],\n            [-29, 33],\n            [-4, 25],\n            [41, 19],\n            [9, -29]\n        ],\n        [\n            [5236, 8305],\n            [-11, 32],\n            [-1, 61],\n            [5, 16],\n            [8, 17],\n            [24, 4],\n            [10, 16],\n            [22, 17],\n            [-1, -30],\n            [-8, -20],\n            [4, -16],\n            [15, -9],\n            [-7, -22],\n            [-8, 6],\n            [-20, -42],\n            [7, -29]\n        ],\n        [\n            [3008, 6222],\n            [3, 10],\n            [22, 0],\n            [16, -15],\n            [8, 1],\n            [5, -21],\n            [15, 1],\n            [-1, -17],\n            [12, -2],\n            [14, -22],\n            [-10, -24],\n            [-14, 13],\n            [-12, -3],\n            [-9, 3],\n            [-5, -11],\n            [-11, -3],\n            [-4, 14],\n            [-10, -8],\n            [-11, -41],\n            [-7, 10],\n            [-1, 17]\n        ],\n        [\n            [3008, 6124],\n            [0, 16],\n            [-7, 17],\n            [7, 10],\n            [2, 23],\n            [-2, 32]\n        ],\n        [\n            [5333, 6444],\n            [-95, -112],\n            [-81, -117],\n            [-39, -26]\n        ],\n        [\n            [5118, 6189],\n            [-31, -6],\n            [0, 38],\n            [-13, 10],\n            [-17, 16],\n            [-7, 28],\n            [-94, 129],\n            [-93, 129]\n        ],\n        [\n            [4863, 6533],\n            [-105, 143]\n        ],\n        [\n            [4758, 6676],\n            [1, 11],\n            [0, 4]\n        ],\n        [\n            [4759, 6691],\n            [0, 70],\n            [44, 44],\n            [28, 9],\n            [23, 16],\n            [11, 29],\n            [32, 24],\n            [1, 44],\n            [16, 5],\n            [13, 22],\n            [36, 9],\n            [5, 23],\n            [-7, 13],\n            [-10, 62],\n            [-1, 36],\n            [-11, 38]\n        ],\n        [\n            [4939, 7135],\n            [27, 32],\n            [30, 11],\n            [17, 24],\n            [27, 18],\n            [47, 11],\n            [46, 4],\n            [14, -8],\n            [26, 23],\n            [30, 0],\n            [11, -13],\n            [19, 3]\n        ],\n        [\n            [5233, 7240],\n            [-5, -30],\n            [4, -56],\n            [-6, -49],\n            [-18, -33],\n            [3, -45],\n            [23, -35],\n            [0, -14],\n            [17, -24],\n            [12, -106]\n        ],\n        [\n            [5263, 6848],\n            [9, -52],\n            [1, -28],\n            [-5, -48],\n            [2, -27],\n            [-3, -32],\n            [2, -37],\n            [-11, -25],\n            [17, -43],\n            [1, -25],\n            [10, -33],\n            [13, 11],\n            [22, -28],\n            [12, -37]\n        ],\n        [\n            [2769, 4856],\n            [15, 45],\n            [-6, 25],\n            [-11, -27],\n            [-16, 26],\n            [5, 16],\n            [-4, 54],\n            [9, 9],\n            [5, 37],\n            [11, 38],\n            [-2, 24],\n            [15, 13],\n            [19, 23]\n        ],\n        [\n            [2906, 5049],\n            [4, -45],\n            [-9, -39],\n            [-30, -62],\n            [-33, -23],\n            [-17, -51],\n            [-6, -40],\n            [-15, -24],\n            [-12, 29],\n            [-11, 7],\n            [-12, -5],\n            [-1, 22],\n            [8, 14],\n            [-3, 24]\n        ],\n        [\n            [5969, 6800],\n            [-7, -23],\n            [-6, -45],\n            [-8, -31],\n            [-6, -10],\n            [-10, 19],\n            [-12, 26],\n            [-20, 85],\n            [-3, -5],\n            [12, -63],\n            [17, -59],\n            [21, -92],\n            [10, -32],\n            [9, -34],\n            [25, -65],\n            [-6, -10],\n            [1, -39],\n            [33, -53],\n            [4, -12]\n        ],\n        [\n            [6023, 6357],\n            [-110, 0],\n            [-107, 0],\n            [-112, 0]\n        ],\n        [\n            [5694, 6357],\n            [0, 218],\n            [0, 210],\n            [-8, 47],\n            [7, 37],\n            [-5, 25],\n            [10, 29]\n        ],\n        [\n            [5698, 6923],\n            [37, 0],\n            [27, -15],\n            [28, -18],\n            [13, -9],\n            [21, 19],\n            [11, 17],\n            [25, 5],\n            [20, -8],\n            [7, -29],\n            [7, 19],\n            [22, -14],\n            [22, -3],\n            [13, 15]\n        ],\n        [\n            [5951, 6902],\n            [18, -102]\n        ],\n        [\n            [6176, 5798],\n            [-10, 20],\n            [-11, 34],\n            [-12, 19],\n            [-8, 21],\n            [-24, 23],\n            [-19, 1],\n            [-7, 12],\n            [-16, -14],\n            [-17, 27],\n            [-8, -44],\n            [-33, 13]\n        ],\n        [\n            [6011, 5910],\n            [-3, 23],\n            [12, 87],\n            [3, 39],\n            [9, 18],\n            [20, 10],\n            [14, 34]\n        ],\n        [\n            [6066, 6121],\n            [16, -69],\n            [8, -54],\n            [15, -29],\n            [38, -55],\n            [16, -34],\n            [15, -34],\n            [8, -20],\n            [14, -18]\n        ],\n        [\n            [4749, 7532],\n            [1, 42],\n            [-11, 25],\n            [39, 43],\n            [34, -11],\n            [37, 1],\n            [30, -10],\n            [23, 3],\n            [45, -2]\n        ],\n        [\n            [4947, 7623],\n            [11, -23],\n            [51, -27],\n            [10, 13],\n            [31, -27],\n            [32, 8]\n        ],\n        [\n            [5082, 7567],\n            [2, -35],\n            [-26, -39],\n            [-36, -12],\n            [-2, -20],\n            [-18, -33],\n            [-10, -48],\n            [11, -34],\n            [-16, -26],\n            [-6, -39],\n            [-21, -11],\n            [-20, -46],\n            [-35, -1],\n            [-27, 1],\n            [-17, -21],\n            [-11, -22],\n            [-13, 5],\n            [-11, 20],\n            [-8, 34],\n            [-26, 9]\n        ],\n        [\n            [4792, 7249],\n            [-2, 20],\n            [10, 22],\n            [4, 16],\n            [-9, 17],\n            [7, 39],\n            [-11, 36],\n            [12, 5],\n            [1, 27],\n            [5, 9],\n            [0, 46],\n            [13, 16],\n            [-8, 30],\n            [-16, 2],\n            [-5, -8],\n            [-16, 0],\n            [-7, 29],\n            [-11, -8],\n            [-10, -15]\n        ],\n        [\n            [5675, 8472],\n            [3, 35],\n            [-10, -8],\n            [-18, 21],\n            [-2, 34],\n            [35, 17],\n            [35, 8],\n            [30, -10],\n            [29, 2]\n        ],\n        [\n            [5777, 8571],\n            [4, -10],\n            [-20, -34],\n            [8, -55],\n            [-12, -19]\n        ],\n        [\n            [5757, 8453],\n            [-22, 0],\n            [-24, 22],\n            [-13, 7],\n            [-23, -10]\n        ],\n        [\n            [6188, 5703],\n            [-6, -21],\n            [10, -32],\n            [10, -29],\n            [11, -21],\n            [90, -70],\n            [24, 0]\n        ],\n        [\n            [6327, 5530],\n            [-79, -177],\n            [-36, -3],\n            [-25, -41],\n            [-17, -1],\n            [-8, -19]\n        ],\n        [\n            [6162, 5289],\n            [-19, 0],\n            [-11, 20],\n            [-26, -25],\n            [-8, -24],\n            [-18, 4],\n            [-6, 7],\n            [-7, -1],\n            [-9, 0],\n            [-35, 50],\n            [-19, 0],\n            [-10, 20],\n            [0, 33],\n            [-14, 10]\n        ],\n        [\n            [5980, 5383],\n            [-17, 64],\n            [-12, 14],\n            [-5, 23],\n            [-14, 29],\n            [-17, 4],\n            [9, 34],\n            [15, 2],\n            [4, 18]\n        ],\n        [\n            [5943, 5571],\n            [0, 53]\n        ],\n        [\n            [5943, 5624],\n            [8, 62],\n            [13, 16],\n            [3, 24],\n            [12, 45],\n            [17, 30],\n            [11, 58],\n            [4, 51]\n        ],\n        [\n            [5794, 9138],\n            [-4, -42],\n            [42, -39],\n            [-26, -45],\n            [33, -67],\n            [-19, -51],\n            [25, -43],\n            [-11, -39],\n            [41, -40],\n            [-11, -31],\n            [-25, -34],\n            [-60, -75]\n        ],\n        [\n            [5779, 8632],\n            [-50, -5],\n            [-49, -21],\n            [-45, -13],\n            [-16, 32],\n            [-27, 20],\n            [6, 58],\n            [-14, 53],\n            [14, 35],\n            [25, 37],\n            [63, 64],\n            [19, 12],\n            [-3, 25],\n            [-39, 28]\n        ],\n        [\n            [5663, 8957],\n            [-9, 23],\n            [-1, 91],\n            [-43, 40],\n            [-37, 29]\n        ],\n        [\n            [5573, 9140],\n            [17, 16],\n            [30, -32],\n            [37, 3],\n            [30, -14],\n            [26, 26],\n            [14, 44],\n            [43, 20],\n            [35, -24],\n            [-11, -41]\n        ],\n        [\n            [9954, 4033],\n            [9, -17],\n            [-4, -31],\n            [-17, -8],\n            [-16, 7],\n            [-2, 26],\n            [10, 21],\n            [13, -8],\n            [7, 10]\n        ],\n        [\n            [0, 4079],\n            [9981, -14],\n            [-17, -13],\n            [-4, 23],\n            [14, 12],\n            [9, 3],\n            [-9983, 18]\n        ],\n        [\n            [0, 4108],\n            [0, -29]\n        ],\n        [\n            [0, 4108],\n            [6, 3],\n            [-4, -28],\n            [-2, -4]\n        ],\n        [\n            [3300, 1994],\n            [33, 36],\n            [24, -15],\n            [16, 24],\n            [22, -27],\n            [-8, -21],\n            [-37, -17],\n            [-13, 20],\n            [-23, -26],\n            [-14, 26]\n        ],\n        [\n            [5265, 7548],\n            [-9, -46],\n            [-13, 12],\n            [-6, 40],\n            [5, 22],\n            [18, 22],\n            [5, -50]\n        ],\n        [\n            [5157, 7984],\n            [6, -6],\n            [8, 2]\n        ],\n        [\n            [5190, 7775],\n            [-2, -17],\n            [9, -22],\n            [-10, -18],\n            [7, -46],\n            [15, -8],\n            [-3, -25]\n        ],\n        [\n            [5206, 7639],\n            [-25, -34],\n            [-55, 16],\n            [-40, -19],\n            [-4, -35]\n        ],\n        [\n            [4947, 7623],\n            [14, 35],\n            [5, 118],\n            [-28, 62],\n            [-21, 30],\n            [-42, 23],\n            [-3, 43],\n            [36, 12],\n            [47, -15],\n            [-9, 67],\n            [26, -25],\n            [65, 46],\n            [8, 48],\n            [24, 12]\n        ],\n        [\n            [3485, 5194],\n            [7, 25],\n            [3, 27]\n        ],\n        [\n            [3495, 5246],\n            [4, 26],\n            [-10, 34]\n        ],\n        [\n            [3489, 5306],\n            [-3, 41],\n            [15, 51]\n        ],\n        [\n            [3501, 5398],\n            [9, -7],\n            [21, -14],\n            [29, -50],\n            [5, -24]\n        ],\n        [\n            [5308, 4822],\n            [-29, 60],\n            [-18, 49],\n            [-17, 61],\n            [1, 19],\n            [6, 19],\n            [7, 43],\n            [5, 44]\n        ],\n        [\n            [5263, 5117],\n            [10, 4],\n            [40, -1],\n            [0, 71]\n        ],\n        [\n            [4827, 8240],\n            [-21, 12],\n            [-17, -1],\n            [6, 32],\n            [-6, 32]\n        ],\n        [\n            [4789, 8315],\n            [23, 2],\n            [30, -37],\n            [-15, -40]\n        ],\n        [\n            [4916, 8521],\n            [-30, -63],\n            [29, 8],\n            [30, -1],\n            [-7, -48],\n            [-25, -53],\n            [29, -4],\n            [2, -6],\n            [25, -69],\n            [19, -10],\n            [17, -67],\n            [8, -24],\n            [33, -11],\n            [-3, -38],\n            [-14, -17],\n            [11, -30],\n            [-25, -31],\n            [-37, 0],\n            [-48, -16],\n            [-13, 12],\n            [-18, -28],\n            [-26, 7],\n            [-19, -23],\n            [-15, 12],\n            [41, 62],\n            [25, 13],\n            [-1, 0],\n            [-43, 9],\n            [-8, 24],\n            [29, 18],\n            [-15, 32],\n            [5, 39],\n            [42, -6],\n            [4, 35],\n            [-19, 36],\n            [0, 1],\n            [-34, 10],\n            [-7, 16],\n            [10, 27],\n            [-9, 16],\n            [-15, -28],\n            [-1, 57],\n            [-14, 30],\n            [10, 61],\n            [21, 48],\n            [23, -4],\n            [33, 4]\n        ],\n        [\n            [6154, 7511],\n            [4, 26],\n            [-7, 40],\n            [-16, 22],\n            [-16, 6],\n            [-10, 19]\n        ],\n        [\n            [6109, 7624],\n            [4, 6],\n            [23, -10],\n            [41, -9],\n            [38, -28],\n            [5, -11],\n            [17, 9],\n            [25, -13],\n            [9, -24],\n            [17, -13]\n        ],\n        [\n            [6210, 7485],\n            [-27, 29],\n            [-29, -3]\n        ],\n        [\n            [5029, 5408],\n            [-44, -35],\n            [-15, -20],\n            [-25, -17],\n            [-25, 17]\n        ],\n        [\n            [5000, 5708],\n            [-2, -18],\n            [12, -30],\n            [0, -43],\n            [2, -47],\n            [7, -21],\n            [-6, -54],\n            [2, -29],\n            [8, -37],\n            [6, -21]\n        ],\n        [\n            [4765, 5512],\n            [-8, 1],\n            [-5, -24],\n            [-8, 1],\n            [-6, 12],\n            [2, 24],\n            [-11, 36],\n            [-8, -7],\n            [-6, -1]\n        ],\n        [\n            [4715, 5554],\n            [-7, -3],\n            [0, 21],\n            [-4, 16],\n            [0, 17],\n            [-6, 25],\n            [-7, 21],\n            [-23, 0],\n            [-6, -11],\n            [-8, -1],\n            [-4, -13],\n            [-4, -17],\n            [-14, -26]\n        ],\n        [\n            [4632, 5583],\n            [-13, 35],\n            [-10, 24],\n            [-8, 7],\n            [-6, 12],\n            [-4, 26],\n            [-4, 13],\n            [-8, 10]\n        ],\n        [\n            [4579, 5710],\n            [13, 29],\n            [8, -2],\n            [7, 10],\n            [6, 0],\n            [5, 8],\n            [-3, 20],\n            [3, 6],\n            [1, 20]\n        ],\n        [\n            [4619, 5801],\n            [13, -1],\n            [20, -14],\n            [6, 1],\n            [3, 7],\n            [15, -5],\n            [4, 4]\n        ],\n        [\n            [4680, 5793],\n            [1, -22],\n            [5, 0],\n            [7, 8],\n            [5, -2],\n            [7, -15],\n            [12, -5],\n            [8, 13],\n            [9, 8],\n            [6, 8],\n            [6, -1],\n            [6, -13],\n            [3, -17],\n            [12, -24],\n            [-6, -16],\n            [-1, -19],\n            [6, 6],\n            [3, -7],\n            [-1, -17],\n            [8, -18]\n        ],\n        [\n            [4532, 5834],\n            [3, 27]\n        ],\n        [\n            [4535, 5861],\n            [31, 1],\n            [6, 14],\n            [9, 1],\n            [11, -14],\n            [8, -1],\n            [9, 10],\n            [6, -17],\n            [-12, -13],\n            [-12, 1],\n            [-12, 13],\n            [-10, -14],\n            [-5, -1],\n            [-7, -8],\n            [-25, 1]\n        ],\n        [\n            [4579, 5710],\n            [-15, 24],\n            [-11, 4],\n            [-7, 17],\n            [1, 9],\n            [-9, 13],\n            [-2, 12]\n        ],\n        [\n            [4536, 5789],\n            [15, 10],\n            [9, -2],\n            [8, 7],\n            [51, -3]\n        ],\n        [\n            [5263, 5117],\n            [-5, 9],\n            [10, 66]\n        ],\n        [\n            [5658, 7167],\n            [15, -20],\n            [22, 3],\n            [20, -4],\n            [0, -10],\n            [15, 7],\n            [-4, -18],\n            [-40, -5],\n            [1, 10],\n            [-34, 12],\n            [5, 25]\n        ],\n        [\n            [5723, 7469],\n            [-17, 2],\n            [-14, 6],\n            [-34, -16],\n            [19, -33],\n            [-14, -10],\n            [-15, 0],\n            [-15, 31],\n            [-5, -13],\n            [6, -36],\n            [14, -27],\n            [-10, -13],\n            [15, -27],\n            [14, -18],\n            [0, -33],\n            [-25, 16],\n            [8, -30],\n            [-18, -7],\n            [11, -52],\n            [-19, -1],\n            [-23, 26],\n            [-10, 47],\n            [-5, 40],\n            [-11, 27],\n            [-14, 34],\n            [-2, 16]\n        ],\n        [\n            [5583, 7470],\n            [18, 6],\n            [11, 13],\n            [15, -2],\n            [5, 11],\n            [5, 2]\n        ],\n        [\n            [5725, 7529],\n            [13, -16],\n            [-8, -37],\n            [-7, -7]\n        ],\n        [\n            [3701, 9939],\n            [93, 35],\n            [97, -2],\n            [36, 21],\n            [98, 6],\n            [222, -7],\n            [174, -47],\n            [-52, -23],\n            [-106, -3],\n            [-150, -5],\n            [14, -11],\n            [99, 7],\n            [83, -21],\n            [54, 18],\n            [23, -21],\n            [-30, -34],\n            [71, 22],\n            [135, 23],\n            [83, -12],\n            [15, -25],\n            [-113, -42],\n            [-16, -14],\n            [-88, -10],\n            [64, -3],\n            [-32, -43],\n            [-23, -38],\n            [1, -66],\n            [33, -38],\n            [-43, -3],\n            [-46, -19],\n            [52, -31],\n            [6, -50],\n            [-30, -6],\n            [36, -50],\n            [-61, -5],\n            [32, -24],\n            [-9, -20],\n            [-39, -10],\n            [-39, 0],\n            [35, -40],\n            [0, -26],\n            [-55, 24],\n            [-14, -15],\n            [37, -15],\n            [37, -36],\n            [10, -48],\n            [-49, -11],\n            [-22, 22],\n            [-34, 34],\n            [10, -40],\n            [-33, -31],\n            [73, -2],\n            [39, -3],\n            [-75, -52],\n            [-75, -46],\n            [-81, -21],\n            [-31, 0],\n            [-29, -23],\n            [-38, -62],\n            [-60, -42],\n            [-19, -2],\n            [-37, -15],\n            [-40, -13],\n            [-24, -37],\n            [0, -41],\n            [-15, -39],\n            [-45, -47],\n            [11, -47],\n            [-12, -48],\n            [-14, -58],\n            [-39, -4],\n            [-41, 49],\n            [-56, 0],\n            [-27, 32],\n            [-18, 58],\n            [-49, 73],\n            [-14, 39],\n            [-3, 53],\n            [-39, 54],\n            [10, 44],\n            [-18, 21],\n            [27, 69],\n            [42, 22],\n            [11, 25],\n            [6, 46],\n            [-32, -21],\n            [-15, -9],\n            [-25, -8],\n            [-34, 19],\n            [-2, 40],\n            [11, 31],\n            [25, 1],\n            [57, -15],\n            [-48, 37],\n            [-24, 20],\n            [-28, -8],\n            [-23, 15],\n            [31, 55],\n            [-17, 22],\n            [-22, 41],\n            [-34, 62],\n            [-35, 23],\n            [0, 25],\n            [-74, 34],\n            [-59, 5],\n            [-74, -3],\n            [-68, -4],\n            [-32, 19],\n            [-49, 37],\n            [73, 19],\n            [56, 3],\n            [-119, 15],\n            [-62, 24],\n            [3, 23],\n            [106, 28],\n            [101, 29],\n            [11, 21],\n            [-75, 22],\n            [24, 23],\n            [97, 41],\n            [40, 7],\n            [-12, 26],\n            [66, 16],\n            [86, 9],\n            [85, 1],\n            [30, -19],\n            [74, 33],\n            [66, -22],\n            [39, -5],\n            [58, -19],\n            [-66, 32],\n            [4, 25]\n        ],\n        [\n            [2497, 5869],\n            [-14, 10],\n            [-17, 1],\n            [-13, 12],\n            [-15, 24]\n        ],\n        [\n            [2438, 5916],\n            [1, 18],\n            [3, 13],\n            [-4, 12],\n            [13, 48],\n            [36, 0],\n            [1, 20],\n            [-5, 4],\n            [-3, 12],\n            [-10, 14],\n            [-11, 20],\n            [13, 0],\n            [0, 33],\n            [26, 0],\n            [26, 0]\n        ],\n        [\n            [2529, 5996],\n            [10, -11],\n            [2, 9],\n            [8, -7]\n        ],\n        [\n            [2549, 5987],\n            [-13, -23],\n            [-13, -16],\n            [-2, -12],\n            [2, -11],\n            [-5, -15]\n        ],\n        [\n            [2518, 5910],\n            [-7, -4],\n            [2, -7],\n            [-6, -6],\n            [-9, -15],\n            [-1, -9]\n        ],\n        [\n            [3340, 5552],\n            [18, -22],\n            [17, -38],\n            [1, -31],\n            [10, -1],\n            [15, -29],\n            [11, -21]\n        ],\n        [\n            [3412, 5410],\n            [-4, -53],\n            [-17, -15],\n            [1, -14],\n            [-5, -31],\n            [13, -42],\n            [9, -1],\n            [3, -33],\n            [17, -51]\n        ],\n        [\n            [3313, 5365],\n            [-19, 45],\n            [7, 16],\n            [0, 27],\n            [17, 10],\n            [7, 11],\n            [-10, 22],\n            [3, 21],\n            [22, 35]\n        ],\n        [\n            [2574, 5825],\n            [-5, 18],\n            [-8, 5]\n        ],\n        [\n            [2561, 5848],\n            [2, 24],\n            [-4, 6],\n            [-6, 4],\n            [-12, -7],\n            [-1, 8],\n            [-8, 10],\n            [-6, 12],\n            [-8, 5]\n        ],\n        [\n            [2549, 5987],\n            [3, -3],\n            [6, 11],\n            [8, 1],\n            [3, -5],\n            [4, 3],\n            [13, -6],\n            [13, 2],\n            [9, 6],\n            [3, 7],\n            [9, -3],\n            [6, -4],\n            [8, 1],\n            [5, 5],\n            [13, -8],\n            [4, -1],\n            [9, -11],\n            [8, -13],\n            [10, -9],\n            [7, -17]\n        ],\n        [\n            [2690, 5943],\n            [-9, 2],\n            [-4, -8],\n            [-10, -8],\n            [-7, 0],\n            [-6, -8],\n            [-6, 3],\n            [-4, 9],\n            [-3, -2],\n            [-4, -14],\n            [-3, 1],\n            [0, -12],\n            [-10, -17],\n            [-5, -7],\n            [-3, -7],\n            [-8, 12],\n            [-6, -16],\n            [-6, 1],\n            [-6, -2],\n            [0, -29],\n            [-4, 0],\n            [-3, -14],\n            [-9, -2]\n        ],\n        [\n            [5522, 7770],\n            [7, -23],\n            [9, -17],\n            [-11, -22]\n        ],\n        [\n            [5515, 7577],\n            [-3, -10]\n        ],\n        [\n            [5512, 7567],\n            [-26, 22],\n            [-16, 21],\n            [-26, 18],\n            [-23, 43],\n            [6, 5],\n            [-13, 25],\n            [-1, 19],\n            [-17, 10],\n            [-9, -26],\n            [-8, 20],\n            [0, 21],\n            [1, 1]\n        ],\n        [\n            [5380, 7746],\n            [20, -2],\n            [5, 9],\n            [9, -9],\n            [11, -1],\n            [0, 16],\n            [10, 6],\n            [2, 24],\n            [23, 16]\n        ],\n        [\n            [5460, 7805],\n            [8, -7],\n            [21, -26],\n            [23, -11],\n            [10, 9]\n        ],\n        [\n            [3008, 6124],\n            [-19, 10],\n            [-13, -5],\n            [-17, 5],\n            [-13, -11],\n            [-15, 18],\n            [3, 19],\n            [25, -8],\n            [21, -5],\n            [10, 13],\n            [-12, 26],\n            [0, 23],\n            [-18, 9],\n            [7, 16],\n            [17, -3],\n            [24, -9]\n        ],\n        [\n            [5471, 7900],\n            [14, -15],\n            [10, -6],\n            [24, 7],\n            [2, 12],\n            [11, 2],\n            [14, 9],\n            [3, -4],\n            [13, 8],\n            [6, 13],\n            [9, 4],\n            [30, -18],\n            [6, 6]\n        ],\n        [\n            [5613, 7918],\n            [15, -16],\n            [2, -16]\n        ],\n        [\n            [5630, 7886],\n            [-17, -12],\n            [-13, -40],\n            [-17, -40],\n            [-22, -11]\n        ],\n        [\n            [5561, 7783],\n            [-17, 2],\n            [-22, -15]\n        ],\n        [\n            [5460, 7805],\n            [-6, 20],\n            [-4, 0]\n        ],\n        [\n            [8352, 4453],\n            [-11, -2],\n            [-37, 42],\n            [26, 11],\n            [14, -18],\n            [10, -17],\n            [-2, -16]\n        ],\n        [\n            [8471, 4532],\n            [2, -11],\n            [1, -18]\n        ],\n        [\n            [8474, 4503],\n            [-18, -45],\n            [-24, -13],\n            [-3, 8],\n            [2, 20],\n            [12, 36],\n            [28, 23]\n        ],\n        [\n            [8274, 4579],\n            [10, -16],\n            [17, 5],\n            [7, -25],\n            [-32, -12],\n            [-19, -8],\n            [-15, 1],\n            [10, 34],\n            [15, 0],\n            [7, 21]\n        ],\n        [\n            [8413, 4579],\n            [-4, -32],\n            [-42, -17],\n            [-37, 7],\n            [0, 22],\n            [22, 12],\n            [18, -18],\n            [18, 5],\n            [25, 21]\n        ],\n        [\n            [8017, 4657],\n            [53, -6],\n            [6, 25],\n            [51, -29],\n            [10, -38],\n            [42, -11],\n            [34, -35],\n            [-31, -23],\n            [-31, 24],\n            [-25, -1],\n            [-29, 4],\n            [-26, 11],\n            [-32, 22],\n            [-21, 6],\n            [-11, -7],\n            [-51, 24],\n            [-5, 25],\n            [-25, 5],\n            [19, 56],\n            [34, -3],\n            [22, -23],\n            [12, -5],\n            [4, -21]\n        ],\n        [\n            [8741, 4690],\n            [-14, -40],\n            [-3, 45],\n            [5, 21],\n            [6, 20],\n            [7, -17],\n            [-1, -29]\n        ],\n        [\n            [8534, 4853],\n            [-11, -19],\n            [-19, 10],\n            [-5, 26],\n            [28, 3],\n            [7, -20]\n        ],\n        [\n            [8623, 4875],\n            [10, -45],\n            [-23, 24],\n            [-23, 5],\n            [-16, -4],\n            [-19, 2],\n            [6, 33],\n            [35, 2],\n            [30, -17]\n        ],\n        [\n            [8916, 4904],\n            [0, -193],\n            [1, -192]\n        ],\n        [\n            [8917, 4519],\n            [-25, 48],\n            [-28, 12],\n            [-7, -17],\n            [-35, -1],\n            [12, 48],\n            [17, 16],\n            [-7, 64],\n            [-14, 50],\n            [-53, 50],\n            [-23, 5],\n            [-42, 54],\n            [-8, -28],\n            [-11, -5],\n            [-6, 21],\n            [0, 26],\n            [-21, 29],\n            [29, 21],\n            [20, -1],\n            [-2, 16],\n            [-41, 0],\n            [-11, 35],\n            [-25, 11],\n            [-11, 29],\n            [37, 14],\n            [14, 20],\n            [45, -25],\n            [4, -22],\n            [8, -95],\n            [29, -35],\n            [23, 62],\n            [32, 36],\n            [25, 0],\n            [23, -21],\n            [21, -21],\n            [30, -11]\n        ],\n        [\n            [8478, 5141],\n            [-22, -58],\n            [-21, -12],\n            [-27, 12],\n            [-46, -3],\n            [-24, -8],\n            [-4, -45],\n            [24, -53],\n            [15, 27],\n            [52, 20],\n            [-2, -27],\n            [-12, 9],\n            [-12, -35],\n            [-25, -23],\n            [27, -76],\n            [-5, -20],\n            [25, -68],\n            [-1, -39],\n            [-14, -17],\n            [-11, 20],\n            [13, 49],\n            [-27, -23],\n            [-7, 16],\n            [3, 23],\n            [-20, 35],\n            [3, 57],\n            [-19, -18],\n            [2, -69],\n            [1, -84],\n            [-17, -9],\n            [-12, 18],\n            [8, 54],\n            [-4, 57],\n            [-12, 1],\n            [-9, 40],\n            [12, 39],\n            [4, 47],\n            [14, 89],\n            [5, 24],\n            [24, 44],\n            [22, -18],\n            [35, -8],\n            [32, 3],\n            [27, 43],\n            [5, -14]\n        ],\n        [\n            [8574, 5124],\n            [-2, -51],\n            [-14, 6],\n            [-4, -36],\n            [11, -32],\n            [-8, -7],\n            [-11, 38],\n            [-8, 75],\n            [6, 47],\n            [9, 22],\n            [2, -32],\n            [16, -5],\n            [3, -25]\n        ],\n        [\n            [8045, 5176],\n            [5, -39],\n            [19, -34],\n            [18, 12],\n            [18, -4],\n            [16, 30],\n            [13, 5],\n            [26, -17],\n            [23, 13],\n            [14, 82],\n            [11, 21],\n            [10, 67],\n            [32, 0],\n            [24, -10]\n        ],\n        [\n            [8274, 5302],\n            [-16, -53],\n            [20, -56],\n            [-5, -28],\n            [32, -54],\n            [-33, -7],\n            [-10, -40],\n            [2, -54],\n            [-27, -40],\n            [-1, -59],\n            [-10, -91],\n            [-5, 21],\n            [-31, -26],\n            [-11, 36],\n            [-20, 3],\n            [-14, 19],\n            [-33, -21],\n            [-10, 29],\n            [-18, -4],\n            [-23, 7],\n            [-4, 79],\n            [-14, 17],\n            [-13, 50],\n            [-4, 52],\n            [3, 55],\n            [16, 39]\n        ],\n        [\n            [7939, 4712],\n            [-31, -1],\n            [-24, 49],\n            [-35, 48],\n            [-12, 36],\n            [-21, 48],\n            [-14, 44],\n            [-21, 83],\n            [-24, 49],\n            [-9, 51],\n            [-10, 46],\n            [-25, 37],\n            [-14, 51],\n            [-21, 33],\n            [-29, 65],\n            [-3, 30],\n            [18, -2],\n            [43, -12],\n            [25, -57],\n            [21, -40],\n            [16, -25],\n            [26, -63],\n            [28, -1],\n            [23, -41],\n            [16, -49],\n            [22, -27],\n            [-12, -49],\n            [16, -20],\n            [10, -2],\n            [5, -41],\n            [10, -33],\n            [20, -5],\n            [14, -37],\n            [-7, -74],\n            [-1, -91]\n        ],\n        [\n            [7252, 6841],\n            [-17, -27],\n            [-11, -55],\n            [27, -23],\n            [26, -29],\n            [36, -33],\n            [38, -8],\n            [16, -30],\n            [22, -5],\n            [33, -14],\n            [23, 1],\n            [4, 23],\n            [-4, 38],\n            [2, 25]\n        ],\n        [\n            [7703, 6727],\n            [2, -22],\n            [-10, -11],\n            [2, -36],\n            [-19, 10],\n            [-36, -41],\n            [0, -33],\n            [-15, -50],\n            [-1, -29],\n            [-13, -48],\n            [-21, 13],\n            [-1, -61],\n            [-7, -20],\n            [3, -25],\n            [-14, -14]\n        ],\n        [\n            [7472, 6360],\n            [-4, -21],\n            [-19, 1],\n            [-34, -13],\n            [2, -44],\n            [-15, -35],\n            [-40, -40],\n            [-31, -69],\n            [-21, -38],\n            [-28, -38],\n            [0, -27],\n            [-13, -15],\n            [-26, -21],\n            [-12, -3],\n            [-9, -45],\n            [6, -77],\n            [1, -49],\n            [-11, -56],\n            [0, -101],\n            [-15, -2],\n            [-12, -46],\n            [8, -19],\n            [-25, -17],\n            [-10, -40],\n            [-11, -17],\n            [-26, 55],\n            [-13, 83],\n            [-11, 60],\n            [-9, 28],\n            [-15, 56],\n            [-7, 74],\n            [-5, 37],\n            [-25, 81],\n            [-12, 115],\n            [-8, 75],\n            [0, 72],\n            [-5, 55],\n            [-41, -35],\n            [-19, 7],\n            [-36, 71],\n            [13, 22],\n            [-8, 23],\n            [-33, 50]\n        ],\n        [\n            [6893, 6457],\n            [19, 40],\n            [61, -1],\n            [-6, 51],\n            [-15, 30],\n            [-4, 46],\n            [-18, 26],\n            [31, 62],\n            [32, -4],\n            [29, 61],\n            [18, 60],\n            [27, 60],\n            [-1, 42],\n            [24, 34],\n            [-23, 29],\n            [-9, 40],\n            [-10, 52],\n            [14, 25],\n            [42, -14],\n            [31, 9],\n            [26, 49]\n        ],\n        [\n            [4827, 8240],\n            [5, -42],\n            [-21, -53],\n            [-49, -35],\n            [-40, 9],\n            [23, 62],\n            [-15, 60],\n            [38, 46],\n            [21, 28]\n        ],\n        [\n            [6497, 7255],\n            [25, 12],\n            [19, 33],\n            [19, -1],\n            [12, 11],\n            [20, -6],\n            [31, -30],\n            [22, -6],\n            [31, -53],\n            [21, -2],\n            [3, -49]\n        ],\n        [\n            [6690, 6820],\n            [14, -31],\n            [11, -36],\n            [27, -26],\n            [1, -52],\n            [13, -10],\n            [2, -27],\n            [-40, -30],\n            [-10, -69]\n        ],\n        [\n            [6708, 6539],\n            [-53, 18],\n            [-30, 13],\n            [-31, 8],\n            [-12, 73],\n            [-13, 10],\n            [-22, -11],\n            [-28, -28],\n            [-34, 20],\n            [-28, 45],\n            [-27, 17],\n            [-18, 56],\n            [-21, 79],\n            [-15, -10],\n            [-17, 20],\n            [-11, -24]\n        ],\n        [\n            [6348, 6825],\n            [-15, 32],\n            [0, 31],\n            [-9, 0],\n            [5, 43],\n            [-15, 45],\n            [-34, 32],\n            [-19, 56],\n            [6, 46],\n            [14, 21],\n            [-2, 34],\n            [-18, 18],\n            [-18, 70]\n        ],\n        [\n            [6243, 7253],\n            [-15, 48],\n            [5, 18],\n            [-8, 68],\n            [19, 17]\n        ],\n        [\n            [6357, 7321],\n            [9, -43],\n            [26, -13],\n            [20, -29],\n            [39, -10],\n            [44, 15],\n            [2, 14]\n        ],\n        [\n            [6348, 6825],\n            [-16, 3]\n        ],\n        [\n            [6332, 6828],\n            [-19, 5],\n            [-20, -56]\n        ],\n        [\n            [6293, 6777],\n            [-52, 4],\n            [-78, 119],\n            [-41, 41],\n            [-34, 16]\n        ],\n        [\n            [6088, 6957],\n            [-11, 72]\n        ],\n        [\n            [6077, 7029],\n            [61, 62],\n            [11, 71],\n            [-3, 43],\n            [16, 15],\n            [14, 37]\n        ],\n        [\n            [6176, 7257],\n            [12, 9],\n            [32, -8],\n            [10, -15],\n            [13, 10]\n        ],\n        [\n            [4597, 8984],\n            [-7, -39],\n            [31, -40],\n            [-36, -45],\n            [-80, -41],\n            [-24, -10],\n            [-36, 8],\n            [-78, 19],\n            [28, 26],\n            [-61, 29],\n            [49, 12],\n            [-1, 17],\n            [-58, 14],\n            [19, 38],\n            [42, 9],\n            [43, -40],\n            [42, 32],\n            [35, -17],\n            [45, 32],\n            [47, -4]\n        ],\n        [\n            [5992, 6990],\n            [-5, -19]\n        ],\n        [\n            [5987, 6971],\n            [-10, 8],\n            [-6, -39],\n            [7, -7],\n            [-7, -8],\n            [-1, -15],\n            [13, 8]\n        ],\n        [\n            [5983, 6918],\n            [0, -23],\n            [-14, -95]\n        ],\n        [\n            [5951, 6902],\n            [8, 19],\n            [-2, 4],\n            [8, 27],\n            [5, 45],\n            [4, 15],\n            [1, 0]\n        ],\n        [\n            [5975, 7012],\n            [9, 0],\n            [3, 11],\n            [7, 0]\n        ],\n        [\n            [5994, 7023],\n            [1, -24],\n            [-4, -9],\n            [1, 0]\n        ],\n        [\n            [5431, 7316],\n            [-10, -46],\n            [4, -19],\n            [-6, -30],\n            [-21, 22],\n            [-14, 7],\n            [-39, 30],\n            [4, 30],\n            [32, -6],\n            [28, 7],\n            [22, 5]\n        ],\n        [\n            [5255, 7492],\n            [17, -42],\n            [-4, -78],\n            [-13, 4],\n            [-11, -20],\n            [-10, 16],\n            [-2, 71],\n            [-6, 34],\n            [15, -3],\n            [14, 18]\n        ],\n        [\n            [5383, 7805],\n            [-3, -29],\n            [7, -25]\n        ],\n        [\n            [5387, 7751],\n            [-22, 8],\n            [-23, -20],\n            [1, -30],\n            [-3, -17],\n            [9, -30],\n            [26, -29],\n            [14, -49],\n            [31, -48],\n            [22, 0],\n            [7, -13],\n            [-8, -11],\n            [25, -22],\n            [20, -18],\n            [24, -30],\n            [3, -11],\n            [-5, -22],\n            [-16, 28],\n            [-24, 10],\n            [-12, -39],\n            [20, -21],\n            [-3, -31],\n            [-11, -4],\n            [-15, -50],\n            [-12, -5],\n            [0, 18],\n            [6, 32],\n            [6, 12],\n            [-11, 35],\n            [-8, 29],\n            [-12, 8],\n            [-8, 25],\n            [-18, 11],\n            [-12, 24],\n            [-21, 4],\n            [-21, 26],\n            [-26, 39],\n            [-19, 34],\n            [-8, 58],\n            [-14, 7],\n            [-23, 20],\n            [-12, -8],\n            [-16, -28],\n            [-12, -4]\n        ],\n        [\n            [2845, 6150],\n            [19, -5],\n            [14, -15],\n            [5, -16],\n            [-19, -1],\n            [-9, -10],\n            [-15, 10],\n            [-16, 21],\n            [3, 14],\n            [12, 4],\n            [6, -2]\n        ],\n        [\n            [5992, 6990],\n            [31, -24],\n            [54, 63]\n        ],\n        [\n            [6088, 6957],\n            [-5, -8],\n            [-56, -30],\n            [28, -59],\n            [-9, -10],\n            [-5, -20],\n            [-21, -8],\n            [-7, -21],\n            [-12, -19],\n            [-31, 10]\n        ],\n        [\n            [5970, 6792],\n            [-1, 8]\n        ],\n        [\n            [5983, 6918],\n            [4, 17],\n            [0, 36]\n        ],\n        [\n            [8739, 7075],\n            [4, -20],\n            [-16, -36],\n            [-11, 19],\n            [-15, -14],\n            [-7, -34],\n            [-18, 16],\n            [0, 28],\n            [15, 36],\n            [16, -7],\n            [12, 25],\n            [20, -13]\n        ],\n        [\n            [8915, 7252],\n            [-10, -47],\n            [4, -30],\n            [-14, -42],\n            [-35, -27],\n            [-49, -4],\n            [-40, -67],\n            [-19, 22],\n            [-1, 44],\n            [-48, -13],\n            [-33, -27],\n            [-32, -2],\n            [28, -43],\n            [-19, -101],\n            [-18, -24],\n            [-13, 23],\n            [7, 53],\n            [-18, 17],\n            [-11, 41],\n            [26, 18],\n            [15, 37],\n            [28, 30],\n            [20, 41],\n            [55, 17],\n            [30, -12],\n            [29, 105],\n            [19, -28],\n            [40, 59],\n            [16, 23],\n            [18, 72],\n            [-5, 67],\n            [11, 37],\n            [30, 11],\n            [15, -82],\n            [-1, -48],\n            [-25, -59],\n            [0, -61]\n        ],\n        [\n            [8997, 7667],\n            [19, -12],\n            [20, 25],\n            [6, -67],\n            [-41, -16],\n            [-25, -59],\n            [-43, 41],\n            [-15, -65],\n            [-31, -1],\n            [-4, 59],\n            [14, 46],\n            [29, 3],\n            [8, 82],\n            [9, 46],\n            [32, -62],\n            [22, -20]\n        ],\n        [\n            [6970, 7554],\n            [-15, -10],\n            [-37, -42],\n            [-12, -42],\n            [-11, 0],\n            [-7, 28],\n            [-36, 2],\n            [-5, 48],\n            [-14, 0],\n            [2, 60],\n            [-33, 43],\n            [-48, -5],\n            [-32, -8],\n            [-27, 53],\n            [-22, 22],\n            [-43, 43],\n            [-6, 5],\n            [-71, -35],\n            [1, -218]\n        ],\n        [\n            [6554, 7498],\n            [-14, -3],\n            [-20, 46],\n            [-18, 17],\n            [-32, -12],\n            [-12, -20]\n        ],\n        [\n            [6458, 7526],\n            [-2, 14],\n            [7, 25],\n            [-5, 21],\n            [-32, 20],\n            [-13, 53],\n            [-15, 15],\n            [-1, 19],\n            [27, -6],\n            [1, 44],\n            [23, 9],\n            [25, -9],\n            [5, 58],\n            [-5, 36],\n            [-28, -2],\n            [-24, 14],\n            [-32, -26],\n            [-26, -12]\n        ],\n        [\n            [6363, 7799],\n            [-14, 9],\n            [3, 31],\n            [-18, 39],\n            [-20, -2],\n            [-24, 40],\n            [16, 45],\n            [-8, 12],\n            [22, 65],\n            [29, -34],\n            [3, 43],\n            [58, 64],\n            [43, 2],\n            [61, -41],\n            [33, -24],\n            [30, 25],\n            [44, 1],\n            [35, -30],\n            [8, 17],\n            [39, -2],\n            [7, 28],\n            [-45, 40],\n            [27, 29],\n            [-5, 16],\n            [26, 15],\n            [-20, 41],\n            [13, 20],\n            [104, 21],\n            [13, 14],\n            [70, 22],\n            [25, 24],\n            [50, -12],\n            [9, -61],\n            [29, 14],\n            [35, -20],\n            [-2, -32],\n            [27, 3],\n            [69, 56],\n            [-10, -19],\n            [35, -46],\n            [62, -150],\n            [15, 31],\n            [39, -34],\n            [39, 16],\n            [16, -11],\n            [13, -34],\n            [20, -12],\n            [11, -25],\n            [36, 8],\n            [15, -36]\n        ],\n        [\n            [7229, 7559],\n            [-17, 9],\n            [-14, 21],\n            [-42, 6],\n            [-46, 2],\n            [-10, -6],\n            [-39, 24],\n            [-16, -12],\n            [-4, -35],\n            [-46, 21],\n            [-18, -9],\n            [-7, -26]\n        ],\n        [\n            [6155, 4958],\n            [-20, -24],\n            [-7, -24],\n            [-10, -4],\n            [-4, -42],\n            [-9, -24],\n            [-5, -39],\n            [-12, -20]\n        ],\n        [\n            [6088, 4781],\n            [-40, 59],\n            [-1, 35],\n            [-101, 120],\n            [-5, 6]\n        ],\n        [\n            [5941, 5001],\n            [0, 63],\n            [8, 24],\n            [14, 39],\n            [10, 43],\n            [-13, 68],\n            [-3, 30],\n            [-13, 41]\n        ],\n        [\n            [5944, 5309],\n            [17, 35],\n            [19, 39]\n        ],\n        [\n            [6162, 5289],\n            [-24, -67],\n            [0, -215],\n            [17, -49]\n        ],\n        [\n            [7046, 7387],\n            [-53, -9],\n            [-34, 19],\n            [-30, -4],\n            [3, 34],\n            [30, -10],\n            [10, 18]\n        ],\n        [\n            [6972, 7435],\n            [21, -6],\n            [36, 43],\n            [-33, 31],\n            [-20, -15],\n            [-21, 22],\n            [24, 39],\n            [-9, 5]\n        ],\n        [\n            [7849, 5777],\n            [-7, 72],\n            [18, 49],\n            [36, 11],\n            [26, -8]\n        ],\n        [\n            [7922, 5901],\n            [23, -23],\n            [12, 40],\n            [25, -21]\n        ],\n        [\n            [7982, 5897],\n            [6, -40],\n            [-3, -71],\n            [-47, -45],\n            [13, -36],\n            [-30, -4],\n            [-24, -24]\n        ],\n        [\n            [7897, 5677],\n            [-23, 9],\n            [-11, 30],\n            [-14, 61]\n        ],\n        [\n            [8564, 7339],\n            [24, -70],\n            [7, -38],\n            [0, -68],\n            [-10, -33],\n            [-25, -11],\n            [-22, -25],\n            [-25, -5],\n            [-3, 32],\n            [5, 45],\n            [-13, 61],\n            [21, 10],\n            [-19, 51]\n        ],\n        [\n            [8504, 7288],\n            [2, 5],\n            [12, -2],\n            [11, 27],\n            [20, 2],\n            [11, 4],\n            [4, 15]\n        ],\n        [\n            [5557, 7574],\n            [5, 13]\n        ],\n        [\n            [5562, 7587],\n            [7, 4],\n            [4, 20],\n            [5, 3],\n            [4, -8],\n            [5, -4],\n            [3, -10],\n            [5, -2],\n            [5, -11],\n            [4, 0],\n            [-3, -14],\n            [-3, -7],\n            [1, -5]\n        ],\n        [\n            [5599, 7553],\n            [-6, -2],\n            [-17, -9],\n            [-1, -12],\n            [-4, 0]\n        ],\n        [\n            [6332, 6828],\n            [6, -26],\n            [-3, -13],\n            [9, -45]\n        ],\n        [\n            [6344, 6744],\n            [-19, -1],\n            [-7, 28],\n            [-25, 6]\n        ],\n        [\n            [7922, 5901],\n            [9, 26],\n            [1, 50],\n            [-22, 52],\n            [-2, 58],\n            [-21, 48],\n            [-21, 4],\n            [-6, -20],\n            [-16, -2],\n            [-8, 10],\n            [-30, -35],\n            [0, 53],\n            [7, 62],\n            [-19, 3],\n            [-2, 36],\n            [-12, 18]\n        ],\n        [\n            [7780, 6264],\n            [6, 21],\n            [24, 39]\n        ],\n        [\n            [7837, 6385],\n            [17, -47],\n            [12, -54],\n            [34, 0],\n            [11, -52],\n            [-18, -15],\n            [-8, -21],\n            [34, -36],\n            [23, -70],\n            [17, -52],\n            [21, -41],\n            [7, -41],\n            [-5, -59]\n        ],\n        [\n            [5975, 7012],\n            [10, 49],\n            [14, 41],\n            [0, 2]\n        ],\n        [\n            [5999, 7104],\n            [13, -3],\n            [4, -23],\n            [-15, -22],\n            [-7, -33]\n        ],\n        [\n            [4785, 5315],\n            [-7, 0],\n            [-29, 28],\n            [-25, 45],\n            [-24, 32],\n            [-18, 38]\n        ],\n        [\n            [4682, 5458],\n            [6, 19],\n            [2, 17],\n            [12, 33],\n            [13, 27]\n        ],\n        [\n            [5412, 6408],\n            [-20, -22],\n            [-15, 33],\n            [-44, 25]\n        ],\n        [\n            [5263, 6848],\n            [13, 14],\n            [3, 25],\n            [-3, 24],\n            [19, 23],\n            [8, 19],\n            [14, 17],\n            [2, 45]\n        ],\n        [\n            [5319, 7015],\n            [32, -20],\n            [12, 5],\n            [23, -10],\n            [37, -26],\n            [13, -53],\n            [25, -11],\n            [39, -25],\n            [30, -29],\n            [13, 15],\n            [13, 27],\n            [-6, 45],\n            [9, 29],\n            [20, 28],\n            [19, 8],\n            [37, -12],\n            [10, -27],\n            [10, 0],\n            [9, -10],\n            [28, -7],\n            [6, -19]\n        ],\n        [\n            [5694, 6357],\n            [0, -118],\n            [-32, 0],\n            [0, -25]\n        ],\n        [\n            [5662, 6214],\n            [-111, 113],\n            [-111, 113],\n            [-28, -32]\n        ],\n        [\n            [7271, 5502],\n            [-4, -62],\n            [-12, -16],\n            [-24, -14],\n            [-13, 47],\n            [-5, 85],\n            [13, 96],\n            [19, -33],\n            [13, -42],\n            [13, -61]\n        ],\n        [\n            [5804, 3347],\n            [10, -18],\n            [-9, -29],\n            [-4, -19],\n            [-16, -9],\n            [-5, -19],\n            [-10, -6],\n            [-21, 46],\n            [15, 37],\n            [15, 23],\n            [13, 12],\n            [12, -18]\n        ],\n        [\n            [5631, 8267],\n            [-2, 15],\n            [3, 16],\n            [-13, 10],\n            [-29, 10]\n        ],\n        [\n            [5590, 8318],\n            [-6, 50]\n        ],\n        [\n            [5584, 8368],\n            [32, 18],\n            [47, -4],\n            [27, 6],\n            [4, -12],\n            [15, -4],\n            [26, -29]\n        ],\n        [\n            [5652, 8242],\n            [-7, 19],\n            [-14, 6]\n        ],\n        [\n            [5584, 8368],\n            [1, 44],\n            [14, 37],\n            [26, 20],\n            [22, -44],\n            [22, 1],\n            [6, 46]\n        ],\n        [\n            [5757, 8453],\n            [14, -14],\n            [2, -28],\n            [9, -35]\n        ],\n        [\n            [4759, 6691],\n            [-4, 0],\n            [0, -31],\n            [-17, -2],\n            [-9, -14],\n            [-13, 0],\n            [-10, 8],\n            [-23, -6],\n            [-9, -46],\n            [-9, -5],\n            [-13, -74],\n            [-38, -64],\n            [-9, -81],\n            [-12, -27],\n            [-3, -21],\n            [-63, -5]\n        ],\n        [\n            [4527, 6323],\n            [1, 27],\n            [11, 17],\n            [9, 30],\n            [-2, 20],\n            [10, 42],\n            [15, 38],\n            [9, 9],\n            [8, 35],\n            [0, 31],\n            [10, 37],\n            [19, 21],\n            [18, 60],\n            [0, 1],\n            [14, 23],\n            [26, 6],\n            [22, 41],\n            [14, 16],\n            [23, 49],\n            [-7, 73],\n            [10, 51],\n            [4, 31],\n            [18, 40],\n            [28, 27],\n            [21, 25],\n            [18, 61],\n            [9, 36],\n            [20, 0],\n            [17, -25],\n            [26, 4],\n            [29, -13],\n            [12, -1]\n        ],\n        [\n            [5739, 7906],\n            [6, 9],\n            [19, 6],\n            [20, -19],\n            [12, -2],\n            [12, -16],\n            [-2, -20],\n            [11, -9],\n            [4, -25],\n            [9, -15],\n            [-2, -9],\n            [5, -6],\n            [-7, -4],\n            [-16, 1],\n            [-3, 9],\n            [-6, -5],\n            [2, -11],\n            [-7, -19],\n            [-5, -20],\n            [-7, -6]\n        ],\n        [\n            [5784, 7745],\n            [-5, 27],\n            [3, 25],\n            [-1, 26],\n            [-16, 35],\n            [-9, 25],\n            [-9, 17],\n            [-8, 6]\n        ],\n        [\n            [6376, 4321],\n            [7, -25],\n            [7, -39],\n            [4, -71],\n            [7, -28],\n            [-2, -28],\n            [-5, -18],\n            [-10, 35],\n            [-5, -18],\n            [5, -43],\n            [-2, -25],\n            [-8, -14],\n            [-1, -50],\n            [-11, -69],\n            [-14, -81],\n            [-17, -112],\n            [-11, -82],\n            [-12, -69],\n            [-23, -14],\n            [-24, -25],\n            [-16, 15],\n            [-22, 21],\n            [-8, 31],\n            [-2, 53],\n            [-10, 47],\n            [-2, 42],\n            [5, 43],\n            [13, 10],\n            [0, 20],\n            [13, 45],\n            [2, 37],\n            [-6, 28],\n            [-5, 38],\n            [-2, 54],\n            [9, 33],\n            [4, 38],\n            [14, 2],\n            [15, 12],\n            [11, 10],\n            [12, 1],\n            [16, 34],\n            [23, 36],\n            [8, 30],\n            [-4, 25],\n            [12, -7],\n            [15, 41],\n            [1, 36],\n            [9, 26],\n            [10, -25]\n        ],\n        [\n            [2301, 6586],\n            [-10, -52],\n            [-5, -43],\n            [-2, -79],\n            [-3, -29],\n            [5, -32],\n            [9, -29],\n            [5, -45],\n            [19, -44],\n            [6, -34],\n            [11, -29],\n            [29, -16],\n            [12, -25],\n            [24, 17],\n            [21, 6],\n            [21, 11],\n            [18, 10],\n            [17, 24],\n            [7, 34],\n            [2, 50],\n            [5, 17],\n            [19, 16],\n            [29, 13],\n            [25, -2],\n            [17, 5],\n            [6, -12],\n            [-1, -29],\n            [-15, -35],\n            [-6, -36],\n            [5, -10],\n            [-4, -26],\n            [-7, -46],\n            [-7, 15],\n            [-6, -1]\n        ],\n        [\n            [2438, 5916],\n            [-32, 64],\n            [-14, 19],\n            [-23, 16],\n            [-15, -5],\n            [-22, -22],\n            [-14, -6],\n            [-20, 16],\n            [-21, 11],\n            [-26, 27],\n            [-21, 8],\n            [-31, 28],\n            [-23, 28],\n            [-7, 16],\n            [-16, 3],\n            [-28, 19],\n            [-12, 27],\n            [-30, 34],\n            [-14, 37],\n            [-6, 29],\n            [9, 5],\n            [-3, 17],\n            [7, 16],\n            [0, 20],\n            [-10, 27],\n            [-2, 23],\n            [-9, 30],\n            [-25, 59],\n            [-28, 46],\n            [-13, 37],\n            [-24, 24],\n            [-5, 14],\n            [4, 37],\n            [-14, 13],\n            [-17, 29],\n            [-7, 41],\n            [-14, 5],\n            [-17, 31],\n            [-13, 29],\n            [-1, 19],\n            [-15, 44],\n            [-10, 45],\n            [1, 23],\n            [-20, 23],\n            [-10, -2],\n            [-15, 16],\n            [-5, -24],\n            [5, -28],\n            [2, -45],\n            [10, -24],\n            [21, -41],\n            [4, -14],\n            [4, -4],\n            [4, -20],\n            [5, 1],\n            [6, -38],\n            [8, -15],\n            [6, -21],\n            [17, -30],\n            [10, -55],\n            [8, -26],\n            [8, -28],\n            [1, -31],\n            [13, -2],\n            [12, -27],\n            [10, -26],\n            [-1, -11],\n            [-12, -21],\n            [-5, 0],\n            [-7, 36],\n            [-18, 33],\n            [-20, 29],\n            [-14, 15],\n            [1, 43],\n            [-5, 32],\n            [-13, 19],\n            [-19, 26],\n            [-4, -8],\n            [-7, 16],\n            [-17, 14],\n            [-16, 34],\n            [2, 5],\n            [11, -4],\n            [11, 22],\n            [1, 27],\n            [-22, 42],\n            [-16, 17],\n            [-10, 36],\n            [-11, 39],\n            [-12, 47],\n            [-12, 54]\n        ],\n        [\n            [1746, 6980],\n            [32, 4],\n            [35, 7],\n            [-2, -12],\n            [41, -29],\n            [64, -41],\n            [55, 0],\n            [22, 0],\n            [0, 24],\n            [48, 0],\n            [10, -20],\n            [15, -19],\n            [16, -26],\n            [9, -31],\n            [7, -32],\n            [15, -18],\n            [23, -18],\n            [17, 47],\n            [23, 1],\n            [19, -24],\n            [14, -40],\n            [10, -35],\n            [16, -34],\n            [6, -41],\n            [8, -28],\n            [22, -18],\n            [20, -13],\n            [10, 2]\n        ],\n        [\n            [5599, 7553],\n            [9, 4],\n            [13, 1]\n        ],\n        [\n            [4661, 5921],\n            [10, 11],\n            [4, 35],\n            [9, 1],\n            [20, -16],\n            [15, 11],\n            [11, -4],\n            [4, 13],\n            [112, 1],\n            [6, 42],\n            [-5, 7],\n            [-13, 255],\n            [-14, 255],\n            [43, 1]\n        ],\n        [\n            [5118, 6189],\n            [0, -136],\n            [-15, -39],\n            [-2, -37],\n            [-25, -9],\n            [-38, -5],\n            [-10, -21],\n            [-18, -3]\n        ],\n        [\n            [4680, 5793],\n            [1, 18],\n            [-2, 23],\n            [-11, 16],\n            [-5, 34],\n            [-2, 37]\n        ],\n        [\n            [7737, 5644],\n            [-3, 44],\n            [9, 45],\n            [-10, 35],\n            [3, 65],\n            [-12, 30],\n            [-9, 71],\n            [-5, 75],\n            [-12, 49],\n            [-18, -30],\n            [-32, -42],\n            [-15, 5],\n            [-17, 14],\n            [9, 73],\n            [-6, 56],\n            [-21, 68],\n            [3, 21],\n            [-16, 7],\n            [-20, 49]\n        ],\n        [\n            [7780, 6264],\n            [-16, -14],\n            [-16, -26],\n            [-20, -2],\n            [-12, -64],\n            [-12, -11],\n            [14, -52],\n            [17, -43],\n            [12, -39],\n            [-11, -51],\n            [-9, -11],\n            [6, -30],\n            [19, -47],\n            [3, -33],\n            [0, -27],\n            [11, -54],\n            [-16, -55],\n            [-13, -61]\n        ],\n        [\n            [5538, 7532],\n            [-6, 4],\n            [-8, 19],\n            [-12, 12]\n        ],\n        [\n            [5533, 7629],\n            [8, -10],\n            [4, -9],\n            [9, -6],\n            [10, -12],\n            [-2, -5]\n        ],\n        [\n            [7437, 7970],\n            [29, 10],\n            [53, 51],\n            [42, 28],\n            [24, -18],\n            [29, -1],\n            [19, -28],\n            [28, -2],\n            [40, -15],\n            [27, 41],\n            [-11, 35],\n            [28, 61],\n            [31, -24],\n            [26, -7],\n            [32, -15],\n            [6, -44],\n            [39, -25],\n            [26, 11],\n            [36, 7],\n            [27, -7],\n            [28, -29],\n            [16, -30],\n            [26, 1],\n            [35, -10],\n            [26, 15],\n            [36, 9],\n            [41, 42],\n            [17, -6],\n            [14, -20],\n            [33, 5]\n        ],\n        [\n            [5959, 4377],\n            [21, 5],\n            [34, -17],\n            [7, 8],\n            [19, 1],\n            [10, 18],\n            [17, -1],\n            [30, 23],\n            [22, 34]\n        ],\n        [\n            [6119, 4448],\n            [5, -26],\n            [-1, -59],\n            [3, -52],\n            [1, -92],\n            [5, -29],\n            [-8, -43],\n            [-11, -41],\n            [-18, -36],\n            [-25, -23],\n            [-31, -28],\n            [-32, -64],\n            [-10, -11],\n            [-20, -42],\n            [-11, -13],\n            [-3, -42],\n            [14, -45],\n            [5, -35],\n            [0, -17],\n            [5, 3],\n            [-1, -58],\n            [-4, -28],\n            [6, -10],\n            [-4, -25],\n            [-11, -21],\n            [-23, -20],\n            [-34, -32],\n            [-12, -21],\n            [3, -25],\n            [7, -4],\n            [-3, -31]\n        ],\n        [\n            [5911, 3478],\n            [-21, 0]\n        ],\n        [\n            [5890, 3478],\n            [-2, 26],\n            [-4, 27]\n        ],\n        [\n            [5884, 3531],\n            [-3, 21],\n            [5, 66],\n            [-7, 42],\n            [-13, 83]\n        ],\n        [\n            [5866, 3743],\n            [29, 67],\n            [7, 43],\n            [5, 5],\n            [3, 35],\n            [-5, 17],\n            [1, 44],\n            [6, 41],\n            [0, 75],\n            [-15, 19],\n            [-13, 4],\n            [-6, 15],\n            [-13, 12],\n            [-23, -1],\n            [-2, 22]\n        ],\n        [\n            [5840, 4141],\n            [-2, 42],\n            [84, 49]\n        ],\n        [\n            [5922, 4232],\n            [16, -28],\n            [8, 5],\n            [11, -15],\n            [1, -23],\n            [-6, -28],\n            [2, -42],\n            [19, -36],\n            [8, 41],\n            [12, 12],\n            [-2, 76],\n            [-12, 43],\n            [-10, 19],\n            [-10, -1],\n            [-7, 77],\n            [7, 45]\n        ],\n        [\n            [4661, 5921],\n            [-18, 41],\n            [-17, 43],\n            [-18, 16],\n            [-13, 17],\n            [-16, -1],\n            [-13, -12],\n            [-14, 5],\n            [-10, -19]\n        ],\n        [\n            [4542, 6011],\n            [-2, 32],\n            [8, 29],\n            [3, 55],\n            [-3, 59],\n            [-3, 29],\n            [2, 30],\n            [-7, 28],\n            [-14, 25]\n        ],\n        [\n            [4526, 6298],\n            [6, 20],\n            [108, -1],\n            [-5, 86],\n            [7, 30],\n            [26, 5],\n            [-1, 152],\n            [91, -4],\n            [0, 90]\n        ],\n        [\n            [5922, 4232],\n            [-15, 15],\n            [9, 55],\n            [9, 21],\n            [-6, 49],\n            [6, 48],\n            [5, 16],\n            [-7, 50],\n            [-14, 26]\n        ],\n        [\n            [5909, 4512],\n            [28, -11],\n            [5, -16],\n            [10, -28],\n            [7, -80]\n        ],\n        [\n            [7836, 5425],\n            [7, -5],\n            [16, -36],\n            [12, -40],\n            [2, -39],\n            [-3, -27],\n            [2, -21],\n            [2, -35],\n            [10, -16],\n            [11, -52],\n            [-1, -20],\n            [-19, -4],\n            [-27, 44],\n            [-32, 47],\n            [-4, 30],\n            [-16, 39],\n            [-4, 49],\n            [-10, 32],\n            [4, 43],\n            [-7, 25]\n        ],\n        [\n            [7779, 5439],\n            [5, 11],\n            [23, -26],\n            [2, -30],\n            [18, 7],\n            [9, 24]\n        ],\n        [\n            [8045, 5176],\n            [21, -20],\n            [21, 11],\n            [6, 50],\n            [12, 11],\n            [33, 13],\n            [20, 47],\n            [14, 37]\n        ],\n        [\n            [8206, 5379],\n            [22, 41],\n            [14, 47],\n            [11, 0],\n            [14, -30],\n            [1, -26],\n            [19, -16],\n            [23, -18],\n            [-2, -23],\n            [-19, -3],\n            [5, -29],\n            [-20, -20]\n        ],\n        [\n            [5453, 3369],\n            [-20, 45],\n            [-11, 43],\n            [-6, 58],\n            [-7, 42],\n            [-9, 91],\n            [-1, 71],\n            [-3, 32],\n            [-11, 25],\n            [-15, 48],\n            [-14, 71],\n            [-6, 37],\n            [-23, 58],\n            [-2, 45]\n        ],\n        [\n            [5644, 4022],\n            [23, 14],\n            [18, -4],\n            [11, -13],\n            [0, -5]\n        ],\n        [\n            [5552, 3594],\n            [0, -218],\n            [-25, -30],\n            [-15, -4],\n            [-17, 11],\n            [-13, 4],\n            [-4, 25],\n            [-11, 17],\n            [-14, -30]\n        ],\n        [\n            [9604, 3812],\n            [23, -36],\n            [14, -28],\n            [-10, -14],\n            [-16, 16],\n            [-19, 27],\n            [-18, 31],\n            [-19, 42],\n            [-4, 20],\n            [12, -1],\n            [16, -20],\n            [12, -20],\n            [9, -17]\n        ],\n        [\n            [5412, 6408],\n            [7, -92],\n            [10, -15],\n            [1, -19],\n            [11, -20],\n            [-6, -25],\n            [-11, -120],\n            [-1, -77],\n            [-35, -56],\n            [-12, -78],\n            [11, -22],\n            [0, -38],\n            [18, -1],\n            [-3, -28]\n        ],\n        [\n            [5393, 5795],\n            [-5, -1],\n            [-19, 64],\n            [-6, 3],\n            [-22, -33],\n            [-21, 17],\n            [-15, 3],\n            [-8, -8],\n            [-17, 2],\n            [-16, -25],\n            [-14, -2],\n            [-34, 31],\n            [-13, -15],\n            [-14, 1],\n            [-10, 23],\n            [-28, 22],\n            [-30, -7],\n            [-7, -13],\n            [-4, -34],\n            [-8, -24],\n            [-2, -53]\n        ],\n        [\n            [5236, 5339],\n            [-29, -21],\n            [-11, 3],\n            [-10, -13],\n            [-23, 1],\n            [-15, 37],\n            [-9, 43],\n            [-19, 39],\n            [-21, -1],\n            [-25, 0]\n        ],\n        [\n            [2619, 5713],\n            [-10, 18],\n            [-13, 24],\n            [-6, 20],\n            [-12, 19],\n            [-13, 26],\n            [3, 9],\n            [4, -9],\n            [2, 5]\n        ],\n        [\n            [2690, 5943],\n            [-2, -5],\n            [-2, -13],\n            [3, -22],\n            [-6, -20],\n            [-3, -24],\n            [-1, -26],\n            [1, -15],\n            [1, -27],\n            [-4, -6],\n            [-3, -25],\n            [2, -15],\n            [-6, -16],\n            [2, -16],\n            [4, -9]\n        ],\n        [\n            [5092, 8091],\n            [14, 16],\n            [24, 87],\n            [38, 25],\n            [23, -2]\n        ],\n        [\n            [5863, 9167],\n            [-47, -24],\n            [-22, -5]\n        ],\n        [\n            [5573, 9140],\n            [-17, -2],\n            [-4, -39],\n            [-53, 9],\n            [-7, -33],\n            [-27, 1],\n            [-18, -42],\n            [-28, -66],\n            [-43, -83],\n            [10, -20],\n            [-10, -24],\n            [-27, 1],\n            [-18, -55],\n            [2, -79],\n            [17, -29],\n            [-9, -70],\n            [-23, -40],\n            [-12, -34]\n        ],\n        [\n            [5306, 8535],\n            [-19, 36],\n            [-55, -69],\n            [-37, -13],\n            [-38, 30],\n            [-10, 63],\n            [-9, 137],\n            [26, 38],\n            [73, 49],\n            [55, 61],\n            [51, 82],\n            [66, 115],\n            [47, 44],\n            [76, 74],\n            [61, 26],\n            [46, -3],\n            [42, 49],\n            [51, -3],\n            [50, 12],\n            [87, -43],\n            [-36, -16],\n            [30, -37]\n        ],\n        [\n            [5686, 9657],\n            [-62, -24],\n            [-49, 13],\n            [19, 16],\n            [-16, 19],\n            [57, 11],\n            [11, -22],\n            [40, -13]\n        ],\n        [\n            [5506, 9766],\n            [92, -44],\n            [-70, -23],\n            [-15, -44],\n            [-25, -11],\n            [-13, -49],\n            [-34, -2],\n            [-59, 36],\n            [25, 21],\n            [-42, 17],\n            [-54, 50],\n            [-21, 46],\n            [75, 21],\n            [16, -20],\n            [39, 0],\n            [11, 21],\n            [40, 2],\n            [35, -21]\n        ],\n        [\n            [5706, 9808],\n            [55, -21],\n            [-41, -32],\n            [-81, -7],\n            [-82, 10],\n            [-5, 16],\n            [-40, 1],\n            [-30, 27],\n            [86, 17],\n            [40, -14],\n            [28, 17],\n            [70, -14]\n        ],\n        [\n            [9805, 2640],\n            [6, -24],\n            [20, 24],\n            [8, -25],\n            [0, -25],\n            [-10, -27],\n            [-18, -44],\n            [-14, -24],\n            [10, -28],\n            [-22, -1],\n            [-23, -22],\n            [-8, -39],\n            [-16, -60],\n            [-21, -26],\n            [-14, -17],\n            [-26, 1],\n            [-18, 20],\n            [-30, 4],\n            [-5, 22],\n            [15, 43],\n            [35, 59],\n            [18, 11],\n            [20, 22],\n            [24, 31],\n            [16, 31],\n            [13, 44],\n            [10, 15],\n            [5, 33],\n            [19, 27],\n            [6, -25]\n        ],\n        [\n            [9849, 2922],\n            [20, -63],\n            [1, 41],\n            [13, -16],\n            [4, -45],\n            [22, -19],\n            [19, -5],\n            [16, 22],\n            [14, -6],\n            [-7, -53],\n            [-8, -34],\n            [-22, 1],\n            [-7, -18],\n            [3, -25],\n            [-4, -11],\n            [-11, -32],\n            [-14, -41],\n            [-21, -23],\n            [-5, 15],\n            [-12, 9],\n            [16, 48],\n            [-9, 33],\n            [-30, 23],\n            [1, 22],\n            [20, 20],\n            [5, 46],\n            [-1, 38],\n            [-12, 40],\n            [1, 10],\n            [-13, 25],\n            [-22, 52],\n            [-12, 42],\n            [11, 4],\n            [15, -33],\n            [21, -15],\n            [8, -52]\n        ],\n        [\n            [6475, 6041],\n            [-9, 41],\n            [-22, 98]\n        ],\n        [\n            [6444, 6180],\n            [83, 59],\n            [19, 118],\n            [-13, 42]\n        ],\n        [\n            [6566, 6530],\n            [12, -40],\n            [16, -22],\n            [20, -8],\n            [17, -10],\n            [12, -34],\n            [8, -20],\n            [10, -7],\n            [0, -13],\n            [-10, -36],\n            [-5, -16],\n            [-12, -19],\n            [-10, -41],\n            [-13, 3],\n            [-5, -14],\n            [-5, -30],\n            [4, -39],\n            [-3, -7],\n            [-13, 0],\n            [-17, -22],\n            [-3, -29],\n            [-6, -12],\n            [-18, 0],\n            [-10, -15],\n            [0, -24],\n            [-14, -16],\n            [-15, 5],\n            [-19, -19],\n            [-12, -4]\n        ],\n        [\n            [6557, 6597],\n            [8, 20],\n            [3, -5],\n            [-2, -25],\n            [-4, -10]\n        ],\n        [\n            [6893, 6457],\n            [-20, 15],\n            [-9, 43],\n            [-21, 45],\n            [-51, -12],\n            [-45, -1],\n            [-39, -8]\n        ],\n        [\n            [2836, 5484],\n            [-9, 17],\n            [-6, 32],\n            [7, 16],\n            [-7, 4],\n            [-5, 20],\n            [-14, 16],\n            [-12, -4],\n            [-6, -20],\n            [-11, -15],\n            [-6, -2],\n            [-3, -13],\n            [13, -32],\n            [-7, -7],\n            [-4, -9],\n            [-13, -3],\n            [-5, 35],\n            [-4, -10],\n            [-9, 4],\n            [-5, 24],\n            [-12, 3],\n            [-7, 7],\n            [-12, 0],\n            [-1, -13],\n            [-3, 9]\n        ],\n        [\n            [2707, 5623],\n            [10, -22],\n            [-1, -12],\n            [11, -3],\n            [3, 5],\n            [8, -14],\n            [13, 4],\n            [12, 15],\n            [17, 12],\n            [9, 17],\n            [16, -3],\n            [-1, -6],\n            [15, -2],\n            [12, -10],\n            [10, -18],\n            [10, -16]\n        ],\n        [\n            [3045, 3974],\n            [-28, 33],\n            [-2, 25],\n            [-55, 59],\n            [-50, 65],\n            [-22, 36],\n            [-11, 49],\n            [4, 17],\n            [-23, 77],\n            [-28, 109],\n            [-26, 118],\n            [-11, 27],\n            [-9, 43],\n            [-21, 39],\n            [-20, 24],\n            [9, 26],\n            [-14, 57],\n            [9, 41],\n            [22, 37]\n        ],\n        [\n            [8510, 5555],\n            [2, -40],\n            [2, -33],\n            [-9, -54],\n            [-11, 60],\n            [-13, -30],\n            [9, -43],\n            [-8, -28],\n            [-32, 35],\n            [-8, 42],\n            [8, 28],\n            [-17, 28],\n            [-9, -24],\n            [-13, 2],\n            [-21, -33],\n            [-4, 17],\n            [11, 50],\n            [17, 17],\n            [15, 22],\n            [10, -27],\n            [21, 17],\n            [5, 26],\n            [19, 1],\n            [-1, 46],\n            [22, -28],\n            [3, -30],\n            [2, -21]\n        ],\n        [\n            [8443, 5665],\n            [-10, -20],\n            [-9, -37],\n            [-8, -17],\n            [-17, 40],\n            [5, 16],\n            [7, 17],\n            [3, 36],\n            [16, 4],\n            [-5, -40],\n            [21, 57],\n            [-3, -56]\n        ],\n        [\n            [8291, 5608],\n            [-37, -56],\n            [14, 41],\n            [20, 37],\n            [16, 41],\n            [15, 58],\n            [5, -48],\n            [-18, -33],\n            [-15, -40]\n        ],\n        [\n            [8385, 5760],\n            [16, -18],\n            [18, 0],\n            [0, -25],\n            [-13, -25],\n            [-18, -18],\n            [-1, 28],\n            [2, 30],\n            [-4, 28]\n        ],\n        [\n            [8485, 5776],\n            [8, -66],\n            [-21, 16],\n            [0, -20],\n            [7, -37],\n            [-13, -13],\n            [-1, 42],\n            [-9, 3],\n            [-4, 36],\n            [16, -5],\n            [0, 22],\n            [-17, 45],\n            [27, -1],\n            [7, -22]\n        ],\n        [\n            [8375, 5830],\n            [-7, -51],\n            [-12, 29],\n            [-15, 45],\n            [24, -2],\n            [10, -21]\n        ],\n        [\n            [8369, 6151],\n            [17, -17],\n            [9, 15],\n            [2, -15],\n            [-4, -24],\n            [9, -43],\n            [-7, -49],\n            [-16, -19],\n            [-5, -48],\n            [7, -47],\n            [14, -7],\n            [13, 7],\n            [34, -32],\n            [-2, -32],\n            [9, -15],\n            [-3, -27],\n            [-22, 29],\n            [-10, 31],\n            [-7, -22],\n            [-18, 36],\n            [-25, -9],\n            [-14, 13],\n            [1, 25],\n            [9, 15],\n            [-8, 13],\n            [-4, -21],\n            [-14, 34],\n            [-4, 26],\n            [-1, 56],\n            [11, -19],\n            [3, 92],\n            [9, 54],\n            [17, 0]\n        ],\n        [\n            [9329, 4655],\n            [-8, -6],\n            [-12, 22],\n            [-12, 38],\n            [-6, 45],\n            [4, 6],\n            [3, -18],\n            [8, -13],\n            [14, -38],\n            [13, -20],\n            [-4, -16]\n        ],\n        [\n            [9221, 4734],\n            [-15, -5],\n            [-4, -17],\n            [-15, -14],\n            [-15, -14],\n            [-14, 0],\n            [-23, 18],\n            [-16, 16],\n            [2, 18],\n            [25, -8],\n            [15, 4],\n            [5, 29],\n            [4, 1],\n            [2, -31],\n            [16, 4],\n            [8, 20],\n            [16, 21],\n            [-4, 35],\n            [17, 1],\n            [6, -9],\n            [-1, -33],\n            [-9, -36]\n        ],\n        [\n            [8916, 4904],\n            [48, -41],\n            [51, -34],\n            [19, -30],\n            [16, -30],\n            [4, -34],\n            [46, -37],\n            [7, -31],\n            [-25, -7],\n            [6, -39],\n            [25, -39],\n            [18, -62],\n            [15, 2],\n            [-1, -27],\n            [22, -10],\n            [-9, -11],\n            [30, -25],\n            [-3, -17],\n            [-18, -4],\n            [-7, 16],\n            [-24, 6],\n            [-28, 9],\n            [-22, 38],\n            [-16, 32],\n            [-14, 52],\n            [-36, 26],\n            [-24, -17],\n            [-17, -20],\n            [4, -43],\n            [-22, -20],\n            [-16, 9],\n            [-28, 3]\n        ],\n        [\n            [9253, 4792],\n            [-9, -16],\n            [-5, 35],\n            [-6, 23],\n            [-13, 19],\n            [-16, 25],\n            [-20, 18],\n            [8, 14],\n            [15, -17],\n            [9, -13],\n            [12, -14],\n            [11, -25],\n            [11, -19],\n            [3, -30]\n        ],\n        [\n            [5392, 8233],\n            [19, 18],\n            [43, 27],\n            [35, 20],\n            [28, -10],\n            [2, -14],\n            [27, -1]\n        ],\n        [\n            [5546, 8273],\n            [34, -7],\n            [51, 1]\n        ],\n        [\n            [5653, 8105],\n            [14, -52],\n            [-3, -17],\n            [-14, -6],\n            [-25, -50],\n            [7, -26],\n            [-6, 3]\n        ],\n        [\n            [5626, 7957],\n            [-26, 23],\n            [-20, -8],\n            [-13, 6],\n            [-17, -13],\n            [-14, 21],\n            [-11, -8],\n            [-2, 4]\n        ],\n        [\n            [3159, 6151],\n            [14, -5],\n            [5, -12],\n            [-7, -15],\n            [-21, 1],\n            [-17, -2],\n            [-1, 25],\n            [4, 9],\n            [23, -1]\n        ],\n        [\n            [8628, 7562],\n            [4, -10]\n        ],\n        [\n            [8632, 7552],\n            [-11, 3],\n            [-12, -20],\n            [-8, -20],\n            [1, -42],\n            [-14, -13],\n            [-5, -11],\n            [-11, -17],\n            [-18, -10],\n            [-12, -16],\n            [-1, -25],\n            [-3, -7],\n            [11, -9],\n            [15, -26]\n        ],\n        [\n            [8504, 7288],\n            [-13, 11],\n            [-4, -11],\n            [-8, -5],\n            [-1, 11],\n            [-7, 5],\n            [-8, 10],\n            [8, 26],\n            [7, 7],\n            [-3, 11],\n            [7, 31],\n            [-2, 10],\n            [-16, 7],\n            [-13, 15]\n        ],\n        [\n            [4792, 7249],\n            [-11, -15],\n            [-14, 8],\n            [-15, -6],\n            [5, 46],\n            [-3, 36],\n            [-12, 6],\n            [-7, 22],\n            [2, 39],\n            [11, 21],\n            [2, 24],\n            [6, 36],\n            [-1, 25],\n            [-5, 21],\n            [-1, 20]\n        ],\n        [\n            [6411, 6520],\n            [-2, 43],\n            [7, 31],\n            [8, 6],\n            [8, -18],\n            [1, -35],\n            [-6, -35]\n        ],\n        [\n            [6427, 6512],\n            [-8, -4],\n            [-8, 12]\n        ],\n        [\n            [5630, 7886],\n            [12, 13],\n            [17, -7],\n            [18, 0],\n            [13, -14],\n            [10, 9],\n            [20, 5],\n            [7, 14],\n            [12, 0]\n        ],\n        [\n            [5784, 7745],\n            [12, -11],\n            [13, 9],\n            [13, -10]\n        ],\n        [\n            [5822, 7733],\n            [0, -15],\n            [-13, -13],\n            [-9, 6],\n            [-7, -71]\n        ],\n        [\n            [5629, 7671],\n            [-5, 10],\n            [6, 10],\n            [-7, 7],\n            [-8, -13],\n            [-17, 17],\n            [-2, 25],\n            [-17, 14],\n            [-3, 18],\n            [-15, 24]\n        ],\n        [\n            [8989, 8056],\n            [28, -105],\n            [-41, 19],\n            [-17, -85],\n            [27, -61],\n            [-1, -41],\n            [-21, 36],\n            [-18, -46],\n            [-5, 50],\n            [3, 57],\n            [-3, 64],\n            [6, 45],\n            [2, 79],\n            [-17, 58],\n            [3, 80],\n            [25, 28],\n            [-11, 27],\n            [13, 8],\n            [7, -39],\n            [10, -57],\n            [-1, -58],\n            [11, -59]\n        ],\n        [\n            [5546, 8273],\n            [6, 26],\n            [38, 19]\n        ],\n        [\n            [0, 9132],\n            [68, -45],\n            [73, -59],\n            [-3, -37],\n            [19, -15],\n            [-6, 43],\n            [75, -8],\n            [55, -56],\n            [-28, -26],\n            [-46, -6],\n            [0, -57],\n            [-11, -13],\n            [-26, 2],\n            [-22, 21],\n            [-36, 17],\n            [-7, 26],\n            [-28, 9],\n            [-31, -7],\n            [-16, 20],\n            [6, 22],\n            [-33, -14],\n            [13, -28],\n            [-16, -25]\n        ],\n        [\n            [0, 8896],\n            [0, 236]\n        ],\n        [\n            [0, 9282],\n            [9999, -40],\n            [-30, -3],\n            [-5, 19],\n            [-9964, 24]\n        ],\n        [\n            [0, 9282],\n            [4, 3],\n            [23, 0],\n            [40, -17],\n            [-2, -8],\n            [-29, -14],\n            [-36, -4],\n            [0, 40]\n        ],\n        [\n            [8988, 9383],\n            [-42, -1],\n            [-57, 7],\n            [-5, 3],\n            [27, 23],\n            [34, 6],\n            [40, -23],\n            [3, -15]\n        ],\n        [\n            [9186, 9493],\n            [-32, -23],\n            [-44, 5],\n            [-52, 23],\n            [7, 20],\n            [51, -9],\n            [70, -16]\n        ],\n        [\n            [9029, 9522],\n            [-22, -44],\n            [-102, 1],\n            [-46, -14],\n            [-55, 39],\n            [15, 40],\n            [37, 11],\n            [73, -2],\n            [100, -31]\n        ],\n        [\n            [6598, 9235],\n            [-17, -5],\n            [-91, 8],\n            [-7, 26],\n            [-50, 16],\n            [-4, 32],\n            [28, 13],\n            [-1, 32],\n            [55, 50],\n            [-25, 7],\n            [66, 52],\n            [-7, 27],\n            [62, 31],\n            [91, 38],\n            [93, 11],\n            [48, 22],\n            [54, 8],\n            [19, -23],\n            [-19, -19],\n            [-98, -29],\n            [-85, -28],\n            [-86, -57],\n            [-42, -57],\n            [-43, -57],\n            [5, -49],\n            [54, -49]\n        ],\n        [\n            [0, 8896],\n            [9963, -26],\n            [-36, 4],\n            [25, -31],\n            [17, -49],\n            [13, -16],\n            [3, -24],\n            [-7, -16],\n            [-52, 13],\n            [-78, -44],\n            [-25, -7],\n            [-42, -42],\n            [-40, -36],\n            [-11, -27],\n            [-39, 41],\n            [-73, -46],\n            [-12, 22],\n            [-27, -26],\n            [-37, 8],\n            [-9, -38],\n            [-33, -58],\n            [1, -24],\n            [31, -13],\n            [-4, -86],\n            [-25, -2],\n            [-12, -49],\n            [11, -26],\n            [-48, -30],\n            [-10, -67],\n            [-41, -15],\n            [-9, -60],\n            [-40, -55],\n            [-10, 41],\n            [-12, 86],\n            [-15, 131],\n            [13, 82],\n            [23, 35],\n            [2, 28],\n            [43, 13],\n            [50, 75],\n            [47, 60],\n            [50, 48],\n            [23, 83],\n            [-34, -5],\n            [-17, -49],\n            [-70, -65],\n            [-23, 73],\n            [-72, -20],\n            [-69, -99],\n            [23, -36],\n            [-62, -16],\n            [-43, -6],\n            [2, 43],\n            [-43, 9],\n            [-35, -29],\n            [-85, 10],\n            [-91, -18],\n            [-90, -115],\n            [-106, -139],\n            [43, -8],\n            [14, -37],\n            [27, -13],\n            [18, 30],\n            [30, -4],\n            [40, -65],\n            [1, -50],\n            [-21, -59],\n            [-3, -71],\n            [-12, -94],\n            [-42, -86],\n            [-9, -41],\n            [-38, -69],\n            [-38, -68],\n            [-18, -35],\n            [-37, -34],\n            [-17, -1],\n            [-17, 29],\n            [-38, -44],\n            [-4, -19]\n        ],\n        [\n            [6363, 7799],\n            [-12, -35],\n            [-27, -10],\n            [-28, -61],\n            [25, -56],\n            [-2, -40],\n            [30, -70]\n        ],\n        [\n            [6109, 7624],\n            [-35, 49],\n            [-32, 23],\n            [-24, 34],\n            [20, 10],\n            [23, 49],\n            [-15, 24],\n            [41, 24],\n            [-1, 13],\n            [-25, -10]\n        ],\n        [\n            [6061, 7840],\n            [1, 26],\n            [14, 17],\n            [27, 4],\n            [5, 20],\n            [-7, 33],\n            [12, 30],\n            [-1, 18],\n            [-41, 19],\n            [-16, -1],\n            [-17, 28],\n            [-21, -9],\n            [-35, 20],\n            [0, 12],\n            [-10, 26],\n            [-22, 3],\n            [-2, 18],\n            [7, 12],\n            [-18, 33],\n            [-29, -5],\n            [-8, 3],\n            [-7, -14],\n            [-11, 3]\n        ],\n        [\n            [5777, 8571],\n            [31, 33],\n            [-29, 28]\n        ],\n        [\n            [5863, 9167],\n            [29, 20],\n            [46, -35],\n            [76, -14],\n            [105, -67],\n            [21, -28],\n            [2, -40],\n            [-31, -31],\n            [-45, -15],\n            [-124, 44],\n            [-21, -7],\n            [45, -43],\n            [2, -28],\n            [2, -60],\n            [36, -18],\n            [22, -15],\n            [3, 28],\n            [-17, 26],\n            [18, 22],\n            [67, -37],\n            [24, 15],\n            [-19, 43],\n            [65, 58],\n            [25, -4],\n            [26, -20],\n            [16, 40],\n            [-23, 35],\n            [14, 36],\n            [-21, 36],\n            [78, -18],\n            [16, -34],\n            [-35, -7],\n            [0, -33],\n            [22, -20],\n            [43, 13],\n            [7, 38],\n            [58, 28],\n            [97, 50],\n            [20, -3],\n            [-27, -35],\n            [35, -7],\n            [19, 21],\n            [52, 1],\n            [42, 25],\n            [31, -36],\n            [32, 39],\n            [-29, 35],\n            [14, 19],\n            [82, -18],\n            [39, -18],\n            [100, -68],\n            [19, 31],\n            [-28, 31],\n            [-1, 13],\n            [-34, 6],\n            [10, 28],\n            [-15, 46],\n            [-1, 19],\n            [51, 53],\n            [18, 54],\n            [21, 11],\n            [74, -15],\n            [5, -33],\n            [-26, -48],\n            [17, -19],\n            [9, -41],\n            [-6, -81],\n            [31, -36],\n            [-12, -40],\n            [-55, -84],\n            [32, -8],\n            [11, 21],\n            [31, 15],\n            [7, 29],\n            [24, 29],\n            [-16, 33],\n            [13, 39],\n            [-31, 5],\n            [-6, 33],\n            [22, 59],\n            [-36, 48],\n            [50, 40],\n            [-7, 42],\n            [14, 2],\n            [15, -33],\n            [-11, -57],\n            [29, -11],\n            [-12, 43],\n            [46, 23],\n            [58, 3],\n            [51, -34],\n            [-25, 49],\n            [-2, 63],\n            [48, 12],\n            [67, -2],\n            [60, 7],\n            [-23, 31],\n            [33, 39],\n            [31, 2],\n            [54, 29],\n            [74, 8],\n            [9, 16],\n            [73, 6],\n            [23, -14],\n            [62, 32],\n            [51, -1],\n            [8, 25],\n            [26, 25],\n            [66, 25],\n            [48, -19],\n            [-38, -15],\n            [63, -9],\n            [7, -29],\n            [25, 14],\n            [82, -1],\n            [62, -29],\n            [23, -22],\n            [-7, -30],\n            [-31, -18],\n            [-73, -33],\n            [-21, -17],\n            [35, -8],\n            [41, -15],\n            [25, 11],\n            [14, -38],\n            [12, 15],\n            [44, 10],\n            [90, -10],\n            [6, -28],\n            [116, -9],\n            [2, 46],\n            [59, -11],\n            [44, 1],\n            [45, -32],\n            [13, -37],\n            [-17, -25],\n            [35, -47],\n            [44, -24],\n            [27, 62],\n            [44, -26],\n            [48, 16],\n            [53, -18],\n            [21, 16],\n            [45, -8],\n            [-20, 55],\n            [37, 25],\n            [251, -38],\n            [24, -35],\n            [72, -45],\n            [112, 11],\n            [56, -10],\n            [23, -24],\n            [-4, -44],\n            [35, -16],\n            [37, 12],\n            [49, 1],\n            [52, -11],\n            [53, 6],\n            [49, -52],\n            [34, 19],\n            [-23, 37],\n            [13, 27],\n            [88, -17],\n            [58, 4],\n            [80, -29],\n            [-9960, -25]\n        ],\n        [\n            [7918, 9684],\n            [-157, -23],\n            [51, 77],\n            [23, 7],\n            [21, -4],\n            [70, -33],\n            [-8, -24]\n        ],\n        [\n            [6420, 9816],\n            [-37, -8],\n            [-25, -4],\n            [-4, -10],\n            [-33, -10],\n            [-30, 14],\n            [16, 19],\n            [-62, 2],\n            [54, 10],\n            [43, 1],\n            [5, -16],\n            [16, 14],\n            [26, 10],\n            [42, -13],\n            [-11, -9]\n        ],\n        [\n            [7775, 9718],\n            [-60, -8],\n            [-78, 17],\n            [-46, 23],\n            [-21, 42],\n            [-38, 12],\n            [72, 40],\n            [60, 14],\n            [54, -30],\n            [64, -57],\n            [-7, -53]\n        ],\n        [\n            [5844, 4990],\n            [11, -33],\n            [-1, -35],\n            [-8, -7]\n        ],\n        [\n            [5821, 4978],\n            [7, -6],\n            [16, 18]\n        ],\n        [\n            [4526, 6298],\n            [1, 25]\n        ],\n        [\n            [6188, 6023],\n            [-4, 26],\n            [-8, 17],\n            [-2, 24],\n            [-15, 21],\n            [-15, 50],\n            [-7, 48],\n            [-20, 40],\n            [-12, 10],\n            [-18, 56],\n            [-4, 41],\n            [2, 35],\n            [-16, 66],\n            [-13, 23],\n            [-15, 12],\n            [-10, 34],\n            [2, 13],\n            [-8, 31],\n            [-8, 13],\n            [-11, 44],\n            [-17, 48],\n            [-14, 40],\n            [-14, 0],\n            [5, 33],\n            [1, 20],\n            [3, 24]\n        ],\n        [\n            [6344, 6744],\n            [11, -51],\n            [14, -13],\n            [5, -21],\n            [18, -25],\n            [2, -24],\n            [-3, -20],\n            [4, -20],\n            [8, -16],\n            [4, -20],\n            [4, -14]\n        ],\n        [\n            [6427, 6512],\n            [5, -22]\n        ],\n        [\n            [6444, 6180],\n            [-80, -23],\n            [-26, -26],\n            [-20, -62],\n            [-13, -10],\n            [-7, 20],\n            [-11, -3],\n            [-27, 6],\n            [-5, 5],\n            [-32, -1],\n            [-7, -5],\n            [-12, 15],\n            [-7, -29],\n            [3, -25],\n            [-12, -19]\n        ],\n        [\n            [5943, 5617],\n            [-4, 1],\n            [0, 29],\n            [-3, 20],\n            [-14, 24],\n            [-4, 42],\n            [4, 44],\n            [-13, 4],\n            [-2, -13],\n            [-17, -3],\n            [7, -17],\n            [2, -36],\n            [-15, -32],\n            [-14, -43],\n            [-14, -6],\n            [-23, 34],\n            [-11, -12],\n            [-3, -17],\n            [-14, -11],\n            [-1, -12],\n            [-28, 0],\n            [-3, 12],\n            [-20, 2],\n            [-10, -10],\n            [-8, 5],\n            [-14, 34],\n            [-5, 17],\n            [-20, -9],\n            [-8, -27],\n            [-7, -53],\n            [-10, -11],\n            [-8, -6]\n        ],\n        [\n            [5663, 5567],\n            [-2, 2]\n        ],\n        [\n            [5635, 5716],\n            [0, 14],\n            [-10, 17],\n            [-1, 35],\n            [-5, 23],\n            [-10, -4],\n            [3, 22],\n            [7, 25],\n            [-3, 24],\n            [9, 18],\n            [-6, 14],\n            [7, 36],\n            [13, 44],\n            [24, -4],\n            [-1, 234]\n        ],\n        [\n            [6023, 6357],\n            [9, -58],\n            [-6, -10],\n            [4, -61],\n            [11, -71],\n            [10, -14],\n            [15, -22]\n        ],\n        [\n            [5943, 5624],\n            [0, -7]\n        ],\n        [\n            [5943, 5617],\n            [0, -46]\n        ],\n        [\n            [5944, 5309],\n            [-17, -28],\n            [-20, 1],\n            [-22, -14],\n            [-18, 13],\n            [-11, -16]\n        ],\n        [\n            [5682, 5544],\n            [-19, 23]\n        ],\n        [\n            [4535, 5861],\n            [-11, 46],\n            [-14, 21],\n            [12, 11],\n            [14, 41],\n            [6, 31]\n        ],\n        [\n            [4536, 5789],\n            [-4, 45]\n        ],\n        [\n            [9502, 4438],\n            [8, -20],\n            [-19, 0],\n            [-11, 37],\n            [17, -15],\n            [5, -2]\n        ],\n        [\n            [9467, 4474],\n            [-11, -1],\n            [-17, 6],\n            [-5, 9],\n            [1, 23],\n            [19, -9],\n            [9, -12],\n            [4, -16]\n        ],\n        [\n            [9490, 4490],\n            [-4, -11],\n            [-21, 52],\n            [-5, 35],\n            [9, 0],\n            [10, -47],\n            [11, -29]\n        ],\n        [\n            [9440, 4565],\n            [1, -12],\n            [-22, 25],\n            [-15, 21],\n            [-10, 20],\n            [4, 6],\n            [13, -14],\n            [23, -27],\n            [6, -19]\n        ],\n        [\n            [9375, 4623],\n            [-5, -3],\n            [-13, 14],\n            [-11, 24],\n            [1, 10],\n            [17, -25],\n            [11, -20]\n        ],\n        [\n            [4682, 5458],\n            [-8, 5],\n            [-20, 24],\n            [-14, 31],\n            [-5, 22],\n            [-3, 43]\n        ],\n        [\n            [2561, 5848],\n            [-3, -14],\n            [-16, 1],\n            [-10, 6],\n            [-12, 12],\n            [-15, 3],\n            [-8, 13]\n        ],\n        [\n            [6198, 5735],\n            [9, -11],\n            [5, -25],\n            [13, -24],\n            [14, -1],\n            [26, 16],\n            [30, 7],\n            [25, 18],\n            [13, 4],\n            [10, 11],\n            [16, 2]\n        ],\n        [\n            [6359, 5732],\n            [0, -1],\n            [0, -25],\n            [0, -59],\n            [0, -31],\n            [-13, -36],\n            [-19, -50]\n        ],\n        [\n            [6359, 5732],\n            [9, 1],\n            [13, 9],\n            [14, 6],\n            [14, 20],\n            [10, 0],\n            [1, -16],\n            [-3, -35],\n            [0, -31],\n            [-6, -21],\n            [-7, -64],\n            [-14, -66],\n            [-17, -75],\n            [-24, -87],\n            [-23, -66],\n            [-33, -81],\n            [-28, -48],\n            [-42, -58],\n            [-25, -45],\n            [-31, -72],\n            [-6, -31],\n            [-6, -14]\n        ],\n        [\n            [3412, 5410],\n            [34, -11],\n            [2, 10],\n            [23, 4],\n            [30, -15]\n        ],\n        [\n            [3489, 5306],\n            [10, -35],\n            [-4, -25]\n        ],\n        [\n            [5626, 7957],\n            [-8, -15],\n            [-5, -24]\n        ],\n        [\n            [5380, 7746],\n            [7, 5]\n        ],\n        [\n            [5663, 8957],\n            [-47, -17],\n            [-27, -41],\n            [4, -36],\n            [-44, -48],\n            [-54, -50],\n            [-20, -84],\n            [20, -41],\n            [26, -33],\n            [-25, -67],\n            [-29, -14],\n            [-11, -99],\n            [-15, -55],\n            [-34, 6],\n            [-16, -47],\n            [-32, -3],\n            [-9, 56],\n            [-23, 67],\n            [-21, 84]\n        ],\n        [\n            [5890, 3478],\n            [-5, -26],\n            [-17, -6],\n            [-16, 32],\n            [0, 20],\n            [7, 22],\n            [3, 17],\n            [8, 5],\n            [14, -11]\n        ],\n        [\n            [5999, 7104],\n            [-2, 45],\n            [7, 25]\n        ],\n        [\n            [6004, 7174],\n            [7, 13],\n            [7, 13],\n            [2, 33],\n            [9, -12],\n            [31, 17],\n            [14, -12],\n            [23, 1],\n            [32, 22],\n            [15, -1],\n            [32, 9]\n        ],\n        [\n            [5051, 5420],\n            [-22, -12]\n        ],\n        [\n            [7849, 5777],\n            [-25, 28],\n            [-24, -2],\n            [4, 47],\n            [-24, 0],\n            [-2, -65],\n            [-15, -87],\n            [-10, -52],\n            [2, -43],\n            [18, -2],\n            [12, -53],\n            [5, -52],\n            [15, -33],\n            [17, -7],\n            [14, -31]\n        ],\n        [\n            [7779, 5439],\n            [-11, 23],\n            [-4, 29],\n            [-15, 34],\n            [-14, 28],\n            [-4, -35],\n            [-5, 33],\n            [3, 37],\n            [8, 56]\n        ],\n        [\n            [6883, 7252],\n            [16, 60],\n            [-6, 44],\n            [-20, 14],\n            [7, 26],\n            [23, -3],\n            [13, 33],\n            [9, 38],\n            [37, 13],\n            [-6, -27],\n            [4, -17],\n            [12, 2]\n        ],\n        [\n            [6497, 7255],\n            [-5, 42],\n            [4, 62],\n            [-22, 20],\n            [8, 40],\n            [-19, 4],\n            [6, 49],\n            [26, -14],\n            [25, 19],\n            [-20, 35],\n            [-8, 34],\n            [-23, -15],\n            [-3, -43],\n            [-8, 38]\n        ],\n        [\n            [6554, 7498],\n            [31, 1],\n            [-4, 29],\n            [24, 21],\n            [23, 34],\n            [37, -31],\n            [3, -47],\n            [11, -12],\n            [30, 2],\n            [9, -10],\n            [14, -61],\n            [32, -41],\n            [18, -28],\n            [29, -29],\n            [37, -25],\n            [-1, -36]\n        ],\n        [\n            [8471, 4532],\n            [3, 14],\n            [24, 13],\n            [19, 2],\n            [9, 8],\n            [10, -8],\n            [-10, -16],\n            [-29, -25],\n            [-23, -17]\n        ],\n        [\n            [3286, 5693],\n            [16, 8],\n            [6, -2],\n            [-1, -44],\n            [-23, -7],\n            [-5, 6],\n            [8, 16],\n            [-1, 23]\n        ],\n        [\n            [5233, 7240],\n            [31, 24],\n            [19, -7],\n            [-1, -30],\n            [24, 22],\n            [2, -12],\n            [-14, -29],\n            [0, -27],\n            [9, -15],\n            [-3, -51],\n            [-19, -29],\n            [6, -33],\n            [14, -1],\n            [7, -28],\n            [11, -9]\n        ],\n        [\n            [6004, 7174],\n            [-11, 27],\n            [11, 22],\n            [-17, -5],\n            [-23, 13],\n            [-19, -34],\n            [-43, -6],\n            [-22, 31],\n            [-30, 2],\n            [-6, -24],\n            [-20, -7],\n            [-26, 31],\n            [-31, -1],\n            [-16, 59],\n            [-21, 33],\n            [14, 46],\n            [-18, 28],\n            [31, 56],\n            [43, 3],\n            [12, 45],\n            [53, -8],\n            [33, 38],\n            [32, 17],\n            [46, 1],\n            [49, -42],\n            [40, -22],\n            [32, 9],\n            [24, -6],\n            [33, 31]\n        ],\n        [\n            [5777, 7539],\n            [3, -23],\n            [25, -19],\n            [-5, -14],\n            [-33, -3],\n            [-12, -19],\n            [-23, -31],\n            [-9, 27],\n            [0, 12]\n        ],\n        [\n            [8382, 6499],\n            [-17, -95],\n            [-12, -49],\n            [-14, 50],\n            [-4, 44],\n            [17, 58],\n            [22, 45],\n            [13, -18],\n            [-5, -35]\n        ],\n        [\n            [6088, 4781],\n            [-12, -73],\n            [1, -33],\n            [18, -22],\n            [1, -15],\n            [-8, -36],\n            [2, -18],\n            [-2, -28],\n            [10, -37],\n            [11, -58],\n            [10, -13]\n        ],\n        [\n            [5909, 4512],\n            [-15, 18],\n            [-18, 10],\n            [-11, 10],\n            [-12, 15]\n        ],\n        [\n            [5844, 4990],\n            [10, 8],\n            [31, -1],\n            [56, 4]\n        ],\n        [\n            [6061, 7840],\n            [-22, -5],\n            [-18, -19],\n            [-26, -3],\n            [-24, -22],\n            [1, -37],\n            [14, -14],\n            [28, 4],\n            [-5, -21],\n            [-31, -11],\n            [-37, -34],\n            [-16, 12],\n            [6, 28],\n            [-30, 17],\n            [5, 12],\n            [26, 19],\n            [-8, 14],\n            [-43, 15],\n            [-2, 22],\n            [-25, -8],\n            [-11, -32],\n            [-21, -44]\n        ],\n        [\n            [3517, 3063],\n            [-12, -38],\n            [-31, -32],\n            [-21, 11],\n            [-15, -6],\n            [-26, 25],\n            [-18, -1],\n            [-17, 32]\n        ],\n        [\n            [679, 6185],\n            [-4, -10],\n            [-7, 8],\n            [1, 17],\n            [-4, 21],\n            [1, 7],\n            [5, 10],\n            [-2, 11],\n            [1, 6],\n            [3, -1],\n            [10, -10],\n            [5, -5],\n            [5, -8],\n            [7, -21],\n            [-1, -3],\n            [-11, -13],\n            [-9, -9]\n        ],\n        [\n            [664, 6277],\n            [-9, -4],\n            [-5, 12],\n            [-3, 5],\n            [0, 4],\n            [3, 5],\n            [9, -6],\n            [8, -9],\n            [-3, -7]\n        ],\n        [\n            [646, 6309],\n            [-1, -7],\n            [-15, 2],\n            [2, 7],\n            [14, -2]\n        ],\n        [\n            [621, 6317],\n            [-2, -3],\n            [-2, 1],\n            [-9, 2],\n            [-4, 13],\n            [-1, 2],\n            [7, 8],\n            [3, -3],\n            [8, -20]\n        ],\n        [\n            [574, 6356],\n            [-4, -6],\n            [-9, 11],\n            [1, 4],\n            [5, 6],\n            [6, -1],\n            [1, -14]\n        ],\n        [\n            [3135, 7724],\n            [5, -19],\n            [-30, -29],\n            [-29, -20],\n            [-29, -18],\n            [-15, -35],\n            [-4, -13],\n            [-1, -31],\n            [10, -32],\n            [11, -1],\n            [-3, 21],\n            [8, -13],\n            [-2, -17],\n            [-19, -9],\n            [-13, 1],\n            [-20, -10],\n            [-12, -3],\n            [-17, -3],\n            [-23, -17],\n            [41, 11],\n            [8, -11],\n            [-39, -18],\n            [-17, 0],\n            [0, 7],\n            [-8, -16],\n            [8, -3],\n            [-6, -43],\n            [-20, -45],\n            [-2, 15],\n            [-6, 3],\n            [-9, 15],\n            [5, -32],\n            [7, -10],\n            [1, -23],\n            [-9, -23],\n            [-16, -47],\n            [-2, 3],\n            [8, 40],\n            [-14, 22],\n            [-3, 49],\n            [-5, -25],\n            [5, -38],\n            [-18, 10],\n            [19, -19],\n            [1, -57],\n            [8, -4],\n            [3, -20],\n            [4, -59],\n            [-17, -44],\n            [-29, -18],\n            [-18, -34],\n            [-14, -4],\n            [-14, -22],\n            [-4, -20],\n            [-31, -38],\n            [-16, -28],\n            [-13, -35],\n            [-4, -42],\n            [5, -41],\n            [9, -51],\n            [13, -41],\n            [0, -26],\n            [13, -69],\n            [-1, -39],\n            [-1, -23],\n            [-7, -36],\n            [-8, -8],\n            [-14, 7],\n            [-4, 26],\n            [-11, 14],\n            [-15, 51],\n            [-13, 45],\n            [-4, 23],\n            [6, 39],\n            [-8, 33],\n            [-22, 49],\n            [-10, 9],\n            [-28, -27],\n            [-5, 3],\n            [-14, 28],\n            [-17, 14],\n            [-32, -7],\n            [-24, 7],\n            [-21, -5],\n            [-12, -9],\n            [5, -15],\n            [0, -24],\n            [5, -12],\n            [-5, -8],\n            [-10, 9],\n            [-11, -11],\n            [-20, 2],\n            [-20, 31],\n            [-25, -8],\n            [-20, 14],\n            [-17, -4],\n            [-24, -14],\n            [-25, -44],\n            [-27, -25],\n            [-16, -28],\n            [-6, -27],\n            [0, -41],\n            [1, -28],\n            [5, -20]\n        ],\n        [\n            [1746, 6980],\n            [-4, 30],\n            [-18, 34],\n            [-13, 7],\n            [-3, 17],\n            [-16, 3],\n            [-10, 16],\n            [-26, 6],\n            [-7, 9],\n            [-3, 32],\n            [-27, 60],\n            [-23, 82],\n            [1, 14],\n            [-13, 19],\n            [-21, 50],\n            [-4, 48],\n            [-15, 32],\n            [6, 49],\n            [-1, 51],\n            [-8, 45],\n            [10, 56],\n            [4, 53],\n            [3, 54],\n            [-5, 79],\n            [-9, 51],\n            [-8, 27],\n            [4, 12],\n            [40, -20],\n            [15, -56],\n            [7, 15],\n            [-5, 49],\n            [-9, 48]\n        ],\n        [\n            [750, 8432],\n            [-28, -23],\n            [-14, 15],\n            [-4, 28],\n            [25, 21],\n            [15, 9],\n            [18, -4],\n            [12, -18],\n            [-24, -28]\n        ],\n        [\n            [401, 8597],\n            [-18, -9],\n            [-18, 11],\n            [-17, 16],\n            [28, 10],\n            [22, -6],\n            [3, -22]\n        ],\n        [\n            [230, 8826],\n            [17, -12],\n            [17, 6],\n            [23, -15],\n            [27, -8],\n            [-2, -7],\n            [-21, -12],\n            [-21, 13],\n            [-11, 11],\n            [-24, -4],\n            [-7, 5],\n            [2, 23]\n        ],\n        [\n            [1374, 8295],\n            [-15, 22],\n            [-25, 19],\n            [-8, 52],\n            [-36, 47],\n            [-15, 56],\n            [-26, 4],\n            [-44, 2],\n            [-33, 17],\n            [-57, 61],\n            [-27, 11],\n            [-49, 21],\n            [-38, -5],\n            [-55, 27],\n            [-33, 25],\n            [-30, -12],\n            [5, -41],\n            [-15, -4],\n            [-32, -12],\n            [-25, -20],\n            [-30, -13],\n            [-4, 35],\n            [12, 58],\n            [30, 18],\n            [-8, 15],\n            [-35, -33],\n            [-19, -39],\n            [-40, -42],\n            [20, -29],\n            [-26, -42],\n            [-30, -25],\n            [-28, -18],\n            [-7, -26],\n            [-43, -31],\n            [-9, -28],\n            [-32, -25],\n            [-20, 5],\n            [-25, -17],\n            [-29, -20],\n            [-23, -20],\n            [-47, -16],\n            [-5, 9],\n            [31, 28],\n            [27, 18],\n            [29, 33],\n            [35, 6],\n            [14, 25],\n            [38, 35],\n            [6, 12],\n            [21, 21],\n            [5, 44],\n            [14, 35],\n            [-32, -18],\n            [-9, 11],\n            [-15, -22],\n            [-18, 30],\n            [-8, -21],\n            [-10, 29],\n            [-28, -23],\n            [-17, 0],\n            [-3, 35],\n            [5, 21],\n            [-17, 22],\n            [-37, -12],\n            [-23, 28],\n            [-19, 14],\n            [0, 34],\n            [-22, 25],\n            [11, 34],\n            [23, 33],\n            [10, 30],\n            [22, 4],\n            [19, -9],\n            [23, 28],\n            [20, -5],\n            [21, 19],\n            [-5, 27],\n            [-16, 10],\n            [21, 23],\n            [-17, -1],\n            [-30, -13],\n            [-8, -13],\n            [-22, 13],\n            [-39, -6],\n            [-41, 14],\n            [-12, 24],\n            [-35, 34],\n            [39, 25],\n            [62, 29],\n            [23, 0],\n            [-4, -30],\n            [59, 2],\n            [-23, 37],\n            [-34, 23],\n            [-20, 29],\n            [-26, 25],\n            [-38, 19],\n            [15, 31],\n            [49, 2],\n            [35, 27],\n            [7, 29],\n            [28, 28],\n            [28, 6],\n            [52, 27],\n            [26, -4],\n            [42, 31],\n            [42, -12],\n            [21, -27],\n            [12, 11],\n            [47, -3],\n            [-2, -14],\n            [43, -10],\n            [28, 6],\n            [59, -18],\n            [53, -6],\n            [21, -8],\n            [37, 10],\n            [42, -18],\n            [31, -8]\n        ],\n        [\n            [3018, 5753],\n            [-1, -14],\n            [-16, -7],\n            [9, -26],\n            [0, -31],\n            [-12, -35],\n            [10, -47],\n            [12, 4],\n            [6, 43],\n            [-8, 21],\n            [-2, 45],\n            [35, 24],\n            [-4, 27],\n            [10, 19],\n            [10, -41],\n            [19, -1],\n            [18, -33],\n            [1, -20],\n            [25, 0],\n            [30, 6],\n            [16, -27],\n            [21, -7],\n            [16, 18],\n            [0, 15],\n            [34, 4],\n            [34, 1],\n            [-24, -18],\n            [10, -28],\n            [22, -4],\n            [21, -29],\n            [4, -48],\n            [15, 2],\n            [11, -14]\n        ],\n        [\n            [8001, 6331],\n            [-37, -51],\n            [-24, -56],\n            [-6, -41],\n            [22, -62],\n            [25, -77],\n            [26, -37],\n            [17, -47],\n            [12, -109],\n            [-3, -104],\n            [-24, -39],\n            [-31, -38],\n            [-23, -49],\n            [-35, -55],\n            [-10, 37],\n            [8, 40],\n            [-21, 34]\n        ],\n        [\n            [9661, 4085],\n            [-9, -8],\n            [-9, 26],\n            [1, 16],\n            [17, -34]\n        ],\n        [\n            [9641, 4175],\n            [4, -47],\n            [-7, 7],\n            [-6, -3],\n            [-4, 16],\n            [0, 45],\n            [13, -18]\n        ],\n        [\n            [6475, 6041],\n            [-21, -16],\n            [-5, -26],\n            [-1, -20],\n            [-27, -25],\n            [-45, -28],\n            [-24, -41],\n            [-13, -3],\n            [-8, 3],\n            [-16, -25],\n            [-18, -11],\n            [-23, -3],\n            [-7, -3],\n            [-6, -16],\n            [-8, -4],\n            [-4, -15],\n            [-14, 1],\n            [-9, -8],\n            [-19, 3],\n            [-7, 35],\n            [1, 32],\n            [-5, 17],\n            [-5, 44],\n            [-8, 24],\n            [5, 3],\n            [-2, 27],\n            [3, 12],\n            [-1, 25]\n        ],\n        [\n            [5817, 3752],\n            [11, 0],\n            [14, -10],\n            [9, 7],\n            [15, -6]\n        ],\n        [\n            [5911, 3478],\n            [-7, -43],\n            [-3, -49],\n            [-7, -27],\n            [-19, -30],\n            [-5, -8],\n            [-12, -30],\n            [-8, -31],\n            [-16, -42],\n            [-31, -61],\n            [-20, -36],\n            [-21, -26],\n            [-29, -23],\n            [-14, -3],\n            [-3, -17],\n            [-17, 9],\n            [-14, -11],\n            [-30, 11],\n            [-17, -7],\n            [-12, 3],\n            [-28, -23],\n            [-24, -10],\n            [-17, -22],\n            [-13, -1],\n            [-11, 21],\n            [-10, 1],\n            [-12, 26],\n            [-1, -8],\n            [-4, 16],\n            [0, 34],\n            [-9, 40],\n            [9, 11],\n            [0, 45],\n            [-19, 55],\n            [-14, 50],\n            [0, 1],\n            [-20, 76]\n        ],\n        [\n            [5840, 4141],\n            [-21, -8],\n            [-15, -23],\n            [-4, -21],\n            [-10, -4],\n            [-24, -49],\n            [-15, -38],\n            [-10, -2],\n            [-9, 7],\n            [-31, 7]\n        ]\n    ],\n    \"transform\": {\n        \"scale\": [0.036003600360036005, 0.016927109510951093],\n        \"translate\": [-180, -85.609038]\n    }\n}\n;\n  Datamap.prototype.abwTopo = '__ABW__';\n  Datamap.prototype.afgTopo = '__AFG__';\n  Datamap.prototype.agoTopo = '__AGO__';\n  Datamap.prototype.aiaTopo = '__AIA__';\n  Datamap.prototype.albTopo = '__ALB__';\n  Datamap.prototype.aldTopo = '__ALD__';\n  Datamap.prototype.andTopo = '__AND__';\n  Datamap.prototype.areTopo = '__ARE__';\n  Datamap.prototype.argTopo = '__ARG__';\n  Datamap.prototype.armTopo = '__ARM__';\n  Datamap.prototype.asmTopo = '__ASM__';\n  Datamap.prototype.ataTopo = '__ATA__';\n  Datamap.prototype.atcTopo = '__ATC__';\n  Datamap.prototype.atfTopo = '__ATF__';\n  Datamap.prototype.atgTopo = '__ATG__';\n  Datamap.prototype.ausTopo = '__AUS__';\n  Datamap.prototype.autTopo = '__AUT__';\n  Datamap.prototype.azeTopo = '__AZE__';\n  Datamap.prototype.bdiTopo = '__BDI__';\n  Datamap.prototype.belTopo = '__BEL__';\n  Datamap.prototype.benTopo = '__BEN__';\n  Datamap.prototype.bfaTopo = '__BFA__';\n  Datamap.prototype.bgdTopo = '__BGD__';\n  Datamap.prototype.bgrTopo = '__BGR__';\n  Datamap.prototype.bhrTopo = '__BHR__';\n  Datamap.prototype.bhsTopo = '__BHS__';\n  Datamap.prototype.bihTopo = '__BIH__';\n  Datamap.prototype.bjnTopo = '__BJN__';\n  Datamap.prototype.blmTopo = '__BLM__';\n  Datamap.prototype.blrTopo = '__BLR__';\n  Datamap.prototype.blzTopo = '__BLZ__';\n  Datamap.prototype.bmuTopo = '__BMU__';\n  Datamap.prototype.bolTopo = '__BOL__';\n  Datamap.prototype.braTopo = '__BRA__';\n  Datamap.prototype.brbTopo = '__BRB__';\n  Datamap.prototype.brnTopo = '__BRN__';\n  Datamap.prototype.btnTopo = '__BTN__';\n  Datamap.prototype.norTopo = '__NOR__';\n  Datamap.prototype.bwaTopo = '__BWA__';\n  Datamap.prototype.cafTopo = '__CAF__';\n  Datamap.prototype.canTopo = '__CAN__';\n  Datamap.prototype.cheTopo = '__CHE__';\n  Datamap.prototype.chlTopo = '__CHL__';\n  Datamap.prototype.chnTopo = '__CHN__';\n  Datamap.prototype.civTopo = '__CIV__';\n  Datamap.prototype.clpTopo = '__CLP__';\n  Datamap.prototype.cmrTopo = '__CMR__';\n  Datamap.prototype.codTopo = '__COD__';\n  Datamap.prototype.cogTopo = '__COG__';\n  Datamap.prototype.cokTopo = '__COK__';\n  Datamap.prototype.colTopo = '__COL__';\n  Datamap.prototype.comTopo = '__COM__';\n  Datamap.prototype.cpvTopo = '__CPV__';\n  Datamap.prototype.criTopo = '__CRI__';\n  Datamap.prototype.csiTopo = '__CSI__';\n  Datamap.prototype.cubTopo = '__CUB__';\n  Datamap.prototype.cuwTopo = '__CUW__';\n  Datamap.prototype.cymTopo = '__CYM__';\n  Datamap.prototype.cynTopo = '__CYN__';\n  Datamap.prototype.cypTopo = '__CYP__';\n  Datamap.prototype.czeTopo = '__CZE__';\n  Datamap.prototype.deuTopo = '__DEU__';\n  Datamap.prototype.djiTopo = '__DJI__';\n  Datamap.prototype.dmaTopo = '__DMA__';\n  Datamap.prototype.dnkTopo = '__DNK__';\n  Datamap.prototype.domTopo = '__DOM__';\n  Datamap.prototype.dzaTopo = '__DZA__';\n  Datamap.prototype.ecuTopo = '__ECU__';\n  Datamap.prototype.egyTopo = '__EGY__';\n  Datamap.prototype.eriTopo = '__ERI__';\n  Datamap.prototype.esbTopo = '__ESB__';\n  Datamap.prototype.espTopo = '__ESP__';\n  Datamap.prototype.estTopo = '__EST__';\n  Datamap.prototype.ethTopo = '__ETH__';\n  Datamap.prototype.finTopo = '__FIN__';\n  Datamap.prototype.fjiTopo = '__FJI__';\n  Datamap.prototype.flkTopo = '__FLK__';\n  Datamap.prototype.fraTopo = '__FRA__';\n  Datamap.prototype.froTopo = '__FRO__';\n  Datamap.prototype.fsmTopo = '__FSM__';\n  Datamap.prototype.gabTopo = '__GAB__';\n  Datamap.prototype.psxTopo = '__PSX__';\n  Datamap.prototype.gbrTopo = '__GBR__';\n  Datamap.prototype.geoTopo = '__GEO__';\n  Datamap.prototype.ggyTopo = '__GGY__';\n  Datamap.prototype.ghaTopo = '__GHA__';\n  Datamap.prototype.gibTopo = '__GIB__';\n  Datamap.prototype.ginTopo = '__GIN__';\n  Datamap.prototype.gmbTopo = '__GMB__';\n  Datamap.prototype.gnbTopo = '__GNB__';\n  Datamap.prototype.gnqTopo = '__GNQ__';\n  Datamap.prototype.grcTopo = '__GRC__';\n  Datamap.prototype.grdTopo = '__GRD__';\n  Datamap.prototype.grlTopo = '__GRL__';\n  Datamap.prototype.gtmTopo = '__GTM__';\n  Datamap.prototype.gumTopo = '__GUM__';\n  Datamap.prototype.guyTopo = '__GUY__';\n  Datamap.prototype.hkgTopo = '__HKG__';\n  Datamap.prototype.hmdTopo = '__HMD__';\n  Datamap.prototype.hndTopo = '__HND__';\n  Datamap.prototype.hrvTopo = '__HRV__';\n  Datamap.prototype.htiTopo = '__HTI__';\n  Datamap.prototype.hunTopo = '__HUN__';\n  Datamap.prototype.idnTopo = '__IDN__';\n  Datamap.prototype.imnTopo = '__IMN__';\n  Datamap.prototype.indTopo = '__IND__';\n  Datamap.prototype.ioaTopo = '__IOA__';\n  Datamap.prototype.iotTopo = '__IOT__';\n  Datamap.prototype.irlTopo = '__IRL__';\n  Datamap.prototype.irnTopo = '__IRN__';\n  Datamap.prototype.irqTopo = '__IRQ__';\n  Datamap.prototype.islTopo = '__ISL__';\n  Datamap.prototype.isrTopo = '__ISR__';\n  Datamap.prototype.itaTopo = '__ITA__';\n  Datamap.prototype.jamTopo = '__JAM__';\n  Datamap.prototype.jeyTopo = '__JEY__';\n  Datamap.prototype.jorTopo = '__JOR__';\n  Datamap.prototype.jpnTopo = '__JPN__';\n  Datamap.prototype.kabTopo = '__KAB__';\n  Datamap.prototype.kasTopo = '__KAS__';\n  Datamap.prototype.kazTopo = '__KAZ__';\n  Datamap.prototype.kenTopo = '__KEN__';\n  Datamap.prototype.kgzTopo = '__KGZ__';\n  Datamap.prototype.khmTopo = '__KHM__';\n  Datamap.prototype.kirTopo = '__KIR__';\n  Datamap.prototype.knaTopo = '__KNA__';\n  Datamap.prototype.korTopo = '__KOR__';\n  Datamap.prototype.kosTopo = '__KOS__';\n  Datamap.prototype.kwtTopo = '__KWT__';\n  Datamap.prototype.laoTopo = '__LAO__';\n  Datamap.prototype.lbnTopo = '__LBN__';\n  Datamap.prototype.lbrTopo = '__LBR__';\n  Datamap.prototype.lbyTopo = '__LBY__';\n  Datamap.prototype.lcaTopo = '__LCA__';\n  Datamap.prototype.lieTopo = '__LIE__';\n  Datamap.prototype.lkaTopo = '__LKA__';\n  Datamap.prototype.lsoTopo = '__LSO__';\n  Datamap.prototype.ltuTopo = '__LTU__';\n  Datamap.prototype.luxTopo = '__LUX__';\n  Datamap.prototype.lvaTopo = '__LVA__';\n  Datamap.prototype.macTopo = '__MAC__';\n  Datamap.prototype.mafTopo = '__MAF__';\n  Datamap.prototype.marTopo = '__MAR__';\n  Datamap.prototype.mcoTopo = '__MCO__';\n  Datamap.prototype.mdaTopo = '__MDA__';\n  Datamap.prototype.mdgTopo = '__MDG__';\n  Datamap.prototype.mdvTopo = '__MDV__';\n  Datamap.prototype.mexTopo = '__MEX__';\n  Datamap.prototype.mhlTopo = '__MHL__';\n  Datamap.prototype.mkdTopo = '__MKD__';\n  Datamap.prototype.mliTopo = '__MLI__';\n  Datamap.prototype.mltTopo = '__MLT__';\n  Datamap.prototype.mmrTopo = '__MMR__';\n  Datamap.prototype.mneTopo = '__MNE__';\n  Datamap.prototype.mngTopo = '__MNG__';\n  Datamap.prototype.mnpTopo = '__MNP__';\n  Datamap.prototype.mozTopo = '__MOZ__';\n  Datamap.prototype.mrtTopo = '__MRT__';\n  Datamap.prototype.msrTopo = '__MSR__';\n  Datamap.prototype.musTopo = '__MUS__';\n  Datamap.prototype.mwiTopo = '__MWI__';\n  Datamap.prototype.mysTopo = '__MYS__';\n  Datamap.prototype.namTopo = '__NAM__';\n  Datamap.prototype.nclTopo = '__NCL__';\n  Datamap.prototype.nerTopo = '__NER__';\n  Datamap.prototype.nfkTopo = '__NFK__';\n  Datamap.prototype.ngaTopo = '__NGA__';\n  Datamap.prototype.nicTopo = '__NIC__';\n  Datamap.prototype.niuTopo = '__NIU__';\n  Datamap.prototype.nldTopo = '__NLD__';\n  Datamap.prototype.nplTopo = '__NPL__';\n  Datamap.prototype.nruTopo = '__NRU__';\n  Datamap.prototype.nulTopo = '__NUL__';\n  Datamap.prototype.nzlTopo = '__NZL__';\n  Datamap.prototype.omnTopo = '__OMN__';\n  Datamap.prototype.pakTopo = '__PAK__';\n  Datamap.prototype.panTopo = '__PAN__';\n  Datamap.prototype.pcnTopo = '__PCN__';\n  Datamap.prototype.perTopo = '__PER__';\n  Datamap.prototype.pgaTopo = '__PGA__';\n  Datamap.prototype.phlTopo = '__PHL__';\n  Datamap.prototype.plwTopo = '__PLW__';\n  Datamap.prototype.pngTopo = '__PNG__';\n  Datamap.prototype.polTopo = '__POL__';\n  Datamap.prototype.priTopo = '__PRI__';\n  Datamap.prototype.prkTopo = '__PRK__';\n  Datamap.prototype.prtTopo = '__PRT__';\n  Datamap.prototype.pryTopo = '__PRY__';\n  Datamap.prototype.pyfTopo = '__PYF__';\n  Datamap.prototype.qatTopo = '__QAT__';\n  Datamap.prototype.rouTopo = '__ROU__';\n  Datamap.prototype.rusTopo = '__RUS__';\n  Datamap.prototype.rwaTopo = '__RWA__';\n  Datamap.prototype.sahTopo = '__SAH__';\n  Datamap.prototype.sauTopo = '__SAU__';\n  Datamap.prototype.scrTopo = '__SCR__';\n  Datamap.prototype.sdnTopo = '__SDN__';\n  Datamap.prototype.sdsTopo = '__SDS__';\n  Datamap.prototype.senTopo = '__SEN__';\n  Datamap.prototype.serTopo = '__SER__';\n  Datamap.prototype.sgpTopo = '__SGP__';\n  Datamap.prototype.sgsTopo = '__SGS__';\n  Datamap.prototype.shnTopo = '__SHN__';\n  Datamap.prototype.slbTopo = '__SLB__';\n  Datamap.prototype.sleTopo = '__SLE__';\n  Datamap.prototype.slvTopo = '__SLV__';\n  Datamap.prototype.smrTopo = '__SMR__';\n  Datamap.prototype.solTopo = '__SOL__';\n  Datamap.prototype.somTopo = '__SOM__';\n  Datamap.prototype.spmTopo = '__SPM__';\n  Datamap.prototype.srbTopo = '__SRB__';\n  Datamap.prototype.stpTopo = '__STP__';\n  Datamap.prototype.surTopo = '__SUR__';\n  Datamap.prototype.svkTopo = '__SVK__';\n  Datamap.prototype.svnTopo = '__SVN__';\n  Datamap.prototype.sweTopo = '__SWE__';\n  Datamap.prototype.swzTopo = '__SWZ__';\n  Datamap.prototype.sxmTopo = '__SXM__';\n  Datamap.prototype.sycTopo = '__SYC__';\n  Datamap.prototype.syrTopo = '__SYR__';\n  Datamap.prototype.tcaTopo = '__TCA__';\n  Datamap.prototype.tcdTopo = '__TCD__';\n  Datamap.prototype.tgoTopo = '__TGO__';\n  Datamap.prototype.thaTopo = '__THA__';\n  Datamap.prototype.tjkTopo = '__TJK__';\n  Datamap.prototype.tkmTopo = '__TKM__';\n  Datamap.prototype.tlsTopo = '__TLS__';\n  Datamap.prototype.tonTopo = '__TON__';\n  Datamap.prototype.ttoTopo = '__TTO__';\n  Datamap.prototype.tunTopo = '__TUN__';\n  Datamap.prototype.turTopo = '__TUR__';\n  Datamap.prototype.tuvTopo = '__TUV__';\n  Datamap.prototype.twnTopo = '__TWN__';\n  Datamap.prototype.tzaTopo = '__TZA__';\n  Datamap.prototype.ugaTopo = '__UGA__';\n  Datamap.prototype.ukrTopo = '__UKR__';\n  Datamap.prototype.umiTopo = '__UMI__';\n  Datamap.prototype.uryTopo = '__URY__';\n  Datamap.prototype.usaTopo = {\"type\":\"Topology\",\"transform\":{\"scale\":[0.03514630243024302,0.005240860686068607],\"translate\":[-178.123152,18.948267]},\"objects\":{\"usa\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Polygon\",\"id\":\"AL\",\"arcs\":[[0,1,2,3,4]],\"properties\":{\"name\":\"Alabama\"}},{\"type\":\"MultiPolygon\",\"id\":\"AK\",\"arcs\":[[[5]],[[6]],[[7]],[[8]],[[9]],[[10]],[[11]],[[12]],[[13]],[[14]],[[15]],[[16]],[[17]],[[18]],[[19]],[[20]],[[21]],[[22]],[[23]],[[24]],[[25]],[[26]],[[27]],[[28]],[[29]],[[30]],[[31]],[[32]],[[33]],[[34]],[[35]],[[36]],[[37]],[[38]],[[39]],[[40]],[[41]],[[42]],[[43]]],\"properties\":{\"name\":\"Alaska\"}},{\"type\":\"Polygon\",\"id\":\"AZ\",\"arcs\":[[44,45,46,47,48]],\"properties\":{\"name\":\"Arizona\"}},{\"type\":\"Polygon\",\"id\":\"AR\",\"arcs\":[[49,50,51,52,53,54]],\"properties\":{\"name\":\"Arkansas\"}},{\"type\":\"Polygon\",\"id\":\"CA\",\"arcs\":[[55,-47,56,57]],\"properties\":{\"name\":\"California\"}},{\"type\":\"Polygon\",\"id\":\"CO\",\"arcs\":[[58,59,60,61,62,63]],\"properties\":{\"name\":\"Colorado\"}},{\"type\":\"Polygon\",\"id\":\"CT\",\"arcs\":[[64,65,66,67]],\"properties\":{\"name\":\"Connecticut\"}},{\"type\":\"Polygon\",\"id\":\"DE\",\"arcs\":[[68,69,70,71]],\"properties\":{\"name\":\"Delaware\"}},{\"type\":\"Polygon\",\"id\":\"DC\",\"arcs\":[[72,73]],\"properties\":{\"name\":\"District of Columbia\"}},{\"type\":\"Polygon\",\"id\":\"FL\",\"arcs\":[[74,75,-2]],\"properties\":{\"name\":\"Florida\"}},{\"type\":\"Polygon\",\"id\":\"GA\",\"arcs\":[[76,77,-75,-1,78,79]],\"properties\":{\"name\":\"Georgia\"}},{\"type\":\"MultiPolygon\",\"id\":\"HI\",\"arcs\":[[[80]],[[81]],[[82]],[[83]],[[84]]],\"properties\":{\"name\":\"Hawaii\"}},{\"type\":\"Polygon\",\"id\":\"ID\",\"arcs\":[[85,86,87,88,89,90,91]],\"properties\":{\"name\":\"Idaho\"}},{\"type\":\"Polygon\",\"id\":\"IL\",\"arcs\":[[92,93,94,95,96,97]],\"properties\":{\"name\":\"Illinois\"}},{\"type\":\"Polygon\",\"id\":\"IN\",\"arcs\":[[98,99,-95,100,101]],\"properties\":{\"name\":\"Indiana\"}},{\"type\":\"Polygon\",\"id\":\"IA\",\"arcs\":[[102,-98,103,104,105,106]],\"properties\":{\"name\":\"Iowa\"}},{\"type\":\"Polygon\",\"id\":\"KS\",\"arcs\":[[107,108,-60,109]],\"properties\":{\"name\":\"Kansas\"}},{\"type\":\"Polygon\",\"id\":\"KY\",\"arcs\":[[110,111,112,113,-96,-100,114]],\"properties\":{\"name\":\"Kentucky\"}},{\"type\":\"Polygon\",\"id\":\"LA\",\"arcs\":[[115,116,117,-52]],\"properties\":{\"name\":\"Louisiana\"}},{\"type\":\"Polygon\",\"id\":\"ME\",\"arcs\":[[118,119]],\"properties\":{\"name\":\"Maine\"}},{\"type\":\"MultiPolygon\",\"id\":\"MD\",\"arcs\":[[[120]],[[-71,121,122,123,124,-74,125,126,127]]],\"properties\":{\"name\":\"Maryland\"}},{\"type\":\"Polygon\",\"id\":\"MA\",\"arcs\":[[128,129,130,131,-68,132,133,134]],\"properties\":{\"name\":\"Massachusetts\"}},{\"type\":\"MultiPolygon\",\"id\":\"MI\",\"arcs\":[[[-102,135,136]],[[137]],[[138,139]],[[140]]],\"properties\":{\"name\":\"Michigan\"}},{\"type\":\"Polygon\",\"id\":\"MN\",\"arcs\":[[-107,141,142,143,144]],\"properties\":{\"name\":\"Minnesota\"}},{\"type\":\"Polygon\",\"id\":\"MS\",\"arcs\":[[-4,145,-116,-51,146]],\"properties\":{\"name\":\"Mississippi\"}},{\"type\":\"Polygon\",\"id\":\"MO\",\"arcs\":[[-97,-114,147,-55,148,-108,149,-104]],\"properties\":{\"name\":\"Missouri\"}},{\"type\":\"Polygon\",\"id\":\"MT\",\"arcs\":[[150,151,-92,152,153]],\"properties\":{\"name\":\"Montana\"}},{\"type\":\"Polygon\",\"id\":\"NE\",\"arcs\":[[-105,-150,-110,-59,154,155]],\"properties\":{\"name\":\"Nebraska\"}},{\"type\":\"Polygon\",\"id\":\"NV\",\"arcs\":[[156,-48,-56,157,-88]],\"properties\":{\"name\":\"Nevada\"}},{\"type\":\"Polygon\",\"id\":\"NH\",\"arcs\":[[-135,158,159,-120,160]],\"properties\":{\"name\":\"New Hampshire\"}},{\"type\":\"Polygon\",\"id\":\"NJ\",\"arcs\":[[161,-69,162,163]],\"properties\":{\"name\":\"New Jersey\"}},{\"type\":\"Polygon\",\"id\":\"NM\",\"arcs\":[[164,165,166,-45,-62]],\"properties\":{\"name\":\"New Mexico\"}},{\"type\":\"Polygon\",\"id\":\"NY\",\"arcs\":[[-133,-67,167,-164,168,169,170]],\"properties\":{\"name\":\"New York\"}},{\"type\":\"Polygon\",\"id\":\"NC\",\"arcs\":[[171,172,-80,173,174]],\"properties\":{\"name\":\"North Carolina\"}},{\"type\":\"Polygon\",\"id\":\"ND\",\"arcs\":[[175,-154,176,-143]],\"properties\":{\"name\":\"North Dakota\"}},{\"type\":\"Polygon\",\"id\":\"OH\",\"arcs\":[[177,-115,-99,-137,178,179]],\"properties\":{\"name\":\"Ohio\"}},{\"type\":\"Polygon\",\"id\":\"OK\",\"arcs\":[[-149,-54,180,-165,-61,-109]],\"properties\":{\"name\":\"Oklahoma\"}},{\"type\":\"Polygon\",\"id\":\"OR\",\"arcs\":[[-89,-158,-58,181,182]],\"properties\":{\"name\":\"Oregon\"}},{\"type\":\"Polygon\",\"id\":\"PA\",\"arcs\":[[-163,-72,-128,183,-180,184,-169]],\"properties\":{\"name\":\"Pennsylvania\"}},{\"type\":\"MultiPolygon\",\"id\":\"RI\",\"arcs\":[[[185,-130]],[[186,-65,-132]]],\"properties\":{\"name\":\"Rhode Island\"}},{\"type\":\"Polygon\",\"id\":\"SC\",\"arcs\":[[187,-77,-173]],\"properties\":{\"name\":\"South Carolina\"}},{\"type\":\"Polygon\",\"id\":\"SD\",\"arcs\":[[-142,-106,-156,188,-151,-176]],\"properties\":{\"name\":\"South Dakota\"}},{\"type\":\"Polygon\",\"id\":\"TN\",\"arcs\":[[189,-174,-79,-5,-147,-50,-148,-113]],\"properties\":{\"name\":\"Tennessee\"}},{\"type\":\"Polygon\",\"id\":\"TX\",\"arcs\":[[-53,-118,190,-166,-181]],\"properties\":{\"name\":\"Texas\"}},{\"type\":\"Polygon\",\"id\":\"UT\",\"arcs\":[[191,-63,-49,-157,-87]],\"properties\":{\"name\":\"Utah\"}},{\"type\":\"Polygon\",\"id\":\"VT\",\"arcs\":[[-134,-171,192,-159]],\"properties\":{\"name\":\"Vermont\"}},{\"type\":\"MultiPolygon\",\"id\":\"VA\",\"arcs\":[[[193,-123]],[[120]],[[-126,-73,-125,194,-175,-190,-112,195]]],\"properties\":{\"name\":\"Virginia\"}},{\"type\":\"MultiPolygon\",\"id\":\"WA\",\"arcs\":[[[-183,196,-90]],[[197]],[[198]]],\"properties\":{\"name\":\"Washington\"}},{\"type\":\"Polygon\",\"id\":\"WV\",\"arcs\":[[-184,-127,-196,-111,-178]],\"properties\":{\"name\":\"West Virginia\"}},{\"type\":\"Polygon\",\"id\":\"WI\",\"arcs\":[[199,-93,-103,-145,200,-140]],\"properties\":{\"name\":\"Wisconsin\"}},{\"type\":\"Polygon\",\"id\":\"WY\",\"arcs\":[[-189,-155,-64,-192,-86,-152]],\"properties\":{\"name\":\"Wyoming\"}}]}},\"arcs\":[[[2632,3060],[5,-164],[7,-242],[4,-53],[3,-30],[-2,-19],[4,-11],[-5,-25],[0,-24],[-2,-32],[2,-57],[-2,-51],[3,-52]],[[2649,2300],[-14,-1],[-59,0],[-1,-25],[6,-37],[-1,-31],[2,-16],[-4,-28]],[[2578,2162],[-4,-6],[-7,31],[-1,47],[-2,6],[-3,-36],[-1,-34],[-7,9]],[[2553,2179],[-2,291],[6,363],[4,209],[-3,20]],[[2558,3062],[24,1],[50,-3]],[[1324,6901],[1,32],[6,-19],[-1,-32],[-8,4],[2,15]],[[1317,6960],[5,-23],[-3,-33],[-2,11],[0,45]],[[1285,7153],[6,5],[3,-8],[-1,-28],[-6,-6],[-5,17],[3,20]],[[1267,7137],[12,-7],[3,-36],[13,-41],[4,-25],[0,-21],[3,-4],[1,-27],[5,-27],[0,-25],[3,8],[2,-19],[1,-74],[-3,-17],[-7,3],[-3,38],[-2,-3],[-6,28],[-2,-10],[-5,10],[1,-28],[5,7],[3,-10],[-2,-39],[-5,4],[-9,49],[-2,25],[1,26],[-7,-2],[0,20],[5,2],[5,18],[-2,31],[-6,7],[-1,50],[-2,25],[-4,-18],[-2,28],[4,14],[-3,32],[2,8]],[[1263,6985],[5,-12],[4,15],[4,-7],[-4,-28],[-6,8],[-3,24]],[[1258,7247],[-4,19],[5,13],[15,-18],[7,1],[5,-36],[9,-29],[-1,-22],[-5,-11],[-6,5],[-5,-14],[-6,9],[-7,-9],[-1,45],[0,30],[-5,1],[-1,16]],[[1252,7162],[-4,14],[-4,32],[0,24],[3,11],[4,-11],[0,20],[12,-35],[1,-33],[-4,-5],[-3,-37],[3,-11],[-3,-43],[-5,9],[0,-27],[-3,13],[-2,54],[5,25]],[[1207,7331],[8,38],[3,-16],[7,-13],[6,-2],[0,-30],[6,-99],[0,-85],[-1,-22],[-4,13],[-10,84],[-7,25],[3,20],[-3,48],[-8,39]],[[1235,7494],[10,-15],[5,2],[0,-14],[8,-52],[-5,8],[-2,-18],[6,-27],[2,-48],[-6,-13],[-2,-16],[-10,-35],[-3,1],[-1,37],[2,22],[-1,32],[-3,40],[0,21],[-2,51],[-4,22],[-1,38],[7,-36]],[[1203,7324],[4,0],[4,-35],[-2,-24],[-6,-5],[0,38],[0,26]],[[1207,7331],[-5,7],[-3,26],[-6,18],[-5,37],[-6,17],[1,30],[4,10],[1,26],[3,-11],[8,-1],[6,17],[8,-23],[-5,-26],[2,-9],[4,28],[10,-9],[5,-21],[-3,-38],[3,-3],[3,-50],[-7,-7],[-14,41],[0,-42],[-4,-17]],[[883,7871],[-12,-48],[-1,-19],[-9,-12],[2,29],[10,30],[7,34],[3,-14]],[[870,7943],[-2,-39],[-4,-41],[-6,14],[5,47],[7,19]],[[863,9788],[3,-8],[15,-9],[8,5],[10,0],[12,-7],[7,4],[7,-15],[12,-18],[16,-4],[5,10],[11,6],[4,14],[12,2],[0,-9],[7,5],[15,-15],[9,-24],[10,-11],[2,-11],[8,-2],[8,-18],[1,-11],[5,9],[6,-7],[0,-1783],[13,-16],[2,17],[14,-24],[8,30],[18,4],[-3,-52],[4,-17],[10,-17],[2,-27],[29,-101],[4,-63],[6,17],[12,31],[7,1],[3,23],[0,34],[5,0],[1,31],[9,7],[13,26],[13,-45],[-1,-27],[3,-27],[7,-7],[10,-40],[-1,-12],[4,-22],[12,-25],[19,-110],[3,-29],[6,-29],[8,-65],[9,-55],[-3,-23],[9,-9],[-2,-33],[7,-14],[1,-38],[7,2],[14,-40],[9,-7],[5,-19],[4,-5],[1,-19],[9,-5],[3,-23],[-4,-43],[1,-36],[4,-58],[-4,-15],[-6,-53],[-10,-39],[-3,20],[-4,-6],[-3,39],[1,17],[-3,20],[7,21],[-2,7],[-7,-26],[-3,17],[-4,-10],[-12,42],[4,46],[-8,-15],[0,-23],[-6,17],[-1,22],[4,24],[-1,24],[-6,-19],[-6,42],[-3,-8],[-2,36],[5,23],[6,0],[-2,28],[3,36],[-5,-1],[-9,32],[-6,37],[-15,27],[0,77],[-4,9],[1,31],[-5,9],[-8,42],[-2,22],[-12,7],[-14,56],[-6,132],[-3,-30],[1,-27],[6,-53],[-1,-8],[3,-43],[0,-28],[-6,6],[-4,31],[-6,6],[-8,-9],[0,45],[-5,38],[-5,-12],[-17,40],[-2,-11],[10,-13],[7,-31],[3,-1],[1,-25],[4,-30],[-10,-16],[-5,10],[0,-26],[-8,20],[-2,14],[-5,0],[-13,38],[-10,33],[-1,20],[-5,30],[-14,21],[-9,21],[-14,26],[-9,24],[1,26],[2,-9],[3,17],[-3,38],[4,21],[-2,9],[-7,-40],[-14,-26],[-18,10],[-14,24],[-1,18],[-7,-4],[-7,14],[-17,12],[-9,1],[-21,-10],[-8,-7],[-10,27],[-12,12],[-3,17],[-2,28],[-8,-2],[-3,-25],[-15,34],[-2,14],[-15,-27],[-7,-32],[-3,30],[3,17],[4,-5],[14,22],[-2,17],[-6,-8],[-3,22],[-6,3],[-6,55],[-3,-13],[-8,-8],[-3,8],[-3,-18],[-11,6],[-1,-20],[-7,-5],[-3,7],[2,36],[-3,-1],[-5,-38],[7,-12],[1,-27],[4,-30],[-3,-31],[-5,10],[-2,-15],[6,-7],[3,-41],[-8,-9],[-4,9],[-7,-12],[-3,10],[-9,-2],[0,16],[-4,-10],[-3,-20],[-3,18],[-5,-25],[2,-12],[-6,-15],[-6,-2],[-3,-20],[-6,-17],[-4,6],[-5,-21],[-4,1],[-8,-43],[-9,-3],[-3,14],[-5,-23],[-11,17],[2,33],[8,11],[4,-2],[2,13],[8,25],[0,21],[-11,-28],[-9,16],[-1,12],[5,48],[8,34],[1,29],[2,5],[1,30],[-4,34],[10,12],[19,48],[4,-19],[6,-5],[9,20],[-10,26],[-4,20],[-7,-2],[-5,9],[-2,-8],[-9,-14],[-4,-26],[-9,-6],[-9,-30],[-1,-20],[-7,-11],[-2,-22],[-5,-13],[-2,-39],[-10,-25],[5,-20],[-4,-29],[-9,-5],[-1,-38],[-8,-13],[-3,15],[-4,-29],[-5,-1],[1,-21],[-11,-13],[-2,-57],[12,-3],[10,-16],[3,-19],[-4,-30],[-7,-19],[-6,-1],[0,-17],[-4,-6],[1,-21],[-4,-31],[-9,-29],[-5,0],[-5,-11],[-5,2],[-4,-11],[2,-16],[-7,-8],[-2,-23],[-5,14],[-5,-45],[-9,4],[1,-24],[-6,6],[-3,-11],[0,-32],[-6,-50],[-10,-6],[-7,-23],[-2,-13],[-5,18],[-8,-48],[-2,13],[-5,-4],[-1,-27],[-5,-10],[-6,4],[-4,-27],[8,-9],[-9,-60],[-25,-20],[-6,-54],[-2,12],[1,33],[-5,6],[-6,-13],[-1,-14],[-10,-22],[-4,-25],[-1,18],[-2,-21],[-6,14],[-10,-33],[-8,2],[1,25],[-4,24],[-3,-20],[1,-21],[-11,-64],[-3,16],[-1,-24],[-8,4],[-1,38],[-4,8],[-2,-14],[4,-16],[-2,-27],[-5,-13],[-5,29],[-5,2],[-1,-11],[5,-17],[-9,-27],[6,-7],[0,-13],[-5,9],[-7,-25],[-15,1],[-7,-16],[0,-13],[-8,-15],[-6,6],[-2,35],[6,12],[4,43],[6,1],[13,28],[10,1],[4,-27],[3,20],[-1,23],[6,10],[7,0],[8,50],[10,45],[12,40],[15,18],[6,-9],[6,12],[1,-17],[-3,-19],[4,-14],[1,23],[7,2],[2,-15],[5,-5],[0,18],[-8,15],[0,11],[5,49],[6,28],[9,27],[15,24],[10,35],[5,-13],[4,5],[-1,22],[1,21],[8,44],[11,28],[8,38],[0,21],[7,148],[11,40],[-1,31],[-27,-45],[-8,6],[-2,18],[-5,9],[-1,21],[-4,-10],[-3,-32],[5,-41],[-6,-18],[-5,7],[-9,64],[-6,33],[-4,0],[-2,-24],[-3,-4],[-4,19],[-5,4],[-2,32],[-16,-37],[-13,-26],[-1,-14],[-11,-22],[-6,20],[5,23],[-1,54],[-4,57],[7,24],[-6,49],[-5,27],[-4,39],[-6,17],[-2,-34],[-7,-8],[-12,-22],[-14,-9],[-7,2],[-7,12],[-1,30],[-5,9],[-9,42],[-8,8],[-8,46],[6,21],[1,39],[-5,-8],[0,24],[2,19],[-6,18],[0,-19],[-7,8],[-1,32],[-6,4],[-3,22],[0,27],[-5,-12],[-1,26],[7,6],[-6,30],[10,2],[0,35],[2,24],[18,77],[4,23],[3,-5],[-2,33],[7,55],[6,22],[11,9],[8,-9],[12,-33],[8,4],[11,32],[11,49],[6,6],[1,-13],[13,0],[12,10],[11,52],[0,12],[-5,48],[-1,28],[-8,31],[-3,26],[8,-7],[8,22],[0,20],[-10,39],[-8,-30],[-7,5],[-6,-17],[-8,-4],[-2,-11],[-9,-17],[-2,-28],[-5,-12],[-2,34],[-5,7],[-4,-26],[-2,12],[-10,19],[-20,-1],[-14,-21],[-6,-3],[-11,13],[-22,14],[-6,12],[-3,19],[2,26],[-8,22],[2,24],[5,12],[-2,31],[-8,0],[-6,8],[-13,6],[-7,16],[-10,16],[-1,19],[16,27],[20,43],[15,27],[8,-15],[8,-3],[2,21],[-5,3],[-1,18],[20,29],[22,22],[12,2],[7,-7],[-4,-32],[2,-22],[-3,-15],[4,-26],[8,5],[10,-5],[11,6],[4,-10],[7,-2],[7,10],[8,-11],[9,42],[5,2],[5,-8],[2,24],[-12,11],[-11,-9],[1,31],[-8,34],[-10,10],[-2,30],[7,8],[9,-31],[-1,-24],[4,-18],[10,-22],[2,23],[-11,30],[5,54],[-4,10],[-11,-12],[-11,3],[-2,10],[-6,-10],[-24,23],[0,24],[-7,54],[-6,19],[-9,17],[-19,46],[-9,18],[-8,4],[-13,31],[-12,18],[-1,6],[9,10],[4,29],[1,59],[25,-4],[31,13],[8,11],[12,29],[12,45],[3,45],[5,38],[10,33],[5,24],[13,38],[2,-10],[11,-3],[16,20],[10,21],[24,64],[9,4],[1,-10],[9,7],[9,-2],[18,9],[17,28],[17,58],[7,13],[2,-10],[26,-24],[2,-17],[-9,-22],[-4,-1],[0,-29],[14,9],[0,16],[6,14],[2,-8],[5,33],[13,-30],[-2,-23],[8,-6],[5,-14],[7,22],[13,1],[7,7],[18,-7],[10,-8],[-5,-45],[17,-12],[2,-11],[16,-20],[1,9],[12,13],[11,-1],[0,-11],[7,-1],[7,15],[11,2],[9,-6],[11,-16],[5,3],[7,-22],[4,9],[7,-7],[5,-13]],[[717,7456],[-1,-8],[-9,13],[7,49],[6,4],[4,45],[5,-40],[4,14],[8,-22],[0,-31],[-11,-4],[-5,-13],[-8,-7]],[[688,7363],[8,25],[-8,6],[0,22],[6,14],[5,-10],[0,-22],[3,15],[0,32],[5,-15],[1,21],[5,-12],[5,0],[5,11],[7,-20],[0,-55],[9,4],[-6,-37],[-11,15],[4,-24],[-3,-20],[-6,10],[0,-38],[-8,-10],[-3,-16],[-5,15],[-6,-40],[-4,-4],[-5,-18],[-2,43],[-6,-23],[-1,13],[-6,14],[0,39],[-6,15],[4,45],[11,28],[7,-2],[1,-21]],[[671,7185],[-6,-39],[-2,6],[8,33]],[[640,7055],[4,-2],[-1,-40],[-8,6],[-1,13],[6,23]],[[519,6933],[-2,-41],[-9,-33],[5,51],[2,-5],[4,28]],[[501,6947],[5,0],[0,-20],[-5,-23],[-5,15],[-3,-14],[-2,35],[2,12],[8,-5]],[[451,6875],[1,-16],[-3,-11],[-3,18],[5,9]],[[447,8527],[-4,-19],[-2,16],[6,3]],[[436,6781],[6,-7],[-1,-16],[-5,1],[0,22]],[[358,6745],[2,-22],[-5,-10],[-1,23],[4,9]],[[352,6718],[-8,-21],[-2,14],[3,19],[7,-12]],[[335,7902],[6,7],[2,-14],[5,3],[6,-12],[1,-54],[-3,-18],[-7,-11],[-2,-18],[-11,20],[-5,-1],[-10,28],[-4,0],[-6,15],[-3,25],[4,7],[10,-7],[5,20],[5,2],[3,14],[4,-6]],[[334,6690],[5,-14],[-10,-36],[1,-6],[12,26],[0,-15],[-5,-17],[-8,-12],[-1,-18],[-8,-18],[-7,-1],[-5,-18],[-9,-16],[-5,17],[9,20],[3,-3],[8,16],[-2,19],[4,20],[6,-9],[1,12],[-7,4],[-4,14],[4,23],[11,13],[2,-26],[5,25]],[[266,6527],[10,37],[1,16],[4,17],[7,9],[3,-10],[1,-25],[-12,-27],[-6,-40],[-6,-13],[-2,36]],[[238,6477],[2,-19],[-8,-1],[-1,13],[7,7]],[[227,7303],[-4,-18],[-1,18],[5,0]],[[212,6440],[2,-18],[-5,-13],[-1,19],[4,12]],[[182,8542],[22,-28],[13,24],[6,-2],[5,-14],[2,-23],[11,-12],[4,-12],[15,-5],[8,-8],[-4,-28],[-7,6],[-8,-5],[-4,-13],[-4,-28],[-5,26],[-6,18],[-6,2],[-3,20],[-15,25],[-6,1],[-11,-22],[-7,11],[-4,23],[4,44]],[[162,6381],[0,-22],[-5,-4],[1,19],[4,7]],[[128,6335],[4,-8],[10,1],[1,-7],[-13,-9],[-2,23]],[[108,6360],[0,19],[4,7],[6,-19],[-2,-17],[-4,1],[1,-20],[-5,-2],[-12,-21],[-6,6],[2,15],[7,-2],[9,33]],[[47,6279],[5,3],[0,-24],[-6,3],[-8,-28],[-4,37],[4,1],[0,29],[5,1],[0,-21],[4,-1]],[[28,6296],[3,-9],[-2,-32],[-5,-10],[0,20],[4,31]],[[0,6291],[5,-1],[4,-23],[-4,-27],[-5,51]],[[9993,6496],[6,-13],[0,-19],[-11,-12],[-8,31],[0,15],[13,-2]],[[1966,3444],[-1,-1081]],[[1965,2363],[-57,0],[-34,71],[-73,150],[3,43]],[[1804,2627],[6,8],[1,16],[-1,36],[-4,1],[-2,71],[6,27],[0,28],[-1,45],[4,34],[4,12],[4,25],[-6,27],[-4,51],[-5,31],[0,24]],[[1806,3063],[2,26],[0,36],[-3,36],[-2,112],[11,7],[3,-23],[3,1],[3,33],[0,153]],[[1823,3444],[101,2],[42,-2]],[[2515,3253],[-1,-35],[-4,-11],[-1,-29],[-5,-31],[0,-46],[-3,-34],[-3,-5]],[[2498,3062],[2,-17],[-4,-14],[-2,-33],[-3,-8],[0,-38],[-5,-10],[0,-13],[-6,-31],[2,-21],[-5,-30],[-5,-59],[5,-25],[-2,-16],[1,-39],[-2,-26]],[[2474,2682],[-69,3],[-13,0]],[[2392,2685],[0,101],[-4,8],[-5,-9],[-3,18]],[[2380,2803],[1,335],[-5,211]],[[2376,3349],[4,0],[123,-1],[2,-36],[-4,-23],[-4,-36],[18,0]],[[1654,4398],[0,-331],[0,-241],[36,-171],[35,-169],[27,-137],[20,-101],[34,-185]],[[1804,2627],[-38,-18],[-30,-16],[-4,25],[0,40],[-2,47],[-4,33],[-9,46],[-12,43],[-2,-12],[-4,8],[1,18],[-5,39],[-7,-8],[-12,28],[-2,23],[-8,28],[-9,-1],[-7,13],[-10,-6],[-5,26],[1,53],[-1,8],[1,38],[-8,28],[0,39],[-3,2],[-4,33],[-4,8],[-1,20],[-11,79],[-5,23],[-1,61],[2,-5],[2,37],[-4,33],[-5,-4],[-7,30],[-2,24],[0,23],[-3,31],[0,50],[5,0],[-2,70],[-2,-7],[-1,-35],[-5,-7],[-7,26],[-1,45],[-4,35],[-6,22],[-3,25],[-9,50],[2,14],[-4,64],[2,35],[-3,54],[-7,52],[-7,29],[-2,35],[7,83],[2,29],[-2,22],[3,57],[-2,52],[-3,13],[1,42]],[[1534,4399],[28,1],[24,1],[38,-3],[30,0]],[[2107,4208],[57,0],[0,-191]],[[2164,4017],[1,-574]],[[2165,3443],[-28,1]],[[2137,3444],[-38,-1],[-72,0],[-15,1],[-46,0]],[[1966,3444],[0,223],[-1,21],[0,162],[0,357]],[[1965,4207],[32,1],[63,-1],[47,1]],[[3025,4400],[0,-113],[-2,-18]],[[3023,4269],[-2,3],[-12,-14],[-15,4],[-7,-26],[-7,-9],[-8,-22]],[[2972,4205],[-2,22],[7,21],[-2,16],[2,144]],[[2977,4408],[12,-2],[36,-3],[0,-3]],[[2922,3980],[-2,-23]],[[2920,3957],[-3,-13],[0,-30],[5,-29],[1,-47],[6,-49],[3,-2],[1,-66]],[[2933,3721],[-19,2],[-2,241]],[[2912,3964],[5,21],[5,-5]],[[2876,3786],[-2,27]],[[2874,3813],[2,12],[4,-19],[-4,-20]],[[2649,2300],[4,-55],[39,-13],[37,-14],[1,-41],[4,1],[1,39],[-1,35],[2,15],[7,-16],[8,-7]],[[2751,2244],[1,-83],[4,-93],[8,-122],[13,-131],[-2,-9],[1,-61],[5,-68],[8,-137],[2,-42],[0,-44],[-3,-158],[-3,-3],[-3,-49],[1,-16],[-5,-36],[-2,9],[-6,-15],[-9,-8],[-2,20],[1,29],[-7,85],[-5,15],[-4,-11],[-3,47],[-1,38],[-6,43],[-2,28],[1,41],[-3,8],[1,-24],[-3,-7],[-9,104],[-4,26],[9,76],[-6,-4],[-4,-24],[-3,38],[5,104],[1,87],[-4,21],[-1,28],[-5,6],[-7,46],[-5,19],[0,28],[-4,11],[-3,31],[-11,42],[-9,-10],[0,-29],[-3,5],[-12,-35],[-12,-9],[0,21],[-3,25],[-15,57],[-10,24],[-10,6],[-8,-4],[-17,-18]],[[2703,3063],[-6,-41],[0,-20],[9,-40],[3,3],[5,-42],[1,-22],[4,-40],[7,-24],[3,-35],[8,-33],[0,-22],[5,-35],[7,-29],[2,-32],[1,-40],[3,-14],[5,-51],[0,-33],[7,-16]],[[2767,2497],[-7,-65],[-2,-34],[-3,-29],[0,-30],[-3,-14],[-1,-81]],[[2632,3060],[37,1]],[[2669,3061],[20,-1],[14,3]],[[640,0],[-7,17],[-1,16],[1,43],[-5,73],[4,24],[2,34],[-2,22],[1,23],[8,-27],[9,-20],[5,-29],[0,-26],[8,-40],[-5,-34],[-8,-15],[-7,-25],[-3,-36]],[[613,397],[3,-26],[4,11],[9,-30],[-1,-27],[-9,-14],[-2,6],[-1,33],[-5,7],[-1,19],[3,21]],[[602,432],[-3,-20],[-7,0],[2,22],[8,-2]],[[574,525],[3,-45],[-2,-26],[-6,-5],[-4,54],[4,1],[5,21]],[[531,626],[3,-2],[2,-20],[-1,-28],[-4,-18],[-9,22],[1,31],[8,15]],[[1908,4871],[0,-472]],[[1908,4399],[-31,-1],[-54,0]],[[1823,4398],[-85,1]],[[1738,4399],[0,349],[4,62],[-2,16],[-6,3],[-2,26],[6,68],[3,6],[3,29],[-1,17],[4,23],[1,34],[6,56],[-2,26],[-7,14],[-4,32]],[[1741,5160],[0,34],[-3,33],[0,16],[0,255],[0,236]],[[1738,5734],[28,0]],[[1766,5734],[0,-195],[9,-54],[1,-52],[5,-23],[6,-8],[0,-14],[11,-51],[1,-21],[8,-20],[0,-12],[8,1],[-4,-71],[-1,-45],[3,-29],[-5,-21],[2,-20],[-1,-21],[6,-20],[7,26],[3,21],[5,-19],[-1,-15],[3,-37],[5,-39],[3,-13],[0,-37],[3,-16],[6,-2],[4,-61],[3,-11],[3,18],[9,-1],[7,17],[3,-10],[7,9],[2,-11],[5,8],[7,39],[4,-33],[5,-20]],[[2489,4496],[53,-3],[28,0]],[[2570,4493],[-1,-37],[4,-43],[5,-70]],[[2578,4343],[0,-450],[-3,-35],[3,-40],[1,-34],[-4,-27],[-1,-25],[-5,-41],[-3,-3],[0,-24],[-2,-9],[-1,-45],[0,-13]],[[2563,3597],[-3,-27],[2,-34],[-11,-17],[-1,-20],[2,-25],[-3,-16],[-11,29],[-3,-2],[-4,-33],[1,-11]],[[2532,3441],[-5,2],[-6,55],[2,12],[-2,37],[0,29],[-9,41],[-3,-4],[-3,25],[-9,38],[0,31],[5,49],[-1,18],[3,23],[-4,13],[-6,9],[-3,-18],[-3,11],[-1,63],[-10,41],[-9,49],[-3,58],[-1,39],[3,27]],[[2467,4089],[0,35],[8,21],[1,29],[4,19],[0,33],[-4,27],[2,34],[11,9],[9,24],[0,29],[4,13],[1,37],[0,24],[-7,18],[-1,20],[-6,35]],[[2655,4340],[0,-228],[0,-266]],[[2655,3846],[-2,-9],[2,-52],[-5,-1],[-5,-18],[-8,9],[1,-38],[-5,-16],[-2,-24],[-5,-9],[-3,-48],[-3,-13],[-6,18],[-1,22],[-7,-24],[1,-21],[-7,-7],[-1,19],[-8,-19],[-2,-20],[-7,28],[-4,-6],[-2,13],[-3,-13],[-7,-2],[-3,-18]],[[2578,4343],[3,-12],[8,0],[9,22]],[[2598,4353],[23,0],[34,0],[0,-13]],[[2473,4685],[0,-28],[4,-19],[-3,-23],[1,-43],[2,-30],[10,-22],[2,-24]],[[2467,4089],[-3,7],[-6,38],[-3,-1],[-40,-5],[-39,-2],[-33,3]],[[2343,4129],[-3,25],[2,49],[-3,43],[0,48],[-5,17],[-1,26],[2,23],[-2,33],[-4,13],[-5,86]],[[2324,4492],[-5,41],[2,29],[1,37],[2,14],[-3,19],[1,33],[-2,16],[4,4]],[[2324,4685],[144,0],[5,0]],[[2356,4017],[3,-18],[9,-14],[-6,-56],[4,-18],[4,-45],[6,-10],[0,-412]],[[2376,3444],[-156,0],[-55,-1]],[[2164,4017],[5,0],[187,0]],[[2718,3716],[-1,-57],[4,-37],[4,-28],[2,-22],[5,-22],[4,-3]],[[2736,3547],[-11,-51],[-11,-29],[0,-14],[-4,-13],[0,-16],[-6,-8],[-1,-21],[-16,-27]],[[2687,3368],[0,-3],[-24,2],[-22,6],[-5,-2],[-32,8],[-36,-5],[-6,9],[1,-35],[-36,2],[-3,-2]],[[2524,3348],[1,24],[5,-8],[2,77]],[[2655,3846],[11,0],[5,-40],[1,-17],[9,-7],[6,-26],[5,13],[10,-14],[4,19],[4,6],[1,-32],[3,-6],[4,-26]],[[2474,2682],[3,-22],[-2,-9],[-1,-38],[5,-24],[0,-57],[-3,-44],[-7,-27],[-2,-43],[-2,4],[-1,-70],[-3,-2],[2,-37],[-2,-14],[54,0],[-3,-63],[4,-41],[1,-32],[4,-20]],[[2521,2143],[-9,-26],[0,-19],[7,-12],[3,30],[6,-30],[-1,-24],[-3,-11],[-7,10],[1,-18],[-2,-27],[5,-24],[9,-7],[3,-29],[3,-4],[-5,-32],[-5,6],[-4,33],[-10,18],[0,33],[-6,-11],[1,-27],[-3,-25],[-3,-4],[-3,28],[-7,1],[-2,-29],[-4,-9],[-5,18],[-4,2],[-3,47],[-7,21],[-2,-3],[-3,40],[-7,-5],[0,24],[-8,-23],[1,-18],[-5,-17],[-9,8],[-10,27],[-7,11],[-16,-9],[-2,-8]],[[2398,2049],[-2,19],[6,68],[-2,37],[2,20],[-1,26],[3,19],[3,50],[0,40],[-8,78],[0,41],[-7,42],[0,196]],[[3046,5029],[12,26],[-2,13],[5,30],[4,13],[-1,12],[5,18],[-1,33],[2,50],[5,17],[1,53],[22,147],[6,-7],[0,-35],[4,-13],[9,21],[6,0],[4,14],[8,-31],[4,-25],[1,-214],[-1,-51],[10,-14],[-2,-22],[3,-21],[-2,-18],[4,-30],[5,7],[5,-68],[-6,-31],[-3,12],[-3,-21],[-4,5],[0,-18],[-6,2],[-8,-40],[-2,28],[-3,2],[1,-30],[-6,-15],[-2,24],[-3,-12],[-7,0],[0,28],[-5,-6],[1,-20],[-4,-42],[1,-12],[-6,-23],[-5,9],[-3,-24],[-4,-3],[-4,-20],[-4,4],[-1,21],[-7,-34],[2,-21],[-5,-7],[0,-18],[-5,-22],[-5,-50]],[[3056,4600],[-3,14],[0,19],[-4,22],[-2,250],[-1,124]],[[2904,3626],[2,0],[-1,0],[-1,0]],[[2933,3721],[-6,-80]],[[2927,3641],[-4,-3],[-8,-12]],[[2915,3626],[-6,-8],[0,31],[-2,13],[3,13],[-4,32],[-2,-14],[-6,3],[-2,35],[2,0],[0,45],[2,18],[-2,60],[3,36],[5,6],[0,37],[-3,-5],[0,-18],[-8,-25],[-2,-21],[0,-56],[-3,-26],[1,-44],[4,-30],[-1,-23],[3,-23],[-2,-16],[-6,30],[-10,15],[-2,29],[-6,-16],[-2,23],[5,29]],[[2874,3756],[2,30]],[[2874,3813],[-4,18],[-6,10],[0,28],[-3,15],[-4,4]],[[2857,3888],[-4,53],[-4,0],[-5,18],[-3,-15],[-5,1],[-1,-21],[-8,14],[-6,-28],[-3,6],[-6,-33],[-6,-17],[1,98]],[[2807,3964],[105,0]],[[3053,4565],[1,-34],[-1,-27],[-5,-25],[0,-29],[6,-4],[4,-31],[0,-24],[3,-6],[0,-22],[8,-19],[9,18],[-2,-26],[-13,-23],[-5,-1],[-3,18],[-5,-6],[0,-13],[-5,-9]],[[3045,4302],[-3,35]],[[3042,4337],[0,6]],[[3042,4343],[-3,14],[-2,45],[-4,0],[-8,-2]],[[2977,4408],[0,7],[6,126]],[[2983,4541],[23,-3]],[[3006,4538],[34,-7],[3,18],[7,19],[3,-3]],[[2598,4353],[5,25],[4,43],[4,26],[3,36],[1,52],[0,57],[-9,111],[3,42],[-2,50],[6,51],[2,43],[-1,23],[5,9],[0,31],[8,9],[5,34],[0,-69],[3,-3],[3,35],[1,58],[2,15],[8,9],[-3,41],[5,35],[7,2],[7,-22],[7,-3],[3,-28],[6,-2],[9,-25],[3,1],[4,-41],[-3,-21],[3,-29],[2,-32],[-2,-71],[-6,-18],[-1,-37],[-7,-12],[-4,-44],[2,-17],[6,-15],[6,24],[6,49],[10,19],[5,-15],[3,-27],[3,-80],[0,-39],[3,-48],[-3,-69],[-4,-11],[-1,25],[-3,-7],[-3,-58],[-6,-21],[-2,-44],[-7,-37],[0,-16]],[[2694,4347],[-39,-7]],[[2635,5110],[1,-23],[-4,-4],[1,33],[2,-6]],[[2496,5270],[11,20],[5,23],[12,9],[8,29],[4,1],[3,20],[9,28],[4,24],[7,15],[6,-13],[-11,-59],[-2,-19],[0,-36],[5,27],[10,-4],[8,-19],[7,-52],[3,-10],[7,9],[2,-12],[7,-6],[16,44],[8,4],[10,-2],[7,15],[6,1],[1,-54],[5,-7],[6,8],[2,-12],[4,16],[8,5],[1,-67],[3,-28],[6,-8],[1,19],[5,0],[3,-20],[-3,-14],[-15,12],[-8,-8],[-8,23],[-2,-21],[1,-18],[-4,4],[-5,27],[-9,15],[-5,1],[-4,-25],[-8,-6],[-8,5],[-3,-10],[-1,-21],[-9,-18],[1,25],[-4,5],[-2,-26],[-6,-1],[-3,-11],[-5,-45],[-8,-58],[1,-5]],[[2576,4989],[-4,20],[2,27],[-7,4],[3,26],[0,34],[-5,23],[-4,24],[-12,19],[-4,-7],[-12,29],[-29,38],[-3,33],[-5,11]],[[2541,5539],[-7,-24],[-4,-3],[1,19],[18,45],[-4,-31],[-4,-6]],[[2324,4685],[0,343],[-7,22],[-5,36],[8,41],[1,22]],[[2321,5149],[-1,76],[-4,20],[-2,42],[0,51],[-1,8],[-1,123],[-5,65],[-3,36],[0,77],[1,27],[-3,60]],[[2302,5734],[59,0],[0,73],[5,-2],[4,-14],[4,-100],[3,-11],[9,-3],[1,-10],[11,-4],[1,-21],[10,5],[0,9],[7,10],[6,-4],[8,-16],[2,-19],[4,2],[4,-43],[2,18],[7,8],[1,-18],[9,-12],[0,-17],[4,-14],[8,8],[5,18],[8,12],[2,-28],[5,6],[6,-6],[6,4],[8,-24],[7,4],[0,-10],[-10,-24],[-13,-19],[-9,-20],[-12,-49],[-5,-31],[-8,-34],[-13,-46],[2,-16]],[[2450,5296],[-2,9],[-6,-16],[0,-113],[-2,-11],[-8,-16],[-6,-41],[-1,-27],[3,-2],[4,-24],[-3,-29],[0,-33],[-2,-70],[8,-34],[6,-3],[3,-21],[8,-21],[2,-25],[8,-33],[5,-7],[5,-42],[-1,-30],[2,-22]],[[2553,2179],[-3,-8],[-7,4],[-3,12],[-7,-8],[-9,-22],[-3,-14]],[[2498,3062],[53,0],[7,0]],[[2524,3348],[-2,0],[-2,0],[1,-47],[-6,-48]],[[2376,3349],[0,95]],[[2356,4017],[-7,50],[-6,62]],[[2108,5151],[0,-181],[-1,0]],[[2107,4970],[-53,1],[-90,0],[-56,0],[0,-100]],[[1766,5734],[130,-1],[58,1],[154,0]],[[2108,5734],[0,-217],[0,-366]],[[2107,4208],[0,382]],[[2107,4590],[21,0],[49,-1],[88,0],[1,-10],[15,-34],[4,19],[4,-4],[13,0],[15,-36],[2,-27],[5,-5]],[[1823,4398],[0,-954]],[[1654,4398],[37,-1],[47,2]],[[3006,4538],[-2,14],[0,28],[3,11],[-1,27],[3,81],[5,37],[2,43],[3,16],[-1,47],[10,17],[5,33],[-3,31],[4,32],[0,18]],[[3034,4973],[4,49],[6,-5],[2,12]],[[3056,4600],[-3,-35]],[[2962,4152],[-5,-13],[-2,-29],[8,-14],[0,-22],[-3,-103],[-9,-76],[-6,-22],[-5,-48],[-3,31],[-8,16],[-10,42],[-1,28],[0,4],[2,11]],[[2922,3980],[8,15],[0,15],[9,31],[2,17],[-9,39],[0,24],[-3,6],[-1,22],[5,33],[-3,20],[7,40],[2,21],[4,13]],[[2943,4276],[13,-41],[9,-28],[-3,-55]],[[2137,3444],[0,-95]],[[2137,3349],[-1,0],[0,-474],[0,-193],[0,-192],[-101,0],[-1,-18],[3,-22]],[[2037,2450],[-48,0],[0,-87],[-24,0]],[[2972,4205],[13,-15],[2,11],[10,0],[6,6],[8,31],[1,-22],[5,-10],[-11,-28],[-22,-42],[-9,-8],[-6,2],[-5,-9],[-2,31]],[[2943,4276],[-2,14],[-4,1],[-5,32],[1,29],[-4,22],[-2,-2],[-3,27],[-125,0],[0,48],[0,3]],[[2799,4450],[17,54],[3,26],[5,18],[-2,32],[-2,7],[-2,52],[17,22],[15,-1],[6,-5],[6,-21],[4,8],[12,-1],[8,14],[8,34],[5,1],[0,52],[3,31],[-7,21],[2,24],[11,32],[4,28],[14,64],[13,32],[19,-5],[23,4]],[[2981,4973],[1,-39],[-2,-36],[3,-34],[-1,-37],[-3,-39],[2,-52],[-1,-16],[4,-31],[-1,-132],[0,-16]],[[2909,3359],[4,-77],[-8,8],[-1,-10],[-10,-11],[-1,-11],[-7,-3],[0,-13],[8,9],[1,-8],[9,9],[3,-18],[5,8],[2,-46],[-2,-22],[-3,-2],[-8,-47],[-9,-2],[-2,-33],[4,-32],[4,-6],[-6,-54],[-6,7],[-9,-6],[-6,-11],[-10,-37],[-7,-48],[-4,-60],[-6,13],[-11,-12]],[[2833,2844],[-32,181],[-32,4],[1,21],[-5,33],[-3,-12],[0,20],[-35,10],[-8,-8],[-6,-17],[-10,-13]],[[2669,3061],[1,45],[5,4],[3,31],[7,29],[7,1],[7,29],[8,10],[6,43],[4,13],[1,-19],[11,37],[5,-8],[4,36],[5,9],[1,45]],[[2744,3366],[20,-5],[19,-3],[23,-1],[103,2]],[[2321,5149],[-213,2]],[[2108,5734],[194,0]],[[2777,4138],[-4,-10],[2,-21],[0,-29],[-4,-46],[-3,-70],[-11,-62],[-3,-8],[-4,12],[-3,-27],[-3,1],[-4,-36],[1,-22],[-3,-18],[-4,29],[-5,-46],[1,-29],[-3,-11],[-1,-25],[-8,-4]],[[2694,4347],[11,-26],[3,-15],[3,14],[6,-30],[4,-9],[14,25],[7,-6],[9,36],[12,34],[14,24]],[[2777,4394],[0,-256]],[[2380,2803],[-11,21],[-3,22],[-7,18],[-2,-16],[-8,1],[-1,10],[-7,-19],[-3,11],[-6,-10],[-5,-29],[-2,17],[-6,14],[-7,0],[-2,21],[-7,-42],[-2,24],[-3,-8],[-3,16],[-7,15],[-5,-25],[-2,26],[-4,3],[-2,21],[-6,8],[-3,-18],[-3,16],[-5,-2],[-6,17],[-6,-2],[-2,36],[-9,2],[-4,-6],[-6,37],[-2,-3],[0,370],[-52,0],[-34,0]],[[1534,4399],[-4,22],[-2,61],[0,43],[-4,33],[3,32],[2,51],[4,54],[2,48],[3,162],[0,22],[3,71],[1,99],[-2,54],[1,32],[12,29]],[[1553,5212],[5,-22],[4,5],[3,2],[6,-20],[3,-23],[1,-57],[15,-21],[12,30],[8,3],[9,-10],[1,-13],[16,27],[3,-9],[9,5],[7,19],[12,17],[12,4],[4,12],[58,-1]],[[2807,3964],[-30,0],[0,174]],[[2777,4394],[5,11],[17,45]],[[3045,4302],[-6,-4],[3,39]],[[3042,4343],[-4,3],[-3,-28],[-1,-40],[-11,-9]],[[2833,2844],[-5,-10],[-6,-31],[-6,-49],[-1,-40],[-5,-31],[-6,0],[-2,-23],[-6,-25],[-4,-28],[-6,-11],[-6,-29],[-1,-14],[-6,-16],[-6,-40]],[[2107,4590],[0,380]],[[2687,3368],[57,-2]],[[2398,2049],[-5,-1],[-14,-26],[-6,15],[-1,31],[-3,-22],[-3,5],[-1,-27],[3,-11],[0,-36],[-5,-37],[-9,-47],[-17,-51],[-2,9],[-5,-13],[0,12],[-7,-9],[-3,24],[-2,-5],[7,-49],[-5,-16],[-5,10],[-1,-35],[-7,-35],[-6,-66],[-4,-69],[-3,5],[-1,-25],[3,6],[-2,-50],[-2,-2],[0,-28],[3,-16],[1,-57],[3,-20],[0,-37],[3,-32],[-9,-20],[-3,25],[-7,10],[-9,-3],[-8,32],[-5,3],[-5,25],[-6,8],[-4,24],[-2,58],[-5,34],[0,30],[-2,31],[1,27],[-4,30],[-3,4],[-5,27],[-1,34],[-5,32],[-6,26],[-3,57],[-2,16],[-4,46],[-1,38],[-4,27],[-6,24],[-1,16],[-6,15],[-4,42],[-13,9],[-7,-2],[-7,15],[-1,-20],[-7,-6],[-5,-40],[-3,-64],[-2,-1],[-4,-37],[-5,-1],[-7,29],[-17,47],[-4,25],[-6,24],[-5,54],[-1,49],[-4,40],[-2,35],[-3,22],[-11,32],[-6,44],[-4,15],[-6,38],[-7,20],[-5,50],[-4,11]],[[1908,4399],[0,-192],[57,0]],[[2981,4973],[30,-2],[23,2]],[[2927,3641],[-4,-32],[-3,-12],[-3,-44],[-6,-71],[-5,-15],[-1,27],[2,58],[8,74]],[[2874,3756],[-4,-8],[-2,-28],[1,-19],[8,6],[1,-31],[10,-12],[3,-24],[8,-26],[-4,-54],[4,-41],[-4,-20],[-1,-24],[4,-15],[-4,-23],[-6,30],[-1,-10],[5,-22],[14,-5],[3,-71]],[[2736,3547],[-1,-16],[4,-32],[5,-16],[4,1],[5,25],[4,-20],[7,11],[13,36],[1,-11],[5,17],[0,34],[4,30],[5,29],[2,34],[6,36],[2,44],[5,-27],[4,-8],[3,16],[6,68],[4,-17],[13,77],[2,57],[15,-64],[3,37]],[[1553,5212],[-5,7],[-4,-12],[-6,17],[1,26],[4,14],[-6,40],[-4,103],[-2,14],[-3,73],[-6,28],[-2,56],[3,38],[6,-18],[11,-24],[8,1],[8,-9],[8,9],[3,-16],[7,1],[5,-42],[3,3],[1,-56],[2,-52],[3,6],[-3,43],[1,43],[4,44],[-3,18],[-1,31],[-3,35],[2,25],[-2,29],[-5,4],[-4,22],[1,21],[163,0]],[[1576,5602],[4,9],[0,-39],[-5,15],[1,15]],[[1568,5655],[3,25],[4,-30],[-1,-27],[-7,8],[1,24]],[[2576,4989],[-1,-23],[-6,-4],[-4,-44],[-2,-30],[3,-6],[5,20],[4,38],[6,15],[5,48],[6,10],[-1,-25],[-4,-23],[-8,-79],[-2,-44],[0,-32],[-3,-10],[-2,-43],[1,-37],[-3,-24],[-3,-59],[0,-47],[4,-42],[-1,-55]],[[2450,5296],[6,-2],[20,33],[8,17],[2,-13],[-4,-25],[9,-33],[5,-3]]]};\n  Datamap.prototype.usgTopo = '__USG__';\n  Datamap.prototype.uzbTopo = '__UZB__';\n  Datamap.prototype.vatTopo = '__VAT__';\n  Datamap.prototype.vctTopo = '__VCT__';\n  Datamap.prototype.venTopo = '__VEN__';\n  Datamap.prototype.vgbTopo = '__VGB__';\n  Datamap.prototype.virTopo = '__VIR__';\n  Datamap.prototype.vnmTopo = '__VNM__';\n  Datamap.prototype.vutTopo = '__VUT__';\n  Datamap.prototype.wlfTopo = '__WLF__';\n  Datamap.prototype.wsbTopo = '__WSB__';\n  Datamap.prototype.wsmTopo = '__WSM__';\n  Datamap.prototype.yemTopo = '__YEM__';\n  Datamap.prototype.zafTopo = '__ZAF__';\n  Datamap.prototype.zmbTopo = '__ZMB__';\n  Datamap.prototype.zweTopo = '__ZWE__';\n\n  /**************************************\n                Utilities\n  ***************************************/\n\n  // Convert lat/lng coords to X / Y coords\n  Datamap.prototype.latLngToXY = function(lat, lng) {\n     return this.projection([lng, lat]);\n  };\n\n  // Add <g> layer to root SVG\n  Datamap.prototype.addLayer = function( className, id, first ) {\n    var layer;\n    if ( first ) {\n      layer = this.svg.insert('g', ':first-child')\n    }\n    else {\n      layer = this.svg.append('g')\n    }\n    return layer.attr('id', id || '')\n      .attr('class', className || '');\n  };\n\n  Datamap.prototype.updateChoropleth = function(data, options) {\n    var svg = this.svg;\n    var that = this;\n\n    // When options.reset = true, reset all the fill colors to the defaultFill and kill all data-info\n    if ( options && options.reset === true ) {\n      svg.selectAll('.datamaps-subunit')\n        .attr('data-info', function() {\n           return \"{}\"\n        })\n        .transition().style('fill', this.options.fills.defaultFill)\n    }\n\n    for ( var subunit in data ) {\n      if ( data.hasOwnProperty(subunit) ) {\n        var color;\n        var subunitData = data[subunit]\n        if ( ! subunit ) {\n          continue;\n        }\n        else if ( typeof subunitData === \"string\" ) {\n          color = subunitData;\n        }\n        else if ( typeof subunitData.color === \"string\" ) {\n          color = subunitData.color;\n        }\n        else if ( typeof subunitData.fillColor === \"string\" ) {\n          color = subunitData.fillColor;\n        }\n        else {\n          color = this.options.fills[ subunitData.fillKey ];\n        }\n        // If it's an object, overriding the previous data\n        if ( subunitData === Object(subunitData) ) {\n          this.options.data[subunit] = defaults(subunitData, this.options.data[subunit] || {});\n          var geo = this.svg.select('.' + subunit).attr('data-info', JSON.stringify(this.options.data[subunit]));\n        }\n        svg\n          .selectAll('.' + subunit)\n          .transition()\n            .style('fill', color);\n      }\n    }\n  };\n\n  Datamap.prototype.updatePopup = function (element, d, options) {\n    var self = this;\n    element.on('mousemove', null);\n    element.on('mousemove', function() {\n      var position = d3.mouse(self.options.element);\n      d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover')\n        .style('top', ( (position[1] + 30)) + \"px\")\n        .html(function() {\n          var data = JSON.parse(element.attr('data-info'));\n          try {\n            return options.popupTemplate(d, data);\n          } catch (e) {\n            return \"\";\n          }\n        })\n        .style('left', ( position[0]) + \"px\");\n    });\n\n    d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover').style('display', 'block');\n  };\n\n  Datamap.prototype.addPlugin = function( name, pluginFn ) {\n    var self = this;\n    if ( typeof Datamap.prototype[name] === \"undefined\" ) {\n      Datamap.prototype[name] = function(data, options, callback, createNewLayer) {\n        var layer;\n        if ( typeof createNewLayer === \"undefined\" ) {\n          createNewLayer = false;\n        }\n\n        if ( typeof options === 'function' ) {\n          callback = options;\n          options = undefined;\n        }\n\n        options = defaults(options || {}, self.options[name + 'Config']);\n\n        // Add a single layer, reuse the old layer\n        if ( !createNewLayer && this.options[name + 'Layer'] ) {\n          layer = this.options[name + 'Layer'];\n          options = options || this.options[name + 'Options'];\n        }\n        else {\n          layer = this.addLayer(name);\n          this.options[name + 'Layer'] = layer;\n          this.options[name + 'Options'] = options;\n        }\n        pluginFn.apply(this, [layer, data, options]);\n        if ( callback ) {\n          callback(layer);\n        }\n      };\n    }\n  };\n\n  // Expose library\n  if (typeof exports === 'object') {\n    d3 = require('d3');\n    topojson = require('topojson');\n    module.exports = Datamap;\n  }\n  else if ( typeof define === \"function\" && define.amd ) {\n    define( \"datamaps\", [\"require\", \"d3\", \"topojson\"], function(require) {\n      d3 = require('d3');\n      topojson = require('topojson');\n\n      return Datamap;\n    });\n  }\n  else {\n    window.Datamap = window.Datamaps = Datamap;\n  }\n\n  if ( window.jQuery ) {\n    window.jQuery.fn.datamaps = function(options, callback) {\n      options = options || {};\n      options.element = this[0];\n      var datamap = new Datamap(options);\n      if ( typeof callback === \"function\" ) {\n        callback(datamap, options);\n      }\n      return this;\n    };\n  }\n})();\n"],"sourceRoot":""}